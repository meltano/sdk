[tool.poetry]
name = "singer-sdk"
version = "0.34.1"
description = "A framework for building Singer taps"
authors = ["Meltano Team and Contributors <hello@meltano.com>"]
maintainers = ["Meltano Team and Contributors <hello@meltano.com>"]
readme = "README.md"
homepage = "https://sdk.meltano.com/en/latest/"
repository = "https://github.com/meltano/sdk"
documentation = "https://sdk.meltano.com/en/latest/"
keywords = [
    "Meltano",
    "Singer",
    "Meltano SDK",
    "Singer SDK",
    "ELT",
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]
license = "Apache-2.0"

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/meltano/sdk/issues"
"Twitter" = "https://twitter.com/meltanodata/"
"Changelog" = "https://github.com/meltano/sdk/blob/main/CHANGELOG.md"
"Slack" = "https://meltano.com/slack"
"Youtube" = "https://www.youtube.com/meltano"

[tool.poetry.dependencies]
python = ">=3.7.1"
backoff = { version = ">=2.0.0", python = "<4" }
backports-datetime-fromisoformat = { version = ">=2.0.1", python = "<3.11" }
click = "~=8.0"
cryptography = ">=3.4.6"
fs = ">=2.4.16"
importlib-metadata = {version = "<7.0.0", python = "<3.12"}
importlib-resources = {version = ">=5.12.0", markers = "python_version < \"3.9\""}
inflection = ">=0.5.1"
joblib = ">=1.0.1"
jsonpath-ng = ">=1.5.3"
jsonschema = [
    { version = ">=4.16.0,<4.18", python = "<3.8" },
    { version = ">=4.16.0", python = ">=3.8" },
]
memoization = { version = ">=0.3.2,<0.5.0", python = "<4" }
packaging = ">=23.1"
pendulum = [
    { version = ">=2.1.0,<3", python = "<3.8" },
    { version = ">=2.1.0,<4", python = ">=3.8" },
]
PyJWT = "~=2.4"
python-dateutil = ">=2.8.2"
python-dotenv = ">=0.20"
pytz = ">=2022.2.1"
PyYAML = ">=6.0"
requests = ">=2.25.1"
simpleeval = ">=0.9.13"
simplejson = ">=3.17.6"
sqlalchemy = ">=1.4,<3.0"
typing-extensions = ">=4.5.0"
# urllib3 2.0 is not compatible with botocore
urllib3 = ">=1.26,<2"

# Sphinx dependencies installed as optional 'docs' extras
# https://github.com/readthedocs/readthedocs.org/issues/4912#issuecomment-664002569
sphinx = {version = ">=4.5", optional = true}
furo = {version = ">=2022.12.7", optional = true}
sphinx-copybutton = {version = ">=0.3.1", optional = true}
myst-parser = {version = ">=1", optional = true}
sphinx-autobuild = {version = ">=2021.3.14", optional = true}
sphinx-inline-tabs = {version = ">=2023.4.21", optional = true, markers = "python_version >= \"3.8\""}
sphinx-notfound-page = {version = ">=1.0.0", optional = true, python = ">=3.8"}
sphinx-reredirects = {version = ">=0.1.1", optional = true}

# File storage dependencies installed as optional 'filesystem' extras
fs-s3fs = {version = ">=1.1.1", optional = true}

# Parquet file dependencies installed as optional 'parquet' extras
numpy = [
    { version = "<1.22", python = "<3.8", optional = true },
    { version = ">=1.22,<1.25", python = ">=3.8,<3.9", optional = true },
    { version = ">=1.22", python = ">=3.9", optional = true },
]
pyarrow = [
    { version = ">=11,<13", python = "<3.8", optional = true },
    { version = ">=13", python = ">=3.8", optional = true }
]

# Testing dependencies installed as optional 'testing' extras
pytest = {version=">=7.2.1", optional = true}
pytest-durations = {version = ">=1.2.0", optional = true}

[tool.poetry.extras]
docs = [
    "sphinx",
    "furo",
    "sphinx-copybutton",
    "myst-parser",
    "sphinx-autobuild",
    "sphinx-inline-tabs",
    "sphinx-notfound-page",
    "sphinx-reredirects",
]
s3 = ["fs-s3fs"]
testing = [
    "pytest",
    "pytest-durations"
]
parquet = ["numpy", "pyarrow"]

[tool.poetry.group.dev.dependencies]
coverage = [
    {extras = ["toml"], version = ">=7.2,<7.3", python = "<3.8"},
    {extras = ["toml"], version = ">=7.2", python = ">=3.8"},
]

# TODO: Remove the Python 3.12 marker when DuckDB supports it
duckdb = { version = ">=0.8.0", python = "<3.12" }
duckdb-engine = { version = ">=0.9.4", python = "<3.12" }

mypy = [
    { version = ">=1.0,<1.5", python = "<3.8" },
    { version = ">=1.0", python = ">=3.8" },
]
pytest-benchmark = ">=4.0.0"
pytest-snapshot = ">=0.9.0"
requests-mock = ">=1.10.0"
time-machine = [
    { version = ">=2.10.0,<2.11", python = "<3.8" },
    { version = ">=2.10.0", python = ">=3.8" },
]
types-jsonschema = [
    { version = ">=4.17.0.6,<4.18", python = "<3.8" },
    { version = ">=4.17.0.6", python = ">=3.8" },
]
types-python-dateutil = ">=2.8.19"
types-pytz = ">=2022.7.1.2"
types-requests = ">=2.28.11"
types-simplejson = ">=3.18.0"
types-PyYAML = ">=6.0.12"
xdoctest = ">=1.1.1"

[tool.poetry.group.benchmark.dependencies]
pytest-codspeed = ">=2.2.0"

[tool.pytest.ini_options]
addopts = '--ignore=singer_sdk/helpers/_simpleeval.py -m "not external"'
markers = [
    "external: Tests relying on external resources",
    "windows: Tests that only run on Windows",
    "snapshot: Tests that use pytest-snapshot",
]
testpaths = ["tests"]
norecursedirs = "cookiecutter"

[tool.commitizen]
name = "cz_version_bump"
version = "0.34.1"
changelog_merge_prerelease = true
prerelease_offset = 1
tag_format = "v$major.$minor.$patch$prerelease"
version_files = [
    "docs/conf.py:^release =",
    "pyproject.toml:^version =",
    "cookiecutter/tap-template/{{cookiecutter.tap_id}}/pyproject.toml:singer-sdk",
    "cookiecutter/target-template/{{cookiecutter.target_id}}/pyproject.toml:singer-sdk",
    "cookiecutter/mapper-template/{{cookiecutter.mapper_id}}/pyproject.toml:singer-sdk",
    ".github/ISSUE_TEMPLATE/bug.yml:^      placeholder:",
]

[tool.coverage.paths]
source = [
    "singer_sdk/",
    "*/singer_sdk",
]
tests = [
    "tests/",
    "*/tests",
]

[tool.coverage.run]
branch = true
source = ["singer_sdk", "tests"]
omit = [
    "tests/*",
    "samples/*",
    "singer_sdk/helpers/_compat.py",
]

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    '''class .*\bProtocol\):''',
    '''@(abc\.)?abstractmethod''',
    '''if (t\.)?TYPE_CHECKING:''',
]
fail_under = 82

[tool.mypy]
exclude = "tests"
files = "singer_sdk"
python_version = "3.8"
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "backports.datetime_fromisoformat.*",
    "joblib.*",  # TODO: Remove when https://github.com/joblib/joblib/issues/1516 is shipped
    "jsonpath_ng.*",
    "pyarrow.*", # TODO: Remove when https://github.com/apache/arrow/issues/32609 if implemented and released
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
pytest11 = { reference = "singer_sdk:testing.pytest_plugin", extras = ["testing"], type = "console" }

[tool.poetry.plugins."singer_sdk.batch_encoders"]
jsonl = "singer_sdk.contrib.batch_encoder_jsonl:JSONLinesBatcher"
parquet = "singer_sdk.contrib.batch_encoder_parquet:ParquetBatcher"

[tool.ruff]
line-length = 88
src = ["samples", "singer_sdk", "tests"]
target-version = "py37"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
exclude = [
    "cookiecutter/*",
    "*simpleeval*",
]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in class method
    "N818",    # Exception name should be named with an Error suffix
    "COM812",  # missing-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
]
select = [
    "F",    # Pyflakes
    "E",    # pycodestyle (error)
    "W",    # pycodestyle (warning)
    "C90",  # mccabe
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle/flake8-docstrings
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimezs
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PGH",  # pygrep-hooks
    "PLC",  # pylint (convention)
    "PLE",  # pylint (error)
    "PLR",  # pylint (refactor)
    "PLW",  # pylint (warning)
    "PERF", # perflint
    "RUF",  # ruff
]
unfixable = [
    "ERA",  # Don't remove commented out code
]

[tool.ruff.lint.per-file-ignores]
"docs/conf.py" = [
    "D",      # pydocstyle/flake8-docstrings
    "I002",   # isort: missing-required-import
    "INP001", # flake8-no-pep420: implicit-namespace-package
]
"noxfile.py" = ["ANN"]
"tests/*" = ["ANN", "D1", "D2", "FBT001", "FBT003", "PLR2004", "S101", "SLF001"]
# Disabled some checks in samples code
"samples/*" = ["ANN", "D"]
# Templates support a generic resource of type Any.
"singer_sdk/testing/*.py" = ["S101"]
"singer_sdk/testing/templates.py" = ["ANN401"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["typing"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
typing = "t"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.lint.isort]
known-first-party = ["singer_sdk", "samples", "tests"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "singer_sdk.cli.plugin_cli",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 9
