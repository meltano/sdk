stages:
  - setup
  - test
  - publish

include:
  - template: Security/License-Scanning.gitlab-ci.yml

default:
  before_script:
    - python -V
    - python -m pip install pipx
    - python -m pipx ensurepath
    - python -m pipx install poetry
    # Force update PATH to include pipx executables
    - export PATH=$PATH:/root/.local/bin
    # Create virtual environment and make sure pip and setuptools are up-to-date
    - poetry env use python
    - poetry run pip install --upgrade pip setuptools
    - poetry install --no-root

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  LM_PYTHON_VERSION: 3

cache:
  paths:
    - .cache/pip
    - venv/

generate_requirements:
  stage: setup
  image:
    name: python:3.8
  before_script:
    # Install poetry
    - python -V
    - python -m pip install pipx
    - python -m pipx ensurepath
    - python -m pipx install poetry
    # Force update PATH to include pipx executables
    - export PATH=$PATH:/root/.local/bin
  script:
    - poetry export --format requirements.txt --output requirements.txt
  artifacts:
    paths:
      - requirements.txt

license_scanning:
  stage: test
  before_script: []  # negate defaults above
  dependencies:
    - generate_requirements

pypi_publish:
  # release:
  #   name: '$CI_COMMIT_TAG'
  #   tag_name: '$CI_COMMIT_TAG'
  #   description: '$CI_COMMIT_TAG'
  only:
    - tags
  stage: publish
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8"]
  image: python:${PYTHON_VERSION}
  script:
    - |
      echo "Publishing tag '$CI_COMMIT_TAG' to PyPi, Ref='$CI_COMMIT_REF_NAME' and Namespace='$CI_PROJECT_NAMESPACE'..."
      echo "Detected poetry version: v$(poetry version --short)"
      if [[ "$CI_COMMIT_TAG" == "v$(poetry version --short)" ]];
      then
        echo -e "\nPublishing to version ref 'v$(poetry version --short)'...\n\n"
        poetry publish --build
      else
        echo -e "\nERROR - Tag '$CI_COMMIT_TAG' did not match detected version 'v$(poetry version --short)'."
        exit 1
      fi

pypi_prerelease:
  when: manual
  except:
    - tags
  stage: publish
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8"]
  image: python:${PYTHON_VERSION}
  script:
    - |
      echo "Publishing to PyPi, Ref='$CI_COMMIT_REF_NAME' and Namespace='$CI_PROJECT_NAMESPACE'..."
      poetry version $(poetry version --short)-dev.$CI_JOB_ID
      poetry version --short
      echo -e "\nPublishing to version ref '$(poetry version --short)'...\n\n"
      poetry publish --build
