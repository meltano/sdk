stages:
  - setup
  - test
  - publish

include:
  - template: Security/License-Scanning.gitlab-ci.yml

default:
  before_script:
    - python -V
    - python -m pip install pipx
    - python -m pipx ensurepath
    - python -m pipx install poetry
    # Force update PATH to include pipx executables
    - export PATH=$PATH:/root/.local/bin
    # Create virtual environment and make sure pip and setuptools are up-to-date
    - poetry env use python
    - poetry run pip install --upgrade pip setuptools
    - poetry install --no-root

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  LM_PYTHON_VERSION: 3

cache:
  paths:
    - .cache/pip
    - venv/

generate_requirements:
  stage: setup
  image:
    name: python:3.8
  before_script:
    # Install poetry
    - python -V
    - python -m pip install pipx
    - python -m pipx ensurepath
    - python -m pipx install poetry
    # Force update PATH to include pipx executables
    - export PATH=$PATH:/root/.local/bin
  script:
    - poetry export --format requirements.txt --output requirements.txt
  artifacts:
    paths:
      - requirements.txt

license_scanning:
  stage: test
  before_script: []  # negate defaults above
  dependencies:
    - generate_requirements

build_and_test:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10"]
  image: python:${PYTHON_VERSION}
  script:
    - |
      if [[ "$CI_PROJECT_NAMESPACE" == "meltano" ]]
      then
        echo "Run full test suite using 'py${PYTHON_VERSION//./}' tox env config..."
        poetry run tox -e py
      else
        echo "Run 'core' and 'cookiecutter' python test suites..."
        poetry run pytest --doctest-modules singer_sdk
        poetry run pytest tests/core
        poetry run pytest tests/cookiecutters
      fi

lint:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8"]
  image: python:${PYTHON_VERSION}
  script:
    - poetry run tox -e lint


version_bump_trigger:
  # This job triggers for any branches named like `release/vX.Y.Z`
  # The job will automatically flush the changelog, bump version refs,
  # and commit and push the result back to the branch.
  only:
    refs:
      - /^release\/v.*$/
  except:
    - tags
  stage: .pre
  image: python:3.8
  before_script:
    # - git config --global user.name "${GITLAB_USER_NAME}"
    # - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.email "hello@meltano.com"
    - git config --global user.name "Gitlab CI (bot)"
    - pip install changelog-cli bumpversion
    # - poetry install
  script:
    - |
      echo "Setting up 'discovery.yml' sync from 'hub.meltano.com'..."
      echo "Current location: Ref='$CI_COMMIT_REF_NAME' and Namespace='$CI_PROJECT_NAMESPACE'..."
    - |
      echo "Detecting and validating version number..."
      CURR_VER="$(bumpversion major --allow-dirty --dry-run --list | grep current_version= | cut -d'=' -f2)"
      NEW_VER="${CI_COMMIT_REF_NAME#release/v}"
      echo "Detected current version '$CURR_VER' and new version '$NEW_VER'"
      [[ "$CURR_VER" == "" ]] && echo "Could not detect current version" && exit 1
      [[ "$NEW_VER" == "" ]] && echo "Could not detect new version" && exit 1
      [[ "$NEW_VER" == "$CURR_VER" ]] && echo "Version is already bumped. Aborting job." && exit 0
      MAJOR_BUMP="$(bumpversion major --allow-dirty --dry-run --list | grep new_version= | cut -d'=' -f2)"
      MINOR_BUMP="$(bumpversion minor --allow-dirty --dry-run --list | grep new_version= | cut -d'=' -f2)"
      PATCH_BUMP="$(bumpversion patch --allow-dirty --dry-run --list | grep new_version= | cut -d'=' -f2)"
      [[ $NEW_VER = $MAJOR_BUMP ]] && BUMP_TYPE="major"
      [[ $NEW_VER = $MINOR_BUMP ]] && BUMP_TYPE="minor"
      [[ $NEW_VER = $PATCH_BUMP ]] && BUMP_TYPE="patch"
      [[ "$BUMP_TYPE" == "" ]] && echo "Could not detect version bump type from version text '$NEW_VER'" && exit 1
      echo "Detected bump type '$BUMP_TYPE' from '$CURR_VER' to '$NEW_VER'"
      echo "Flushing changelog entries with '--$BUMP_TYPE' flag..."
      changelog release --$BUMP_TYPE --yes
      echo "Adding changelog to git..."
      git add CHANGELOG.md
      echo "Bumping version entries..."
      bumpversion $BUMP_TYPE --tag --allow-dirty --new-version=$NEW_VER
      echo "Pushing branch updates..."
      git push http://root:$CI_COMMITS_GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$CI_COMMIT_REF_NAME

pypi_publish:
  # release:
  #   name: '$CI_COMMIT_TAG'
  #   tag_name: '$CI_COMMIT_TAG'
  #   description: '$CI_COMMIT_TAG'
  only:
    - tags
  stage: publish
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8"]
  image: python:${PYTHON_VERSION}
  script:
    - |
      echo "Publishing tag '$CI_COMMIT_TAG' to PyPi, Ref='$CI_COMMIT_REF_NAME' and Namespace='$CI_PROJECT_NAMESPACE'..."
      echo "Detected poetry version: v$(poetry version --short)"
      if [[ "$CI_COMMIT_TAG" == "v$(poetry version --short)" ]];
      then
        echo -e "\nPublishing to version ref 'v$(poetry version --short)'...\n\n"
        poetry publish --build
      else
        echo -e "\nERROR - Tag '$CI_COMMIT_TAG' did not match detected version 'v$(poetry version --short)'."
        exit 1
      fi

pypi_prerelease:
  when: manual
  except:
    - tags
  stage: publish
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8"]
  image: python:${PYTHON_VERSION}
  script:
    - |
      echo "Publishing to PyPi, Ref='$CI_COMMIT_REF_NAME' and Namespace='$CI_PROJECT_NAMESPACE'..."
      poetry version $(poetry version --short)-dev.$CI_JOB_ID
      poetry version --short
      echo -e "\nPublishing to version ref '$(poetry version --short)'...\n\n"
      poetry publish --build
