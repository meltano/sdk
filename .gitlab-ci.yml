stages:
  - test
  - publish

default:
  before_script:
    - python -V
    - pip install pipx
    # Force update PATH to include pipx executables
    - export PATH=$PATH:/root/.local/bin
    - pipx install poetry
    - pipx install tox
    - poetry install

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

build_and_test:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.6", "3.7", "3.8"]
      # Official language image. Look for the different tagged releases at:
      # https://hub.docker.com/r/library/python/tags/
  image: python:${PYTHON_VERSION}
  script:
    - |
      if [[ "$CI_PROJECT_NAMESPACE" == "meltano" ]]
      then
        echo "Run full python test suite..."
        poetry run pytest
      else
        echo "Run 'core' and 'cookiecutter' python test suites..."
        poetry run pytest singer_sdk/tests/core
        poetry run pytest singer_sdk/tests/cookiecutter
      fi

lint:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8"]
  image: python:${PYTHON_VERSION}
  script:
    - poetry run black --check singer_sdk/
    - poetry run flake8 singer_sdk
    - poetry run pydocstyle singer_sdk
    - poetry run mypy singer_sdk || echo "MyPy found issues (ignoring)..."

publish_to_pypi:
  stage: publish
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8"]
  image: python:${PYTHON_VERSION}
  script:
    - |
      echo "Publishing to PyPi, Ref='$CI_COMMIT_REF_NAME' and Namespace='$CI_PROJECT_NAMESPACE'..."
      if [[ "$CI_PROJECT_NAMESPACE" == "meltano" ]]
      then
        if [[ "$CI_COMMIT_REF_NAME" == *main ]]
        then
          poetry version --short
        else
          poetry version $(poetry version --short)-dev.$CI_JOB_ID
          poetry version --short
        fi
        echo -e "\nPublishing to version ref '$(poetry version --short)'...\n\n"
        # poetry config pypi-token.pypi "$PYPI_PUBLISH_TOKEN"
        poetry publish --build
      else
        echo "Skipped. (Running in fork.)"
      fi
