# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
#
# Matrix syntax not correct:
# .parallel:python_version:
#   parallel:
#     matrix:
#       - PYTHON_VERSION: ["3.6", "3.7", "3.8"]

image: python:3.7

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V
  - pip install pipx
  # Force update PATH to include pipx executables
  - export PATH=$PATH:/root/.local/bin
  - pipx install poetry
  - pipx install tox
  - poetry install

test_and_deploy:
  script:
    - |
      if [[ "$CI_PROJECT_NAMESPACE" == "meltano" ]]
      then
        echo "Run full python test suite..."
        poetry run pytest
      else
        echo "Run 'core' and 'cookiecutter' python test suites..."
        poetry run pytest singer_sdk/tests/core
        poetry run pytest singer_sdk/tests/cookiecutter
      fi
    - |
      echo "Run python linters..."
      poetry run black --check singer_sdk/
      poetry run flake8 singer_sdk
      poetry run pydocstyle singer_sdk
      poetry run mypy singer_sdk || echo "MyPy found issues (ignoring)..."
    - |
      echo "Publishing to PyPi..."
      if [[ "$CI_PROJECT_NAMESPACE" == "meltano" ]]
      then
        if [[ "$BRANCH_NAME" == *main ]]
        then
          poetry version --short
        else
          poetry version $(poetry version --short)-dev.$CI_JOB_ID
          poetry version --short
        fi
        echo -e "\nPublishing to version ref '$(poetry version --short)'...\n\n"
        # poetry config pypi-token.pypi "$PYPI_PUBLISH_TOKEN"
        poetry publish --build
      else
        echo "Skipped. (Running in fork.)"
      fi
    - |
      echo "Waiting for PyPi availability..."
      if [[ "$CI_PROJECT_NAMESPACE" == "meltano" ]]
      then
        pwd
        ls -la
        export VER=$(poetry version --short)
        export PIPERR=$(pip install tapdance==$VER 2>&1)
        echo "Checking for PyPi availability of version $VER"
        if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
        export PIPERR=$(pip install tapdance==$VER 2>&1)
        if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
        export PIPERR=$(pip install tapdance==$VER 2>&1)
        if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
        export PIPERR=$(pip install tapdance==$VER 2>&1)
        if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
        export PIPERR=$(pip install tapdance==$VER 2>&1)
        if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
        export PIPERR=$(pip install tapdance==$VER 2>&1)
        if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not yet found..."; sleep 30; } fi;
        export PIPERR=$(pip install tapdance==$VER 2>&1)
        if [[ $PIPERR == *"$VER"* ]]; then { echo "Yes"; } else { echo "Not found. Giving up. Last message from PyPi was $PIPERR"; exit 1; } fi;
      else
        echo "Skipped. (Running in fork.)"
      fi
