name: Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "samples/**"
      - "singer_sdk/**"
      - "tests/**"
      - "noxfile.py"
      - "pyproject.toml"
      - "uv.lock"
      - ".github/workflows/test.yml"
      - ".github/workflows/resources/requirements.txt"
  push:
    branches:
      - main
      - v*
    paths:
      - "samples/**"
      - "singer_sdk/**"
      - "tests/**"
      - "noxfile.py"
      - "pyproject.toml"
      - "uv.lock"
      - ".github/workflows/test.yml"
      - ".github/workflows/resources/requirements.txt"
  merge_group:
  workflow_dispatch:
    inputs: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"
  UV_CONSTRAINT: ${{ github.workspace }}/.github/workflows/resources/requirements.txt
  UV_VERSION: ">=0.8,<0.9"

permissions: {}

jobs:
  tests:
    name: "Test on ${{ matrix.python-version }} (${{ matrix.session }}) / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    env:
      NOXFORCEPYTHON: ${{ matrix.python-version }}
      NOXSESSION: ${{ matrix.session }}
    permissions:
      contents: read
    outputs:
      os: ${{ matrix.os }}
      nox-session: ${{ matrix.session }}
      python-version: ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        session: [tests]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version:
        - "3.9"
        - "3.10"
        - "3.11"
        - "3.12"
        - "3.13"
        include:
        - { session: doctest,       python-version: "3.13", os: "ubuntu-latest" }
        - { session: mypy,          python-version: "3.13", os: "ubuntu-latest" }
        - { session: mypy,          python-version: "3.9",  os: "ubuntu-latest" }
        - { session: deps,          python-version: "3.13", os: "ubuntu-latest" }
        - { session: test-lowest,   python-version: "3.9",  os: "ubuntu-latest" }
        - { session: test-contrib,  python-version: "3.13", os: "ubuntu-latest" }
        - { session: test-packages, python-version: "3.13", os: "ubuntu-latest" }

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        persist-credentials: false

    - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true

    - uses: astral-sh/setup-uv@7edac99f961f18b581bbd960d59d049f04c0002f # v6.4.1
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install Nox
      run: |
        uv tool install nox
        nox --version

    - name: Run Nox
      run: |
        nox --verbose

    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: always() && (matrix.session == 'tests' || matrix.session == 'test-contrib' || matrix.session == 'test-packages')
      with:
        include-hidden-files: true
        name: coverage-data-nox_${{ matrix.session }}-${{ matrix.os }}-py${{ matrix.python-version }}
        path: ".coverage.*"

  tests-external:
    name: External Tests
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.head.repo.fork }}
    env:
      NOXSESSION: test-external
      TAP_GITLAB_AUTH_TOKEN: ${{ secrets.SAMPLE_TAP_GITLAB_AUTH_TOKEN }}
      TAP_GITLAB_GROUP_IDS: ${{ secrets.SAMPLE_TAP_GITLAB_GROUP_IDS }}
      TAP_GITLAB_PROJECT_IDS: ${{ secrets.SAMPLE_TAP_GITLAB_PROJECT_IDS }}
      TAP_GITLAB_START_DATE: "2022-01-01T00:00:00Z"

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        persist-credentials: false

    - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: 3.x

    - uses: astral-sh/setup-uv@7edac99f961f18b581bbd960d59d049f04c0002f # v6.4.1
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install Nox
      run: |
        uv tool install nox
        nox --version

    - name: Run Nox
      run: |
        nox

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: tests
    env:
      NOXSESSION: coverage
    strategy:
      fail-fast: false
      matrix:
        include:
        - flag: core
          nox-session: tests
        - flag: optional-components
          nox-session: test-contrib
        - flag: end-to-end
          nox-session: test-packages
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false
    - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: '3.x'

    - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        pattern: coverage-data-nox_${{ matrix.nox-session }}-*
        merge-multiple: true

    - uses: astral-sh/setup-uv@7edac99f961f18b581bbd960d59d049f04c0002f # v6.4.1
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install Nox
      run: |
        uv tool install nox
        nox --version

    - run: nox --install-only

    - name: Combine coverage data and display human readable report
      run: |
        nox -r --no-install -- combine --debug=pathmap
        nox -r --no-install -- report --show-missing --ignore-errors

    - name: Create coverage report
      run: |
        nox -r --no-install -- xml

    - uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
      with:
        fail_ci_if_error: true
        flags: ${{ matrix.flag }}
        token: ${{ secrets.CODECOV_TOKEN }}
