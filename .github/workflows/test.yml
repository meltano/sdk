name: Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "cookiecutter/**"
      - "samples/**"
      - "singer_sdk/**"
      - "tests/**"
      - "noxfile.py"
      - "poetry.lock"
      - "pyproject.toml"
      - ".github/workflows/test.yml"
      - ".github/workflows/constraints.txt"
  push:
    branches: [main]
    paths:
      - "cookiecutter/**"
      - "samples/**"
      - "singer_sdk/**"
      - "tests/**"
      - "noxfile.py"
      - "poetry.lock"
      - "pyproject.toml"
      - ".github/workflows/test.yml"
      - ".github/workflows/constraints.txt"
  workflow_dispatch:
    inputs: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"

jobs:
  tests:
    name: "Test on ${{ matrix.python-version }} (${{ matrix.session }}) / ${{ matrix.os }} / SQLAlchemy: ${{ matrix.sqlalchemy }}"
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    env:
      NOXPYTHON: ${{ matrix.python-version }}
      NOXSESSION: ${{ matrix.session }}
    strategy:
      fail-fast: false
      matrix:
        session: [tests]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        sqlalchemy: ["2"]
        include:
        - { session: tests,   python-version: "3.12", os: "ubuntu-latest", sqlalchemy: "1" }
        - { session: doctest, python-version: "3.12", os: "ubuntu-latest", sqlalchemy: "2" }
        - { session: mypy,    python-version: "3.12",  os: "ubuntu-latest", sqlalchemy: "2" }

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Poetry
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install poetry
        pipx inject poetry poetry-plugin-export
        pipx inject poetry poetry-dynamic-versioning[plugin]
        poetry --version
        poetry self show plugins

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
        cache: 'pip'
        cache-dependency-path: 'poetry.lock'

    - name: Upgrade pip
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pip install pip
        pip --version

    - name: Install Nox
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install nox
        pipx inject nox nox-poetry
        nox --version

    - name: Run Nox
      env:
        SQLALCHEMY_VERSION: ${{ matrix.sqlalchemy }}
      run: |
        nox --verbose

    - uses: actions/upload-artifact@v4
      if: always() && (matrix.session == 'tests')
      with:
        name: coverage-data-nox_${{ matrix.session }}-${{ matrix.os }}-py${{ matrix.python-version }}_sqlalchemy_${{ matrix.sqlalchemy }}
        path: ".coverage.*"

  tests-external:
    name: External Tests
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.head.repo.fork }}
    env:
      NOXPYTHON: "3.12"
      NOXSESSION: tests
      SAMPLE_TAP_GITLAB_AUTH_TOKEN: ${{ secrets.SAMPLE_TAP_GITLAB_AUTH_TOKEN }}
      SAMPLE_TAP_GITLAB_GROUP_IDS: ${{ secrets.SAMPLE_TAP_GITLAB_GROUP_IDS }}
      SAMPLE_TAP_GITLAB_PROJECT_IDS: ${{ secrets.SAMPLE_TAP_GITLAB_PROJECT_IDS }}
      SAMPLE_TAP_GITLAB_START_DATE: "2022-01-01T00:00:00Z"
      SAMPLE_TAP_GOOGLE_ANALYTICS_CLIENT_EMAIL: ${{ secrets.SAMPLE_TAP_GOOGLE_ANALYTICS_CLIENT_EMAIL }}
      SAMPLE_TAP_GOOGLE_ANALYTICS_PRIVATE_KEY: ${{ secrets.SAMPLE_TAP_GOOGLE_ANALYTICS_PRIVATE_KEY }}
      SAMPLE_TAP_GOOGLE_ANALYTICS_VIEW_ID: ${{ secrets.SAMPLE_TAP_GOOGLE_ANALYTICS_VIEW_ID }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Poetry
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install poetry
        pipx inject poetry poetry-plugin-export
        pipx inject poetry poetry-dynamic-versioning[plugin]
        poetry --version
        poetry self show plugins

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.NOXPYTHON }}
        architecture: x64
        cache: 'pip'
        cache-dependency-path: 'poetry.lock'

    - name: Upgrade pip
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pip install pip
        pip --version

    - name: Install Nox
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install nox
        pipx inject nox nox-poetry
        nox --version

    - name: Run Nox
      run: |
        nox -- -m "external"

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: tests
    env:
      NOXSESSION: coverage
    steps:
    - uses: actions/checkout@v4

    - name: Install Poetry
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install poetry
        pipx inject poetry poetry-plugin-export
        poetry --version
        poetry self show plugins

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'poetry.lock'

    - name: Upgrade pip
      run: |
        pip install --constraint=.github/workflows/constraints.txt pip
        pip --version

    - uses: actions/download-artifact@v4
      with:
        pattern: coverage-data-*
        merge-multiple: true

    - name: Install Nox
      env:
        PIP_CONSTRAINT: .github/workflows/constraints.txt
      run: |
        pipx install nox
        pipx inject nox nox-poetry
        nox --version

    - run: nox --install-only

    - name: Combine coverage data and display human readable report
      run: |
        nox -r --no-install -- combine --debug=pathmap
        nox -r --no-install -- report --show-missing --ignore-errors

    - name: Create coverage report
      run: |
        nox -r --no-install -- xml

    - uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
