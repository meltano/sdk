{
  "cookies": {
    "_cfuvid": "HMZIh6XvaWgRx.bC3DPNXnkg3Sw8HMtkGrS2FOat.QM-1747940822175-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:02.077116+00:00",
  "elapsed": 0.737422,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e9816cd27ac4d-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:02 GMT",
    "ETag": "W/\"2b68e538c62293059ba30dc61ed57299\"",
    "Link": "<https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=6&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"prev\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=8&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"next\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=1&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"first\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=10&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=HMZIh6XvaWgRx.bC3DPNXnkg3Sw8HMtkGrS2FOat.QM-1747940822175-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-26-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-c",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"373de3a9b515923e8c1ed6fa6ed28227\",\"version\":\"1\"}",
    "x-next-page": "8",
    "x-page": "7",
    "x-per-page": "20",
    "x-prev-page": "6",
    "x-request-id": "373de3a9b515923e8c1ed6fa6ed28227",
    "x-runtime": "0.498762",
    "x-total": "200",
    "x-total-pages": "10"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?order_by=updated_at&page=7&scope=all&sort=asc&updated_after=2022-01-01T00%3A00%3A00Z"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?order_by=updated_at&page=7&scope=all&sort=asc&updated_after=2022-01-01T00%3A00%3A00Z",
  "_decoded_content": [
    {
      "id": 95062382,
      "iid": 232,
      "project_id": 22672923,
      "title": "Follow-up from \"Resolve \"Bug: `get_starting_timestamp()` and `get_starting_replication_key_value()` should be cached\"\"",
      "description": "The following discussion from !157 should be addressed:\n\n- [ ] @aaronsteers started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/157#note_696966474):  (+2 comments)\n\n    > @edgarrmondragon - This is looking great. I just did another review and there's just one remaining change I'd like to request. Can you add explicit removal of the \"starting\" value's key during the \"finalize\" step here: https://gitlab.com/meltano/sdk/-/blob/1378ed3ede701d2edde1d96fbd1db09d2971e3c4/singer_sdk/helpers/_state.py#L242\n    > \n    > Since this is one of those tokens that's only relevant while the stream is in-flight, we should explicitly remove it at the end of the sync operation. (Which is the function of `finalize_state_progress_markers()`.)\n    > \n    > For unsorted streams, I think it may automatically show up under \"progress_markers\" which gets purged as a whole object during finalization. However, for \"normal\" sorted streams, we won't have a \"progress_markers\" dict and we should remove the start value if present.",
      "state": "closed",
      "created_at": "2021-10-07T19:01:48.697Z",
      "updated_at": "2022-05-29T23:56:06.053Z",
      "closed_at": "2022-05-29T23:56:05.988Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Tech Debt",
        "urgency::low"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/232",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/232",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/232/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/232/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#232",
        "relative": "#232",
        "full": "meltano/sdk#232"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95118846,
      "iid": 236,
      "project_id": 22672923,
      "title": "Allow users to select the license they want",
      "description": "Per @edgarrmondragon the default license is Apache 2.0. https://gitlab.com/meltano/sdk/-/blob/main/cookiecutter/tap-template/%7B%7Bcookiecutter.tap_id%7D%7D/pyproject.toml#L10\n\nIt'd be nice to let users select from a handful of licenses. Even nicer if there's an API we can hit to just get all available ones and we could then suggest a few.",
      "state": "closed",
      "created_at": "2021-10-08T15:30:35.930Z",
      "updated_at": "2022-05-29T23:56:35.671Z",
      "closed_at": "2022-05-29T23:56:35.638Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/236",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/236",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/236/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/236/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#236",
        "relative": "#236",
        "full": "meltano/sdk#236"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95309797,
      "iid": 237,
      "project_id": 22672923,
      "title": "Cache requests with `requests-cache` to avoid hitting rate limits in dev and CI",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\n\nFor HTTP (RESTful or otherwise) taps, it would be good to allow users to cache responses. A nice option to implement this behavior could be https://github.com/reclosedev/requests-cache.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nThere's at least three use cases where users and developers of Singer taps would like to save a cache of requests made to the source API.\n\n### Tap Development\n\nDuring initial development of an HTTP tap, it would be good to have responses cached when testing and iterating on state, pagination and child streams. This would speed up development just by making the dev not wait for responses every time, and also save on API request limits.\n\n### CI\n\nArguably, CI pipelines should be lean and not overwhelm external services given and rate limits cause noisy CI failures. A tap repo would include a filesystem requests cache (https://requests-cache.readthedocs.io/en/stable/modules/requests_cache.backends.filesystem.html) and PRs that updates or adds requests parameters, should include the corresponding cache file update.\n\n### Integration with Meltano\n\nSimilar to tap development, users might be interested in not overwhelming external services or consuming request quotas during initial integration with Meltano and a target.\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\n- Tap users and developers are able to set up request caching. We could use the default SQLite storage, let them choose, or be opinionated on YAML, etc.\n\n- A CLI option or environment variable can be used to activate request caching. Usage of said cache can look for the same or different flag.\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nI can imagine a scenario where users are unknowingly caching requests in a production setting. If we can't provide safeguards against that, we shouldn't build this feature.",
      "state": "closed",
      "created_at": "2021-10-12T19:27:52.560Z",
      "updated_at": "2022-05-29T23:56:43.393Z",
      "closed_at": "2022-05-29T23:56:43.378Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/237",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/237",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/237/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/237/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#237",
        "relative": "#237",
        "full": "meltano/sdk#237"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95453315,
      "iid": 239,
      "project_id": 22672923,
      "title": "Syncing schemas for database targets",
      "description": "One of several common tasks for database-type targets that's currently missing from the SDK is the ability to create tables based on schema messages, and handle schema changes. Targets seem to handle this a number of different ways, and having some convention in the SDK is valuable on top of the obvious value of accelerating development of database targets.",
      "state": "closed",
      "created_at": "2021-10-14T21:17:53.104Z",
      "updated_at": "2022-05-29T23:56:58.923Z",
      "closed_at": "2022-05-29T23:56:58.879Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 10,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/239",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/239",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/239/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/239/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#239",
        "relative": "#239",
        "full": "meltano/sdk#239"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95622627,
      "iid": 242,
      "project_id": 22672923,
      "title": "Generic File Tap/Target",
      "description": "A generic file based tap seems appropriate, going to call this `tap-file` for now to give a name to it, pardon the words I chose here I'd be happy to update the Ontology used :D \n\nToday there's a bunch of ideasthat overlap with the core idea of File. I haven't seen a \"connector\" tool handle this very well before this is a common issue (Fivetran, workato, etc etc). \n\nWhere we are today:\n- https://hub.meltano.com/taps/s3-csv\n- https://hub.meltano.com/taps/csv\n- https://hub.meltano.com/taps/gmail-csv (questionable if this should be on the list)\n- https://hub.meltano.com/taps/parquet\n- https://hub.meltano.com/taps/sftp\n- https://hub.meltano.com/targets/jsonl\n- https://hub.meltano.com/targets/csv\n- https://hub.meltano.com/targets/azureblobstorage\n\nTo make this generic, we'd need some standard features. \n\nFile Tap/Target needed **Features**\n1. Transport Layer (I think the right term, maybe something else) - How do we get the file, FTP, SFTP, S3, POST(curl), etc etc etc\n1. File Types - CSV, Parquet, JSONL, etc etc\n1. Compression - gzip, zip, 7zip, tar, [gzip ](https://meltano.slack.com/archives/C01PKLU5D1R/p1634570689373600), etc\n1. Encoding's should be handled in some way that makes sense\n\nOther Ideas that could be guiding principles for the design of this\n1. Identity Functionality should work. ie `meltano elt tap-file target-file` should output the same file with no changes (cksum `filein` == chksum `fileout` ) \n2. https://github.com/edgarrmondragon/tap-dbf/pull/1/files from @edgarrmondragon  uses [pyfilesystem2](https://www.pyfilesystem.org/page/index-of-filesystems/) which seems like a nice abstraction layer for all of this. \n    1. URI's for everything  `uri: datalake://{username}:{password}@{storage_name}?tenant_id={tenant_id}`\n3. Example configuration with sensible defaults\n    1. Default to pulling all files from the base directory \n\nQuestions\n1. Does a single `tap-file` make the most sense?\n1. Does a library with helpful functionality make sense instead, and just have everyone implement \n\n\nThis comes up in different ways, and I'd like to collect ideas in one place (I keep posting the same information and maybe it's just a bad idea so let's have one place to hash out the idea :D ) \n1. https://meltano.slack.com/archives/C013EKWA2Q1/p1619166461259200\n1. https://meltano.slack.com/archives/C01PKLU5D1R/p1634567772367800\n1. https://meltano.slack.com/archives/C01V8L0NZC1/p1626475132026300\n1. https://github.com/hotgluexyz/target-csv/issues/6\n1. https://github.com/MeltanoLabs/target-athena/issues/27",
      "state": "closed",
      "created_at": "2021-10-18T15:21:44.083Z",
      "updated_at": "2022-05-29T23:57:21.775Z",
      "closed_at": "2022-05-29T23:57:21.759Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 12,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/242",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/242",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/242/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/242/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#242",
        "relative": "#242",
        "full": "meltano/sdk#242"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 85,
      "epic": {
        "id": 136104,
        "iid": 85,
        "title": "Building and maintaining Singer taps and targets",
        "url": "/groups/meltano/-/epics/85",
        "group_id": 2524164,
        "human_readable_end_date": "Jan 7, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95640317,
      "iid": 243,
      "project_id": 22672923,
      "title": "Replace the term `rows` with `records`",
      "description": "In a few places in the SDK, the term `rows` are used instead of the more standard `records` term. We should change this before - as as part of - the 1.0 release.\n\nExample case uncovered in the diff of !187.",
      "state": "closed",
      "created_at": "2021-10-18T20:41:30.842Z",
      "updated_at": "2022-05-29T23:57:29.327Z",
      "closed_at": "2022-05-29T23:57:29.311Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/243",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 2,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/243",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/243/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/243/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#243",
        "relative": "#243",
        "full": "meltano/sdk#243"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95809505,
      "iid": 247,
      "project_id": 22672923,
      "title": "Setup callback hook for base classes",
      "description": "`Stream`s and `Sink`s often need to do some setup before the EL process. For example, a `Sink` may need to update table schemas in the target database, a `Stream` may need to open a connection, etc. \n\nUsers can put this stuff in constructors but I see a few problems with this:\n\n- the constructors have some complex arguments, and we probably want to discourage users from overriding the base constructor so that we can change the arguments in the future\n- it makes testing a bit complicated, as you can't have an instance of the class without it doing setup\n\nMy proposal is a simple method (`prepare`? `setup`? something to that effect) with a default `pass` implementation that is called before any messages come in/out. Perhaps also a corresponding teardown method for resources that need to be cleaned up like database connections.",
      "state": "closed",
      "created_at": "2021-10-20T16:06:02.371Z",
      "updated_at": "2022-05-29T23:57:57.718Z",
      "closed_at": "2022-05-29T23:57:57.701Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Community-Contributed MR",
        "flow::Doing",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2351599,
        "iid": 209,
        "group_id": 2524164,
        "title": "May 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:38:23.665Z",
        "updated_at": "2021-11-29T21:38:23.665Z",
        "due_date": "2022-05-31",
        "start_date": "2022-05-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/209"
      },
      "assignees": [
        {
          "id": 689351,
          "username": "rabidaudio",
          "public_email": "",
          "name": "Charles Julian Knight",
          "state": "active",
          "locked": false,
          "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
          "web_url": "https://gitlab.com/rabidaudio"
        }
      ],
      "author": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "user_notes_count": 4,
      "merge_requests_count": 1,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/247",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/247",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/247/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/247/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#247",
        "relative": "#247",
        "full": "meltano/sdk#247"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": {
        "id": 56416,
        "iid": 56,
        "sequence": 3,
        "group_id": 2524164,
        "title": null,
        "description": null,
        "state": 3,
        "created_at": "2022-05-13T20:04:48.839Z",
        "updated_at": "2022-05-30T00:05:02.370Z",
        "start_date": "2022-05-23",
        "due_date": "2022-05-29",
        "web_url": "https://gitlab.com/groups/meltano/-/iterations/56416"
      },
      "health_status": null
    },
    {
      "id": 95918987,
      "iid": 250,
      "project_id": 22672923,
      "title": "Update _get_about_info method to return a dataclass or named tuple",
      "description": "The following discussion from !188 should be addressed:\n\n- [ ] @aaronsteers started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/188#note_708495364):  (+1 comment)\n\n    > Perhaps this should be a dataclass or named tuple instead of dict?\n\n> @aaronsteers Indeed! I had this in mind when I created https://gitlab.com/meltano/sdk/-/issues/216. An object with `render_json` and `render_markdown` methods would make for good separation of concerns. Probably worth its own issue.",
      "state": "closed",
      "created_at": "2021-10-21T20:57:59.640Z",
      "updated_at": "2022-05-29T23:58:19.194Z",
      "closed_at": "2022-05-29T23:58:19.178Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/250",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/250",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/250/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/250/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#250",
        "relative": "#250",
        "full": "meltano/sdk#250"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95977860,
      "iid": 252,
      "project_id": 22672923,
      "title": "Include tap-smoke-test as a dev dep in targets",
      "description": "In https://gitlab.com/meltano/tap-smoke-test/-/merge_requests/4 we added support for fetching remote payloads as test content. With that in place it might be nice to include tap-smoke-test as a dev dependency in the target cookiecutter, along with an included sample config using one of the two remote sample dataset hosted on gitlab (i.e. `https://gitlab.com/meltano/tap-smoke-test/-/raw/main/demo-data/animals-data.jsonl`).\n\nWould give folks an easy way to throw some test data at targets they're developing.\n\n/cc @aaronsteers",
      "state": "closed",
      "created_at": "2021-10-22T16:14:22.122Z",
      "updated_at": "2022-05-29T23:58:34.689Z",
      "closed_at": "2022-05-29T23:58:34.664Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/252",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/252",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/252/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/252/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#252",
        "relative": "#252",
        "full": "meltano/sdk#252"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95981855,
      "iid": 253,
      "project_id": 22672923,
      "title": "Add `meltano_sdk: true` to --about",
      "description": "When taps are built with the SDK, we should have a flag to match what's expected by MeltanoHub",
      "state": "closed",
      "created_at": "2021-10-22T17:55:36.777Z",
      "updated_at": "2022-05-29T23:58:42.446Z",
      "closed_at": "2022-05-29T23:58:42.425Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/253",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/253",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/253/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/253/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#253",
        "relative": "#253",
        "full": "meltano/sdk#253"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 127,
      "epic": {
        "id": 372915,
        "iid": 127,
        "title": "Generate YAML for MeltanoHub",
        "url": "/groups/meltano/-/epics/127",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95981921,
      "iid": 254,
      "project_id": 22672923,
      "title": "Either add a new command or an addition `format` for structuring data for the Hub",
      "description": "I don't have strong opinions about what would be the best here, but either having an option so that users can output a YAML file for the Hub a la `--about --format=hub`, or if having a separate command `--publish` would work.\n\nGoal is to output a YAML file similar to https://gitlab.com/meltano/hub/-/blob/main/_data/taps/3plcentral.yml for a given connector.\n\nOf importance is the need for the `variants` key and structure so that's it's easy to either add as a variant or submit the whole defition.\n\n* file would be the tap name with `tap-`\n* YAML",
      "state": "closed",
      "created_at": "2021-10-22T17:58:56.667Z",
      "updated_at": "2022-05-29T23:58:50.132Z",
      "closed_at": "2022-05-29T23:58:50.105Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/254",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/254",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/254/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/254/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#254",
        "relative": "#254",
        "full": "meltano/sdk#254"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 127,
      "epic": {
        "id": 372915,
        "iid": 127,
        "title": "Generate YAML for MeltanoHub",
        "url": "/groups/meltano/-/epics/127",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 95982632,
      "iid": 255,
      "project_id": 22672923,
      "title": "Have CTA or template for adding metadata about the tap",
      "description": "We probably don't want to do this during the cookiecutter part of the SDK, but as part of the #TODO checklist it'd be good to prompt users to update a YAML file and png for their connector. \n\nWe could have a template yml and png file that are built by the cookiecutter and fill it out based on what we know. Then using https://gitlab.com/meltano/sdk/-/issues/254 users could update it in place. Then for submission to the Hub they could update it further. If everything lived in their repo, perhaps under a `.singer` directory, we could just pull that info for the hub with only a simple MR for them to update.",
      "state": "closed",
      "created_at": "2021-10-22T18:14:39.407Z",
      "updated_at": "2022-05-29T23:58:57.815Z",
      "closed_at": "2022-05-29T23:58:57.766Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Hub"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/255",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/255",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/255/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/255/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#255",
        "relative": "#255",
        "full": "meltano/sdk#255"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 127,
      "epic": {
        "id": 372915,
        "iid": 127,
        "title": "Generate YAML for MeltanoHub",
        "url": "/groups/meltano/-/epics/127",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 96108601,
      "iid": 258,
      "project_id": 22672923,
      "title": "Add Snowplow event tracking to SDK",
      "description": "Add Snowplow tracking to initially track:\n\n* Invocations\n* Command line flags (--about, --discover, --format, --help, --config, --catalog, etc.)\n\nWe want basically all of the requirements from https://gitlab.com/meltano/sdk/-/issues/141#note_602040376 :\n\n* Opt-in \n* Default to Meltano collector, but completely configurable for the end user\n* Update documentation to indicate it's obvious where the data goes and what we're doing with it (back to the Hub)\n\n@aaronsteers any concerns around this?",
      "state": "closed",
      "created_at": "2021-10-25T19:31:19.381Z",
      "updated_at": "2022-05-29T23:59:12.985Z",
      "closed_at": "2022-05-29T23:59:12.958Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "flow::Triage",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/258",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/258",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/258/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/258/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#258",
        "relative": "#258",
        "full": "meltano/sdk#258"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 122,
      "epic": {
        "id": 337730,
        "iid": 122,
        "title": "Enhance Telemetry across Meltano, SDK, and Hub",
        "url": "/groups/meltano/-/epics/122",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 96154708,
      "iid": 259,
      "project_id": 22672923,
      "title": "Add standardized test approach to evaluate stream output against expectations",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\n\nThis request covers the ability to write integration tests at the stream level for taps. Example tests a developer may want to create are:\n\n- Stream returns at least one record.\n- All discovered stream schema keys are available in the returned records.\n- All live record schema keys are recorded in the discovered stream.\n- All primary keys in Stream A also exist in Stream B, Column X.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nAn endorsed approach to testing streams will allow developers to easily implement test-driven development practices as well as increase the quality of taps overall. \n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nI recently added some testing to `tap-slack` that might be worth refining/abstracting for the SDK. The approach was this:\n\n1. In a Pytest fixture, perform a full tap sync with the sample config.\n1. Read stdout and parse the records into an array. Then group the records by TYPE and STREAM.\n1. Create a generic set of tests that can be applied on a stream basis: at least one record returned, catalog schema keys are in the record schema and vice versa.\n1. Apply the generic tests for each stream, passing in the parsed full sync results.\n\nThis approach allowed me to catch several schema mismatches and a few critical issues related to the state partitioning keys mentioned above.\n\nhttps://github.com/MeltanoLabs/tap-slack/blob/7892c39667f7817e426ee025d2c52622568c38d6/tests/test_streams.py#L27\n\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nI don't think adding a feature like this would negatively affect existing taps, as the tests could be added \"a la carte\" by developers. However, I do think there is a risk in adding a test suite that is prone to taking up a long time or prone to error. For example, the approach outlined above works when there is a very small data volume but would not work on large taps. So finding ways to control execution time in particular is very important.",
      "state": "closed",
      "created_at": "2021-10-26T10:45:25.958Z",
      "updated_at": "2022-05-29T23:59:20.883Z",
      "closed_at": "2022-05-29T23:59:20.865Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Community-Contributed MR",
        "flow::Review",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2351599,
        "iid": 209,
        "group_id": 2524164,
        "title": "May 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:38:23.665Z",
        "updated_at": "2021-11-29T21:38:23.665Z",
        "due_date": "2022-05-31",
        "start_date": "2022-05-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/209"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 2726950,
        "username": "stkbailey",
        "public_email": "",
        "name": "Stephen Bailey",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/3004f9b58409049fc7c8a289867d9ce0fd37b6781e7a9933a38c86a83a75e3ba?s=80&d=identicon",
        "web_url": "https://gitlab.com/stkbailey"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/259",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/259",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/259/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/259/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#259",
        "relative": "#259",
        "full": "meltano/sdk#259"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": {
        "id": 56416,
        "iid": 56,
        "sequence": 3,
        "group_id": 2524164,
        "title": null,
        "description": null,
        "state": 3,
        "created_at": "2022-05-13T20:04:48.839Z",
        "updated_at": "2022-05-30T00:05:02.370Z",
        "start_date": "2022-05-23",
        "due_date": "2022-05-29",
        "web_url": "https://gitlab.com/groups/meltano/-/iterations/56416"
      },
      "health_status": null
    },
    {
      "id": 96204404,
      "iid": 260,
      "project_id": 22672923,
      "title": "About include SDK configuration options",
      "description": "There's a number of baked in configuration options. It'd be great if `--about` could include them.\n\nHere's a few I can think of\n- stream_maps\n- user_agent",
      "state": "closed",
      "created_at": "2021-10-26T23:57:16.830Z",
      "updated_at": "2022-05-29T23:59:28.499Z",
      "closed_at": "2022-05-29T23:59:28.479Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 12,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/260",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/260",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/260/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/260/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#260",
        "relative": "#260",
        "full": "meltano/sdk#260"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 96544289,
      "iid": 262,
      "project_id": 22672923,
      "title": "Epoch values should be considered valid timestamps",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\n\nFrom what I can tell, the SDK cannot currently parse epoch-encoded timestamps and instead pushes them through the `handle_invalid_timestamp` logic. This is because the timestamp parsing is done using the `dateutil.parser.parse` functionality. Example below:\n\n```\nfrom dateutil import parser\n\nts = 1634606164.000200\nparser.parse(ts)\n\n>>> ERROR: dateutil.parser._parser.ParserError: year 1634606164 is out of range: 1634606164.000200\n```\n\nHowever, if we use `datetime.datetime.fromtimestamp`, the value is parsed successfully.\n\n```\nfrom datetime import datetime\ndatetime.fromtimestamp(ts)\n\n>>> datetime.datetime(2021, 10, 18, 21, 16, 4, 200)\n```\n\nIn this scenario, I would like to be able to use `ts` as a date-time formatted replication key column, but the strategy for doing so is not entirely clear to me.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nEnabling epoch parsing would allow more timestamp data to be treated in a \"standard\" way. \n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nI would like to see the SDK handle this case easily, to reduce friction when developing against this type of data.\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nIt is not entirely clear to me whether handling the data as a timestamp is the best way to approach this problem. Should we add a new \"format\" -- `date_epoch`? The major issue I could see is that, if an epoch timestamp is used as the replication key (e.g.), it would need to remain unconverted when being pushed to the external system. (The SDK shouldn't convert epoch -> date_iso8601, and then send that timestamp in the request.)",
      "state": "closed",
      "created_at": "2021-11-02T00:33:39.911Z",
      "updated_at": "2022-05-29T23:59:44.344Z",
      "closed_at": "2022-05-29T23:59:44.330Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 2726950,
        "username": "stkbailey",
        "public_email": "",
        "name": "Stephen Bailey",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/3004f9b58409049fc7c8a289867d9ce0fd37b6781e7a9933a38c86a83a75e3ba?s=80&d=identicon",
        "web_url": "https://gitlab.com/stkbailey"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/262",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/262",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/262/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/262/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#262",
        "relative": "#262",
        "full": "meltano/sdk#262"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 96678170,
      "iid": 265,
      "project_id": 22672923,
      "title": "path \"context\" injection injected secrets from environment",
      "description": "I'll have to setup a reproducible example but wanted to get this out there as I saw it last week\n\n1. In a Stream set your path to something like `path = \"/customer/{client_id}/list\"` \n    * I'm using Parent / Child Streams, and sending `client_id` in the child context\n1. In `config.json` set an environment to `client_id` I also needed `client_id` set as an environment variable\n1. If `client_id` in the child context is null, you'll get the `client_id` from the environment variable set\n\nI didn't dive to far into https://gitlab.com/meltano/sdk/-/blob/main/singer_sdk/helpers/jsonpath.py#L9 to find out what was going on",
      "state": "closed",
      "created_at": "2021-11-03T16:47:40.345Z",
      "updated_at": "2022-05-30T00:00:07.232Z",
      "closed_at": "2022-05-30T00:00:07.103Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/265",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/265",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/265/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/265/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#265",
        "relative": "#265",
        "full": "meltano/sdk#265"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 96,
      "epic": {
        "id": 240357,
        "iid": 96,
        "title": "SDK Development (Parent Epic)",
        "url": "/groups/meltano/-/epics/96",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 97582619,
      "iid": 273,
      "project_id": 22672923,
      "title": "Merging parent context with partitions",
      "description": "I have a use case with tap-clickup where a stream has a parameter that we need to call for `archived` where we need to call (and paginate) `archived=true` and `archived=false`. This stream is also a Child stream that needs the parents ID.\n\nThis line of code shows where using both contexts and partitions together doesn't work https://gitlab.com/meltano/sdk/-/blob/v0.4.6/singer_sdk/streams/core.py#L934\n\n\nWe could merge these two together like I did here https://github.com/AutoIDM/tap-clickup/blob/main/tap_clickup/client.py#L126 and https://github.com/AutoIDM/tap-clickup/blob/main/tap_clickup/client.py#L114 . The problem with this implementation is my state gets messed up when it comes to incremental streams.",
      "state": "closed",
      "created_at": "2021-11-18T21:08:22.972Z",
      "updated_at": "2022-05-30T00:01:08.440Z",
      "closed_at": "2022-05-30T00:01:08.423Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 5,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/273",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 2,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/273",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/273/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/273/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#273",
        "relative": "#273",
        "full": "meltano/sdk#273"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 97582744,
      "iid": 274,
      "project_id": 22672923,
      "title": "Follow-up from \"Add sample GitHub CI file to tap Cookiecutter template\"",
      "description": "IMPORTANT: Gitlab creates this issue by using the text of the _first_ comment in the thread. In many cases the _last_ comment is actually indicative of the next action. So, for proper context, you may need to click through to the individual threads.\n\nThe following discussions from !202 should be addressed:\n\n- [x] @pnadolny13 started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_729675107):  (+1 comment)\n\n    > @aaronsteers this is awesome! I know we have a [tox file](https://gitlab.com/meltano/sdk/-/blob/main/cookiecutter/tap-template/%7B%7Bcookiecutter.tap_id%7D%7D/tox.ini) as part of the cookiecutter, what about just executing that directly vs calling each test individually? I like the idea that if I can run tox locally then those tests should pass in CI but if theyre split out theres a risk of the CI file and tox file getting out of sync. I know theres some value in breaking each test up so its more DAG-like but it seems harder to maintain that way. Is there more value that we get from splitting then out that I missing?\n\n- [ ] @edgarrmondragon started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_729808872):  (+2 comments)\n\n    > @aaronsteers Just occurred to me: if we're gonna add GitHub-specific files, wdyt about opt-in shipping a `dependabot.yml` like in [`tap-stackexchange`](https://github.com/MeltanoLabs/tap-stackexchange/blob/main/.github/dependabot.yml). That would help with keeping the SDK and other dependencies up-to-date.\n\n- [ ] @pnadolny13 started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_735072785): \n\n    > I think isort might be missing from the toml file of the cookiecutter templates.\n\n- [ ] @pnadolny13 started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_735072786): \n\n    > I'm pretty new to mypy still but I had to include ` --ignore-missing-imports` here in order to get it to pass. That might not be recommended but wanted to call it out.\n\n- [x] @pnadolny13 started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_735072791):  (+2 comments)\n\n    > Did we want to call `poetry run tox -e pytest` here instead of pytest directly?",
      "state": "closed",
      "created_at": "2021-11-18T21:13:37.175Z",
      "updated_at": "2022-05-30T00:01:16.245Z",
      "closed_at": "2022-05-30T00:01:16.226Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Needs Refinement",
        "flow::Triage",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/274",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 5,
        "completed_count": 2
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/274",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/274/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/274/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#274",
        "relative": "#274",
        "full": "meltano/sdk#274"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 97582777,
      "iid": 275,
      "project_id": 22672923,
      "title": "Partition Documentation hard to understand without an example",
      "description": "https://sdk.meltano.com/en/latest/partitioning.html?highlight=partition#if-you-do-want-to-utilize-partitioning\n\nI had a really hard time understanding how Partitions worked with state. Specifically :\n1. Understanding that each partition has it's own state tied to it was confusing for me.  I think an example would be very helpful.\n1. I didn't understand what the list of dicts in the example actually did. I didn't realize that each item in the list was passed as a context to the record itself. \n1. I got the \"lightbulb\" moment after making a list of 5 dicts and running a connector printing what the current context/partition state was",
      "state": "closed",
      "created_at": "2021-11-18T21:14:30.902Z",
      "updated_at": "2022-05-30T00:01:24.471Z",
      "closed_at": "2022-05-30T00:01:24.400Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/275",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/275",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/275/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/275/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#275",
        "relative": "#275",
        "full": "meltano/sdk#275"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 81,
      "epic": {
        "id": 94267,
        "iid": 81,
        "title": "Meltano Documentation improvements",
        "url": "/groups/meltano/-/epics/81",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    }
  ]
}
