{
  "cookies": {
    "_cfuvid": "nh3hGKBDi7Bn.9YYg9HesMPAj0I_OurbHgGe66r_h3w-1747940872388-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:52.319754+00:00",
  "elapsed": 0.522118,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e9952188060af-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:52 GMT",
    "ETag": "W/\"c3af863f6e7d0f84fdd7f55780bb258a\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=2&per_page=20>; rel=\"next\", <https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=3&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=nh3hGKBDi7Bn.9YYg9HesMPAj0I_OurbHgGe66r_h3w-1747940872388-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-06-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-d",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"2666dba086793cbe794fccdbdb0dee45\",\"version\":\"1\"}",
    "x-next-page": "2",
    "x-page": "1",
    "x-per-page": "20",
    "x-prev-page": "",
    "x-request-id": "2666dba086793cbe794fccdbdb0dee45",
    "x-runtime": "0.290431",
    "x-total": "45",
    "x-total-pages": "3"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/95/issues"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/95/issues",
  "_decoded_content": [
    {
      "id": 108159119,
      "iid": 379,
      "project_id": 22672923,
      "title": "About shouldnt fail if tap isnt configured",
      "description": "This might be an implementation problem but I saw it twice today that running `--about` without a configured tap causes it to fail. I wonder if theres a way for the SDK to print without actually executing the taps discovery. Or try to execute the tap discovery catch it and return nothing not streams if its not configured.\n\nMy use case is to check the taps capabilities and settings without actually configuring it.\n\nhttps://github.com/MeltanoLabs/tap-google-analytics/issues/34\n\nhttps://github.com/Widen/tap-rest-api-msdk/issues/20",
      "state": "closed",
      "created_at": "2022-05-06T17:22:57.606Z",
      "updated_at": "2022-05-17T00:46:29.814Z",
      "closed_at": "2022-05-17T00:46:29.652Z",
      "closed_by": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 1,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/379",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/379",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/379/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/379/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#379",
        "relative": "#379",
        "full": "meltano/sdk#379"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1346107,
      "relative_position": -26163
    },
    {
      "id": 108047104,
      "iid": 375,
      "project_id": 22672923,
      "title": "Default capabilities for meltano.yml target cookiecutter update",
      "description": "https://gitlab.com/meltano/sdk/-/blob/main/cookiecutter/target-template/%7B%7Bcookiecutter.target_id%7D%7D/meltano.yml#L11-13\n\nMaybe just list about? Not clear to me what should be there other than what's currently there can't work.",
      "state": "closed",
      "created_at": "2022-05-05T05:35:21.169Z",
      "updated_at": "2022-05-30T00:14:13.414Z",
      "closed_at": "2022-05-30T00:14:13.395Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/375",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/375",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/375/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/375/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#375",
        "relative": "#375",
        "full": "meltano/sdk#375"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1343205,
      "relative_position": -25650
    },
    {
      "id": 105161489,
      "iid": 350,
      "project_id": 22672923,
      "title": "Add \"cost\" hook in tap base",
      "description": "## Summary\nAs a user of a tap, I would like to know how much API \"cost\" was caused by a tap run.\nFor instance, the github API has per-hour usage limits, where 1 REST API call costs 1, or a graphql API call has a cost that depends on the number of nodes returned.\nOther APIs might charge per call.\n\nAt the end of a tap run, I would like to know how much of the resource the tap consumed.\n\n## Proposed benefits\n\nWith `tap-github` running in production, we have found it hard to track the reasons behind sudden surges in \"quota exceeded\" errors. Being able to identify which runs use what would help in understanding the cause of such issues.\n\nFor billable APIs/resources, such a feature could also help track actual dollar costs.\n\nMaking these values retrievable would allow tracking them in monitoring systems, etc...\n\n\n## Proposal details\nAs it's not really possible to define how this cost is calculated at the SDK level, it would be great if the SDK provided some method that a tap could overload to calculate and accumulate said cost, something like:\n\n```python\nclass Tap:\n    def calculate_request_cost(self, request, response) -> Integer:\n        # return whatever cost we want to track in arbitrary units\n```\nThis could be called by the SDK after each request returns (as the cost might depend on the content of the response). The SDK would simply keep a sum of all these results, and at the end of the run, the tap would at a minimum log a line like:\n```\nTotal cost for this run: NNN\n```\nor possibly export this value in the state as another metric?\n\nAgain, the final method could simply be a no-op by default that each tap can override to implement appropriate behaviour.\n\n## Best reasons not to build\nBy default, these methods can simply do a `pass`, and therefore have only negligible performance impact. There is no behaviour change related to this, unless the result is exported in state, which might cause issues downstream depending on the target used.",
      "state": "closed",
      "created_at": "2022-03-20T17:19:25.635Z",
      "updated_at": "2022-05-30T00:11:09.191Z",
      "closed_at": "2022-05-30T00:11:09.166Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 75577,
        "username": "LaurentS",
        "public_email": "",
        "name": "Laurent Sava\u00ebte",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/ac898ad4d1975ac4678873c142f8ed88161383546137af50ad4f58fdc678c798?s=80&d=identicon",
        "web_url": "https://gitlab.com/LaurentS"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/350",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/350",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/350/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/350/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#350",
        "relative": "#350",
        "full": "meltano/sdk#350"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1196690,
      "relative_position": -24111
    },
    {
      "id": 104934027,
      "iid": 349,
      "project_id": 22672923,
      "title": "As a user, I need to encrypt and hide fields, or encrypt but not hide fields",
      "description": "## Summary\nAdd a property to plugin settings configuration called 'hidden' and deprecate kind=hidden\n\n## Proposed benefits\nOnce available, deployments of the taps/targets/other plugins will be able to hide settings from users and store them securely when necessary.\n\n\n## Proposal details\n\nWhen building a dynamic UI on top of the plugin settings, we've found that kind=hidden is incompatible with kind=password\n\nAs a example, kind=password means the setting is stored encrypted.\nWhereas, kind=hidden only means that the setting should not be displayed.\n\nThe following permutations are necessary:\n- encrypted + hidden\n- plain txt + hidden\n- encrypted + not hidden (visible)\n- plain txt + not hidden (visible)\n\n\n### `hidden` Setting Field\nThe `hidden` setting field should define the conditions under which the setting is visible for configuration by the user.\n\n- If **not present**, the setting should be considered **not hidden** implicitly  (i.e. visible for configuration)\n- If **present** with a value of **`true`**, the setting should be hidden from the user\n- If **present** with a value of **`false`**, the setting should be shown to the user (optional)\n\n## Example\n\n### `oauth_credentials.access_token` Setting\nConfiguration for an `oauth_credentials.access_token` setting should be both hidden from the user, and stored encrypted.\n\nIn this case we need\n- kind: password\n- hidden: true\n\n\n### `oauth_credentials.scope` Setting\nConfiguration for an `oauth_credentials.scope` setting is not sensitive, but does not need to be shown to the user for configuration.\n\nIn this case we need\n- kind: string\n- hidden: true\n\n\n### `tap-googleads` Example\n```yml\nextractors:\n  - name: tap-googleads\n    namespace: tap_googleads\n    label: Google Ads\n    image_url: /assets/images/datasource/tap-googleads.svg\n    description: |-\n        App and website ads platform hosted by Google.\n    docs: ${docsBaseUrl}/data-sources/tap-googleads/\n    repo: https://github.com/Matatika/tap-googleads\n    pip_url: git+https://github.com/Matatika/tap-googleads@v0.3.0\n    capabilities:\n      - catalog\n      - discover\n      - state\n    settings:\n      - name: oauth_credentials.authorization_url\n        kind: hidden\n        label: OAuth identity provider authorization endpoint used create and refresh tokens\n        value: https://oauth2.googleapis.com/token\n      - name: oauth_credentials.scope\n        kind: hidden\n        label: OAuth scopes we need to request access to\n        value: https://www.googleapis.com/auth/adwords\n      - name: oauth_credentials.access_token\n        kind: hidden\n        label: Access Token\n      - name: oauth_credentials.refresh_token\n        kind: hidden\n        label: OAuth Refresh Token\n      - name: oauth_credentials.refresh_proxy_url\n        kind: hidden\n        label: Will be called with 'oauth_credentials.refresh_token' to refresh the access token\n        required: false\n      - name: oauth_credentials.refresh_proxy_url_auth\n        kind: hidden\n        label: Sets Authorization header on 'oauth_credentials.refresh_url' request\n        required: false\n      - name: oauth_credentials.client_id\n        kind: hidden\n        label: OAuth Client ID\n        required: false\n      - name: oauth_credentials.client_secret\n        kind: hidden\n        label: OAuth Client Secret\n        required: false\n      - name: start_date\n        kind: date_iso8601\n        label: Start Date\n        required: false\n      - name: end_date\n        kind: date_iso8601\n        label: End Date\n        required: false\n      - name: developer_token\n        kind: hidden\n        value: some_value\n        label: Developer Token\n      - name: customer_id\n        label: Customer Id\n```\n\n\n## Best reasons not to build\nDeprecation proposed in this feature will eventually mean a migration for users of kind=hidden",
      "state": "closed",
      "created_at": "2022-03-16T15:32:32.334Z",
      "updated_at": "2022-05-30T00:11:01.393Z",
      "closed_at": "2022-05-30T00:11:01.373Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5997370,
        "username": "aphethean",
        "public_email": "",
        "name": "Aaron Phethean",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/48ce380aaf5b7383a2ac09d0846a47ef275180f1cc025b5336034a479564e227?s=80&d=identicon",
        "web_url": "https://gitlab.com/aphethean"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/349",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/349",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/349/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/349/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#349",
        "relative": "#349",
        "full": "meltano/sdk#349"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1196709,
      "relative_position": -25137
    },
    {
      "id": 104932410,
      "iid": 348,
      "project_id": 22672923,
      "title": "As a user, I need validation for required fields",
      "description": "## Summary\nAdd a property to plugin settings configuration called 'required'\n\n## Proposed benefits\nOnce available, deployments of the taps/targets/other plugins will be able to validate required settings.\n\n\n## Proposal details\n\n### `required` Setting Field\nThe `required` setting field should define the conditions under which the setting is required.\n\n- If **not present**, the setting should be considered **always required** implicitly\n- If **present** with a value of **`true`**, the setting should be considered **always required**\n- If **present** with a value of **`false`**, the setting should be considered **never required** (optional)\n- If **present** with a value conforming to a **[SpEL](https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html) expression**, the setting should be considered **required** if the expression evaluates to `true` and **not required** if the expression evaluates to `false`\n\n## Example\n\n### `credential_type` Setting\nSpecifiying a `credential_type` setting should define options for use in `required_when` expression.\n\n### `tap-google-analytics` Example\n```yml\nextractors:\n  - name: tap-google-analytics\n    label: Google Analytics\n    description: App and website analytics platform hosted by Google\n    namespace: tap_google_analytics\n    variant: meltano\n    docs: \"https://hub.meltano.com/extractors/google-analytics.html\"\n    repo: https://gitlab.com/meltano/tap-google-analytics\n    pip_url: \"git+https://gitlab.com/meltano/tap-google-analytics.git\"\n    capabilities:\n      - catalog\n      - discover\n    settings:\n      - name: credential_type # required when using 'credentials_file' credential_type\n        kind: options\n        options:\n          - label: OAuth\n            value: oauth\n          - label: Credentials File\n            value: credentials_file\n      - name: key_file_location # required when using 'credentials_file' credential_type\n        env_aliases: [GOOGLE_ANALYTICS_API_CLIENT_SECRETS]\n        kind: file\n        value: $MELTANO_PROJECT_ROOT/client_secrets.json\n        label: Client Secrets\n        placeholder: Ex. client_secrets.json\n        required_when: credential_type == 'credentials_file'\n      - name: oauth_credentials.client_id # required when using 'oauth' credential_type\n        env_aliases: [GOOGLE_ANALYTICS_API_OAUTH_CLIENT_ID]\n        kind: password\n        label: OAuth Client ID\n        required_when: credential_type == 'oauth'\n      - name: oauth_credentials.client_secret # required when using 'oauth' credential_type\n        env_aliases: [GOOGLE_ANALYTICS_API_OAUTH_CLIENT_SECRET]\n        kind: password\n        label: OAuth Client Secret\n        required_when: credential_type == 'oauth'\n      - name: oauth_credentials.access_token # required when using 'oauth' credential_type\n        env_aliases: [GOOGLE_ANALYTICS_API_OAUTH_ACCESS_TOKEN]\n        kind: password\n        label: OAuth Access Token\n        required_when: credential_type == 'oauth'\n      - name: oauth_credentials.refresh_token # required when using 'oauth' credential_type\n        env_aliases: [GOOGLE_ANALYTICS_API_OAUTH_REFRESH_TOKEN]\n        kind: password\n        label: OAuth Refresh Token\n        required_when: credential_type == 'oauth'\n      - name: view_id # always required\n        env_aliases: [GOOGLE_ANALYTICS_API_VIEW_ID]\n        label: View ID\n        placeholder: Ex. 198343027\n        required_when: true\n      - name: reports # not required (optional)\n        env_aliases: [GOOGLE_ANALYTICS_API_REPORTS]\n        label: Reports\n        placeholder: Ex. my_report_definition.json\n      - name: start_date # always required\n        env_aliases: [GOOGLE_ANALYTICS_API_START_DATE]\n        kind: date_iso8601\n        description: This property determines how much historical data will be extracted. Please be aware that the larger the time period and amount of data, the longer the initial extraction can be expected to take.\n        required_when: true\n      - name: end_date # not required (optional)\n        env_aliases: [GOOGLE_ANALYTICS_API_END_DATE]\n        kind: date_iso8601\n        description: Date up to when historical data will be extracted.\n```\n\n\n## Best reasons not to build\nThis feature will improve upon, and deprecate the settings group validation from discovery.yaml use.",
      "state": "closed",
      "created_at": "2022-03-16T15:16:21.469Z",
      "updated_at": "2022-05-30T00:10:53.549Z",
      "closed_at": "2022-05-30T00:10:53.531Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5997370,
        "username": "aphethean",
        "public_email": "",
        "name": "Aaron Phethean",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/48ce380aaf5b7383a2ac09d0846a47ef275180f1cc025b5336034a479564e227?s=80&d=identicon",
        "web_url": "https://gitlab.com/aphethean"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/348",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/348",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/348/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/348/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#348",
        "relative": "#348",
        "full": "meltano/sdk#348"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1196703,
      "relative_position": -24624
    },
    {
      "id": 102396191,
      "iid": 328,
      "project_id": 22672923,
      "title": "Make it easier to run arbitrary decorated requests in REST tap",
      "description": "Currently, if I want to make a request using the retry/backoff logic I've defined for the regular requests in a REST tap, I have to do something like this each time:\n\n```\n        decorated_request = self.request_decorator(self._request)\n        prepared_request = cast(\n            requests.PreparedRequest,\n            self.requests_session.prepare_request(\n                requests.Request(\n                    method=\"post\",\n                    url=self.url_base + \"/api/views\",\n                    headers=headers,\n                    json=payload,\n                ),\n            ),\n        )\n        resp = decorated_request(prepared_request, None)\n```\n\nThis happened while working on tap-gorgias here: https://github.com/brooklyn-data/tap-gorgias/pull/1/files\n\nFinding a way to make this less verbose would be great. I wonder if it can be tackled as part of https://gitlab.com/meltano/sdk/-/issues/319.",
      "state": "closed",
      "created_at": "2022-02-14T10:02:04.932Z",
      "updated_at": "2022-05-30T00:08:20.146Z",
      "closed_at": "2022-05-30T00:08:20.125Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 2585766,
        "username": "NiallRees",
        "public_email": "",
        "name": "Niall",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/2585766/avatar.png",
        "web_url": "https://gitlab.com/NiallRees"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/328",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/328",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/328/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/328/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#328",
        "relative": "#328",
        "full": "meltano/sdk#328"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1119417,
      "relative_position": -23598
    },
    {
      "id": 101857087,
      "iid": 324,
      "project_id": 22672923,
      "title": "Define additionalProperties in stream maps config",
      "description": "The following discussion from !236 should be addressed:\n\n- [ ] @edgarrmondragon started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/236#note_814339424):  (+3 comments)\n\n    > @aaronsteers Wdyt about defining `additionalProperties` here so the expected _value_ types are validated?\n    > \n    > For example: https://github.com/MeltanoLabs/meltano-map-transform/blob/fc779f8664e4d9255f6c5d8a5ee1321f84f3f014/meltano_map_transform/mapper.py",
      "state": "closed",
      "created_at": "2022-02-04T00:02:31.949Z",
      "updated_at": "2022-05-30T00:07:50.395Z",
      "closed_at": "2022-05-30T00:07:50.372Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/324",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/324",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/324/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/324/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#324",
        "relative": "#324",
        "full": "meltano/sdk#324"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1098306,
      "relative_position": -23085
    },
    {
      "id": 101497131,
      "iid": 320,
      "project_id": 22672923,
      "title": "Support arbitrary key-value pairs in metadata",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\n\nAccording to the [singer metadata spec](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#metadata):\n\n> A tap is free to write ANY type of metadata they feel is useful for describing fields in the schema, although several reserved keywords exist.\n\nHowever, our `dataclass` implementation prevents the addition of arbitrary fields to the metadata by the tap developer. So, something like this is not possible:\n\n```json\n{\n  \"metadata\" : {\n    \"selected\" : true,\n    \"some-other-metadata\" : \"whatever\"\n  },\n  \"breadcrumb\" : [\"properties\", \"some-field-name\"]\n}\n```\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nTaps can emit informational metadata. This tags can be later leveraged by data catalogs and orchestrators (https://gitlab.com/meltano/meltano/-/issues/2611+).\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nAs suggested above, tap devs interested in adding key-value pairs to their metadata objects would have to subclass `_singer.Metadata` etc. This is complicated by the use those of classes in `Tap` and `Stream`.\n\nTo avoid that, we could easily add a `tags` property that tap developers can fill-in with relevant metadata:\n\n```json\n{\n  \"metadata\" : {\n    \"selected\" : true,\n    \"tags\": {\n      \"some-other-metadata\" : \"whatever\"\n    }\n  },\n  \"breadcrumb\" : [\"properties\", \"some-field-name\"]\n}\n```\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nThere may be better ways to support the addition of extra metadata fields.",
      "state": "closed",
      "created_at": "2022-01-29T03:25:39.496Z",
      "updated_at": "2022-05-30T00:07:19.806Z",
      "closed_at": "2022-05-30T00:07:19.781Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/320",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/320",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/320/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/320/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#320",
        "relative": "#320",
        "full": "meltano/sdk#320"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1085366,
      "relative_position": -22059
    },
    {
      "id": 101495823,
      "iid": 318,
      "project_id": 22672923,
      "title": "Add reference paginator implementations",
      "description": "## Summary\n\n[//]: # (Concisely summarize the feature you are proposing.)\n\nAdd reference and common pagination implementations in a similar fashion to _authenticators_.\n\n## Proposed benefits\n\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nThere is a limited number of pagination standards, which may only differ in minute details, much like authentication headers (`Authorization: Bearer <token>`, `Authorization: Token <>`), so having a sensible set of pre-built implementations may simplify things further for users by allowing them to pick one off-the-shelf.\n\nAnother benefit is that having dedicated pagination classes makes unit-testing them much easier.\n\nYet another benefit of moving to a dedicated class for pagination, is that the paginator state doesn't need to be limited to the previous value but can include arbitrary attributes, like the last-seen record (https://gitlab.com/meltano/sdk/-/issues/124+).\n\n## Proposal details\n\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nI have a reference implementation [here](https://github.com/edgarrmondragon/tap-readthedocs/pull/13/files).\n\n**TL;DR**\n\n```python\nclass APIPaginator:\n    \"\"\"An API paginator object.\"\"\"\n\n    @property\n    def current_value(self) -> TPageToken:\n        \"\"\"Get the current pagination value.\"\"\"\n        ...\n\n    @property\n    def finished(self) -> bool:\n        \"\"\"Get a flag that indicates if the last page of data has been reached.\"\"\"\n        ...\n\n    @property\n    def count(self) -> int:\n        \"\"\"Count the number of pages traversed so far.\"\"\"\n        ...\n\n    def advance(self, response: Response) -> None:\n        \"\"\"Get a new page value and advance the current one.\"\"\"\n        ...\n\n    def has_more(self, response: Response) -> bool:\n        \"\"\"Override this method to check if the endpoint has any pages left.\"\"\"\n        ...\n\n    @abstractmethod\n    def get_next(self, response: Response) -> Optional[TPageToken]:\n        \"\"\"Get the next pagination token or index from the API response.\"\"\"\n        ...\n```\n\n## Best reasons not to build\n\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nCan't think of any. The current `RESTStream.get_next_page_token` can be slowly deprecated with the introduction of a paginator that wraps the stream (as in [tap-readthedocs/client.py at 09dca8c653cd73e51ce265e239c94c68479481b1 \u00b7 edgarrmondragon/tap-readthedocs \u00b7 GitHub](https://github.com/edgarrmondragon/tap-readthedocs/blob/09dca8c653cd73e51ce265e239c94c68479481b1/tap_readthedocs/client.py#L17-L48)).",
      "state": "closed",
      "created_at": "2022-01-29T01:34:13.117Z",
      "updated_at": "2022-05-30T00:07:04.464Z",
      "closed_at": "2022-05-30T00:07:04.445Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Architecture Decision",
        "kind::Tech Debt",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/318",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/318",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/318/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/318/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#318",
        "relative": "#318",
        "full": "meltano/sdk#318"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1085372,
      "relative_position": -22572
    },
    {
      "id": 101492605,
      "iid": 317,
      "project_id": 22672923,
      "title": "Make it easier to fix data types to conform to a stream's schema",
      "description": "In an effort to keep streams DRY, I frequently use:\n\n```\nclass MyStream(BaseStream):\n    schema = th.PropertiesList(\n        th.Property(\"field1\", th.IntegerType),\n        th.Property(\"field2\", th.NumberType),\n        th.Property(\"field3\", th.IntegerType),\n        th.Property(\"field4\", th.IntegerType),\n        th.Property(\"field5\", th.IntegerType),\n        th.Property(\"field6\", th.DateTimeType),\n        th.Property(\"field7\", th.IntegerType),\n        th.Property(\"field8\", th.IntegerType),\n        th.Property(\"field9\", th.IntegerType),\n        th.Property(\"field10\", th.IntegerType)\n    )\n\n    schema_values = {k: v[\"type\"][0] for k, v in schema[\"properties\"].items()}\n\n    def post_process(self, row: dict, context: Optional[dict] = None) -> dict:\n        \"\"\"Fix the data types.\"\"\"\n\n        # Convert the data types\n        for k, v in row.items():\n            if not v:\n                row[k] = None\n            elif self.schema_values[k] == \"integer\":\n                row[k] = int(v)\n            elif self.schema_values[k] == \"number\":\n                row[k] = float(v)\n        return row\n```\n\nto correct the data types from APIs.\n\nIs this something which the maintainers think would be useful to add (a better version of) into the SDK?",
      "state": "closed",
      "created_at": "2022-01-28T22:15:31.139Z",
      "updated_at": "2022-05-30T00:06:56.830Z",
      "closed_at": "2022-05-30T00:06:56.796Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Discussion",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 2585766,
        "username": "NiallRees",
        "public_email": "",
        "name": "Niall",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/2585766/avatar.png",
        "web_url": "https://gitlab.com/NiallRees"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/317",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/317",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/317/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/317/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#317",
        "relative": "#317",
        "full": "meltano/sdk#317"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1082216,
      "relative_position": -21546
    },
    {
      "id": 101385006,
      "iid": 313,
      "project_id": 22672923,
      "title": "Support class method stream discovery for all stream types",
      "description": "The Athena tap uses a stream class method to discover streams: https://github.com/MeltanoLabs/tap-athena/blob/master/tap_athena/tap.py#L29, the SDK doesn't currently make this easy for any other type of stream.\n\nI'm currently writing a tap for a REST API, where one of the resources is a 'reports' endpoint (see https://developer.niceincontact.com/API/ReportingAPI#/Reporting/Generate%20a%20datadownload%20report%20file). Users create these reports in the UI, but they can be retrieved through the API. The API provides an endpoint to retrieve the report data given the report ID, and also an endpoint to list available reports.\n\nIt would be really great to incorporate the thinking from https://gitlab.com/meltano/sdk/-/merge_requests/44 into all stream types, allowing tap developers to more easily incorporate 'dynamic' stream discovery. \n\nRight now, for me to call the list reports endpoint and instantiate a stream for each to return in `tap.py` is quite awkward when using the `RESTStream`. I'd like to be able to implement a method like `NiceInContactReportStream.discover_reports()`, but the `self.http_headers` and `self.authenticator.auth_headers` I need to authenticate with are attributes of an instantiated class, so I can't make `discover_reports()` a class method. As a workaround, I have to instantiate an instance of the `NiceInContactReportStream` with some fake values to then be able to call `discover_reports()`.\n\nMy example `discover_report_ids()`\n\n```\nclass NiceInContactStream(RESTStream):\n    name = \"base\" # has to have a name to be able to instantiate\n    schema = { # has to have a schema to be able to instantiate\n        \"stub\": {\n            \"type\": \"number\",\n        }\n    }\n    ...\n\n    def discover_reports(self):\n        \"\"\"Used in discovery.\"\"\"\n        headers = self.http_headers\n        headers.update(self.authenticator.auth_headers)\n\n        resp = requests.get(\n            url=\"https://api-c44.nice-incontact.com/incontactapi/services/v23.0/reports\",\n            headers=headers,\n        ).json()\n\n        datadownload_reports = [report for report in resp[\"reports\"] if report[\"reportType\"] == \"DataDownload\"]\n        return datadownload_reports\n```\n\nAnd its use in tap.py\n\n```\n    def discover_streams(self) -> List[Stream]:\n        \"\"\"Return a list of discovered streams.\"\"\"\n        nice_in_contact_stream = NiceInContactStream(self)\n        reports = nice_in_contact_stream.discover_reports()\n\n        return [ReportStream(self, report)\n            for report in reports\n        ]\n```\n\nHope this makes sense but happy to elaborate more!",
      "state": "closed",
      "created_at": "2022-01-27T13:04:54.400Z",
      "updated_at": "2022-05-30T00:06:26.818Z",
      "closed_at": "2022-05-30T00:06:26.796Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 2585766,
        "username": "NiallRees",
        "public_email": "",
        "name": "Niall",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/2585766/avatar.png",
        "web_url": "https://gitlab.com/NiallRees"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/313",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/313",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/313/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/313/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#313",
        "relative": "#313",
        "full": "meltano/sdk#313"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1081064,
      "relative_position": -21033
    },
    {
      "id": 101055584,
      "iid": 310,
      "project_id": 22672923,
      "title": "Leverage schema and other API details from OpenAPI spec file",
      "description": "In a perfect world, we'd be able to leverage schema definitions from an API's publicly declared API definition such as OpenAPI spec.\n\n@edgarrmondragon has proven this is a viable path via his work here: https://github.com/edgarrmondragon/tap-shortcut\n\n---------------------------\n\nFrom https://github.com/MeltanoLabs/tap-github/pull/26#discussion_r789253333:\n\n@ericboucher:\n\n> @aaronsteers @edgarrmondragon are there any tools to extract the schema/typing directly from an OpenAPI file? It would be pretty neat if we could simply plug into github/rest-api-description@main/descriptions-next/api.github.com/api.github.com.json to generate and validate types\n\n@edgarrmondragon:\n\n> @ericboucher not any that do it as we need out-of-the-box, but I have an implementation here: https://github.com/edgarrmondragon/tap-shortcut/blob/99bb738608305baa11fe26acfe32d2c9c7089a58/tap_shortcut/tap.py#L86-L121.\n\n------------------------\n\nFor my part, I have been thinking about the same, and wanted to start a discussion on whether an OpenAPI spec can be leveraged to speed up the development process.",
      "state": "closed",
      "created_at": "2022-01-21T17:12:12.264Z",
      "updated_at": "2022-05-30T00:06:01.602Z",
      "closed_at": "2022-05-30T00:06:01.575Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 9,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/310",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/310",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/310/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/310/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#310",
        "relative": "#310",
        "full": "meltano/sdk#310"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1069159,
      "relative_position": -20520
    },
    {
      "id": 98853126,
      "iid": 292,
      "project_id": 22672923,
      "title": "Follow-up from SQLStreams: 'only_schemas' and/or 'ignore_schemas' config option",
      "description": "I've spun this off as a follow-on, rather than building into v1.\n\nThe following discussion from !44 should be addressed:\n\n- [ ] @edgarrmondragon started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/44#note_745212193):  (+2 comments)\n\n    > @aaronsteers Maybe we want to allow the user to filter out certain schemas. Like `information_schema` itself, or as I found for CockroachDB, `crdb_internal`.\n    > \n    > ```suggestion:-0+0\n    >         for schema_name in inspected.get_schema_names():\n    >           if schema_name in self.ignored_schemas or schema_name not in self.config.get(\"selected_schemas\", []):\n    >               continue\n    >         ... \n    > ```\n    > \n    > Maybe a similar thing for filtering selected tables. This could help with source dbs where there's a lot of tables (like in a large data warehouse) but the user doesn't want to waste time **discovering** all of them if they're interested in a select few.",
      "state": "closed",
      "created_at": "2021-12-10T20:27:14.131Z",
      "updated_at": "2022-05-30T00:03:42.766Z",
      "closed_at": "2022-05-30T00:03:42.663Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/292",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/292",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/292/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/292/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#292",
        "relative": "#292",
        "full": "meltano/sdk#292"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 996442,
      "relative_position": -20007
    },
    {
      "id": 98834104,
      "iid": 291,
      "project_id": 22672923,
      "title": "Make the HTTP library used for REST and GraphQL taps pluggable",
      "description": "While [Requests](https://docs.python-requests.org/en/latest/) has become the dominant HTTP(S) library for Python users, others are rising in popularity including [httpx](https://www.python-httpx.org/) which offers a variety of improvements on Requests including support for HTTP/2. Requests is probably a good default due to how familiar it is for most Python developers, but it might be quite useful if there was a way to make the library pluggable.\n\nThere may be some [potential code changes](https://www.python-httpx.org/compatibility/) that might have to be made for HTTPX support\u2014in particular, it doesn't support [prepared requests](https://www.python-httpx.org/compatibility/#request-instantiation). HTTPX also supports both sync and async (which may be useful if #184 is resolved and the concerns around debugging of async code are resolved).",
      "state": "closed",
      "created_at": "2021-12-10T14:32:23.352Z",
      "updated_at": "2022-05-30T00:03:32.940Z",
      "closed_at": "2022-05-30T00:03:32.917Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 508920,
        "username": "tommorris",
        "public_email": "",
        "name": "Tom Morris",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/508920/avatar.png",
        "web_url": "https://gitlab.com/tommorris"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/291",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/291",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/291/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/291/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#291",
        "relative": "#291",
        "full": "meltano/sdk#291"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 996111,
      "relative_position": -19494
    },
    {
      "id": 98436815,
      "iid": 287,
      "project_id": 22672923,
      "title": "Add request timeout for REST API taps",
      "description": "## Summary\nI recently had a pipeline that would hang indefinitely on random requests made to the api. Since there is no default timeout in `requests` package, but they intend to add it in subsequent versions. I recommend we add a configurable timeout period with a default of 5(?) minutes on REST api requests.\n\n## Proposed benefits\nThis will provide tap developers feedback when their requests are taking too long and enable them to lengthen the timeout. Otherwise, it could hang indefinitely and make it difficult to debug like it did in my case.\n\n## Proposal details\nThis involves setting the `timeout` parameter of the `send` method of the prepared request in the `_request` method of the `RESTStream` class. I would also add the timeout exception error the backoff decorator. I would also recommend setting a class attribute in the cookiecutter template that calls this out as a configurable setting for new taps. \n\nI will provide a PR for my recommendation.\n\n## Best reasons not to build\nIt would be an easy feature to miss when developing a new tap and could create frustration for healthy but long running api calls.",
      "state": "closed",
      "created_at": "2021-12-03T22:42:17.683Z",
      "updated_at": "2023-09-06T15:48:22.997Z",
      "closed_at": "2021-12-16T22:01:02.508Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Accepting Merge Requests",
        "flow::Review",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2286172,
        "iid": 200,
        "group_id": 2524164,
        "title": "Fri: Dec 17, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:20:21.743Z",
        "updated_at": "2022-01-04T16:10:50.410Z",
        "due_date": "2021-12-17",
        "start_date": "2021-12-11",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/200"
      },
      "assignees": [],
      "author": {
        "id": 8784356,
        "username": "jlloyd3",
        "public_email": "",
        "name": "Josh Lloyd",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8784356/avatar.png",
        "web_url": "https://gitlab.com/jlloyd3"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/287",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/287",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/287/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/287/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#287",
        "relative": "#287",
        "full": "meltano/sdk#287"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 982571,
      "relative_position": -18981
    },
    {
      "id": 98339165,
      "iid": 285,
      "project_id": 22672923,
      "title": "Catalog parsing for nested objects not working",
      "description": "Not sure the easiest way to setup a test case here\n\ntap is here https://github.com/AutoIDM/tap-googleads\n\n\n1. `meltano select --all tap-googleads` \n2. `meltano select --list tap-googleads`, response\n```\n        [selected ] geo_target_constant.geoTargetConstant\n        [selected ] geo_target_constant.geoTargetConstant.canonicalName\n        [selected ] geo_target_constant.geoTargetConstant.countryCode\n        [selected ] geo_target_constant.geoTargetConstant.id\n        [selected ] geo_target_constant.geoTargetConstant.name\n        [selected ] geo_target_constant.geoTargetConstant.resourceName\n        [selected ] geo_target_constant.geoTargetConstant.status\n        [selected ] geo_target_constant.geoTargetConstant.targetType\n```\n3. `meltano select --all --rm tap-googleads`\n4. `meltano select geo_target_constant.geoTargetConstant.name` \n5. Output will not have any records with this subObject listed instead the output looks like\n\n```{\"type\": \"RECORD\", \"stream\": \"geo_target_constant\", \"record\": {}, \"time_extracted\": \"2021-12-02T14:08:28.138997Z\"}```",
      "state": "closed",
      "created_at": "2021-12-02T14:16:39.606Z",
      "updated_at": "2022-05-18T16:01:06.249Z",
      "closed_at": "2022-01-12T01:18:30.936Z",
      "closed_by": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2136620,
        "iid": 176,
        "group_id": 2524164,
        "title": "Staging",
        "description": "",
        "state": "active",
        "created_at": "2021-07-07T19:00:49.676Z",
        "updated_at": "2021-07-07T19:00:49.676Z",
        "due_date": null,
        "start_date": null,
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/176"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/285",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/285",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/285/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/285/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#285",
        "relative": "#285",
        "full": "meltano/sdk#285"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 979199,
      "relative_position": -18468
    },
    {
      "id": 98127780,
      "iid": 282,
      "project_id": 22672923,
      "title": "Let taps continue to next partitions upon error",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\nFollow up to !195 and probably related to #137 (and maybe #134)\n\nIn release 0.3.14, there is now support for `RetriableAPIError` and `FatalAPIError`, which I think should be extended to allow for the tap to continue after such an error (whether that's the default or an opt-in behaviour), in particular when dealing with a partitioned stream.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\nExample use case: `tap-github` can fetch data for a list of repos. Currently, if it fails at some point, the rest of the list is not handled at all. See [this issue](https://github.com/MeltanoLabs/tap-github/issues/52) for more details. In that particular case, not handling the error means we're not able to retrieve data past the error which seems persistent on some repos.\n\nGiven that the tap is run as a separate process, bubbling the exception up to the top level doesn't actually help in that the calling process cannot get access to the details of it. Returning state (and maybe an error exit code) seems like a cleaner way to fail.\n\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nIn `Stream._sync_records`, the code [loops through a list of contexts](https://gitlab.com/meltano/sdk/-/blob/main/singer_sdk/streams/core.py#L911), but there is no error handling. The loop could be enclosed in a `try...except` block which could selectively capture the above exceptions and update state (or not) accordingly, before proceeding with the next context.\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nI can't really think of a reason why this would cause problems, but I only have the `tap-github` use case in mind. If there are downsides, that behaviour could be opt-in via a config option, with the default behaviour remaining as is.",
      "state": "closed",
      "created_at": "2021-11-29T22:40:06.720Z",
      "updated_at": "2022-05-30T00:02:21.853Z",
      "closed_at": "2022-05-30T00:02:21.750Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Needs Refinement",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 75577,
        "username": "LaurentS",
        "public_email": "",
        "name": "Laurent Sava\u00ebte",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/ac898ad4d1975ac4678873c142f8ed88161383546137af50ad4f58fdc678c798?s=80&d=identicon",
        "web_url": "https://gitlab.com/LaurentS"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/282",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/282",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/282/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/282/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#282",
        "relative": "#282",
        "full": "meltano/sdk#282"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 971231,
      "relative_position": -17442
    },
    {
      "id": 95068469,
      "iid": 235,
      "project_id": 22672923,
      "title": "Allow taps to generate catalog without auth, and/or without JSON schema validation on settings",
      "description": "Currently, _some_ taps require credentials in order to perform discovery and at least in theory, config settings are allowed to alter the output of the catalog (flattening and stream maps, for instance).\n\nGiven that we want discovery to work even without auth (at least for sources which can support it), we need to modify tap and target behaviors to be able to generate a catalog, even if the tap config validation otherwise would not pass due to missing credentials.\n\nAny of these could work in theory:\n\n1. Discovery mode skips JSON schema setting validation (not ideal perhaps because of the risk of `KeyError` exceptions that may be hard for the user to debug).\n2. Discovery mode does perform validation, but rather than producing a hard failure, it prints a non-fatal warning message before continuing the discovery process.\n3. Some other tap-level setting where a developer informs the SDK whether and how the catalog can be generated when creds are not provided.\n\nI'm leaning towards option 2 because it is the least invasive, it's relatively easy for users to debug, and it does not require the developer to modify their existing code. (Executions that require creds will naturally fail, and executions that don't require creds will naturally succeed.) Since we're not technically ignoring or disabling config, this also means that stream maps and flattening behaviors will happen as usual, along the normal code path and without need to alter or make exception.",
      "state": "closed",
      "created_at": "2021-10-07T22:31:35.369Z",
      "updated_at": "2022-01-05T19:24:49.178Z",
      "closed_at": "2021-10-21T21:00:14.547Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 8,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/235",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/235",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/235/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/235/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#235",
        "relative": "#235",
        "full": "meltano/sdk#235"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 870934,
      "relative_position": -16416
    },
    {
      "id": 94059877,
      "iid": 221,
      "project_id": 22672923,
      "title": "Template and support for SOAP/XML API",
      "description": "## Summary\nFrom [this slack thread](https://meltano.slack.com/archives/C01PKLU5D1R/p1631888955171800). We would like to see the ability to develop SDK based taps for SOAP/XML APIs.\n\n## Proposed benefits\nThis would greatly speed up what is an onerous development process.\n\n## Proposal details\nIt would be great if during the cookiecutter command line setup if a \"SOAP API\" was an available option next to selecting a \"REST API\".\n\n## Best reasons not to build\nThis is not a very commonly used API type.  \n\nThe current work around involves overwriting some of the less commonly altered base functionality provided in the REST API SDK functionality (see comments for example).",
      "state": "closed",
      "created_at": "2021-09-21T18:11:55.366Z",
      "updated_at": "2022-05-29T23:54:41.309Z",
      "closed_at": "2022-05-29T23:54:41.293Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 8784356,
        "username": "jlloyd3",
        "public_email": "",
        "name": "Josh Lloyd",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8784356/avatar.png",
        "web_url": "https://gitlab.com/jlloyd3"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/221",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/221",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/221/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/221/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#221",
        "relative": "#221",
        "full": "meltano/sdk#221"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 839069,
      "relative_position": -15390
    },
    {
      "id": 93297575,
      "iid": 215,
      "project_id": 22672923,
      "title": "Selection treatment for undefined child nodes in the record",
      "description": "As discussed in this comment: https://gitlab.com/meltano/sdk/-/merge_requests/146#note_668003625\n\n> I'm thinking of scenarios where a new subproperty is added in source but not declared in the catalog. If the parent has `selected-by-default=True`, I think that can apply to the child, but if the parent is `selected=True`, it might still one or more subnodes with `selected=False`, and a newly appearing subnode should probably also default to false.\n> \n> The extreme PII scenario is something like an `employees` stream which has a `properties.user_record` subnode (selected=True), which has `properties.user_record.properties.last_name` and `properties.user_record.properties.phone_number` (selected=False). If a new subnode appears that was not previously declared, like `properties.user_record.properties.ssn`, I think we need to default to `False` in that case\n> \n> To complicate matters further, there's another related case where `properties` is completely missing and undefined as described in #192. In that case, I do think we would take the parent's `selected` property as sufficient to select its nodes. The distinction, I think, is when `properties` are pre-defined, we either should ignore new ones or perhaps refer to `selected-by-default` as a tie breaker. If properties are not defined at all (variant objects), then I think the parent being selected is explicit to the full object.\n\nLogging this issue to figure out what the correct behavior should be, whether using the existing spec (perhaps a combo of `selected` and `selected-by-default`) or via a spec clarification or extension.",
      "state": "closed",
      "created_at": "2021-09-08T04:47:30.185Z",
      "updated_at": "2022-05-29T23:53:55.144Z",
      "closed_at": "2022-05-29T23:53:55.125Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/215",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/215",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/215/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/215/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#215",
        "relative": "#215",
        "full": "meltano/sdk#215"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 825391,
      "relative_position": -14877
    }
  ]
}
