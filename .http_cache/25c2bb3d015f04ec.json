{
  "cookies": {
    "_cfuvid": "zRsZM4s0KOiO2oYZ5KscbGySW0ehFm1yceE2HDJ0Pz4-1747940876431-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:56.330751+00:00",
  "elapsed": 0.509895,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e996b6944db74-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:56 GMT",
    "ETag": "W/\"becbac573c340a24f006318762b714ce\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/116/issues?epic_iid=116&id=2524164&page=1&per_page=20>; rel=\"prev\", <https://gitlab.com/api/v4/groups/2524164/epics/116/issues?epic_iid=116&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/116/issues?epic_iid=116&id=2524164&page=2&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=zRsZM4s0KOiO2oYZ5KscbGySW0ehFm1yceE2HDJ0Pz4-1747940876431-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-14-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-c",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"63646ba6aa5c6a3e5cf2718ce4395ddf\",\"version\":\"1\"}",
    "x-next-page": "",
    "x-page": "2",
    "x-per-page": "20",
    "x-prev-page": "1",
    "x-request-id": "63646ba6aa5c6a3e5cf2718ce4395ddf",
    "x-runtime": "0.287810",
    "x-total": "26",
    "x-total-pages": "2"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/116/issues?page=2"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/116/issues?page=2",
  "_decoded_content": [
    {
      "id": 85973367,
      "iid": 2725,
      "project_id": 7603319,
      "title": "Refactor `meltano elt`, `SingerRunner` and `DbtRunner` to be composable",
      "description": "As @aaronsteers noticed in https://gitlab.com/meltano/meltano/-/merge_requests/2105#note_558353646, the `SingerRunner` code is a mess of async futures and very hard to understand. \n\nIt is currently hard-coded for the `tap | target` scenario and will need to be refactored to support `tap | transformer | target` (https://gitlab.com/meltano/meltano/-/issues/2300) and `meltano run tap transformer target dbt` (https://gitlab.com/meltano/meltano/-/issues/2301).",
      "state": "closed",
      "created_at": "2021-04-26T16:55:44.422Z",
      "updated_at": "2021-11-29T22:13:16.672Z",
      "closed_at": "2021-10-08T17:54:30.929Z",
      "closed_by": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "labels": [
        "Office Hours::To Discuss",
        "flow::Blocked",
        "kind::Feature",
        "urgency::higher",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2241593,
        "iid": 189,
        "group_id": 2524164,
        "title": "Fri: Oct 8, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-09-20T18:57:51.979Z",
        "updated_at": "2021-10-18T13:43:14.653Z",
        "due_date": "2021-10-08",
        "start_date": "2021-10-02",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/189"
      },
      "assignees": [],
      "author": {
        "id": 87854,
        "username": "DouweM",
        "public_email": "",
        "name": "Douwe Maan",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bbb752c75ae2744bddf1640d75edf9b6f7d4e5f4fbba4a4f0910961e6f0519b9?s=80&d=identicon",
        "web_url": "https://gitlab.com/DouweM"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 21,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2725",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2725",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2725/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2725/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2725",
        "relative": "#2725",
        "full": "meltano/meltano#2725"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 116,
      "epic": {
        "id": 331276,
        "iid": 116,
        "title": "Enable ELT pipelines in Meltano to be composable",
        "url": "/groups/meltano/-/epics/116",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2021",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 711977,
      "relative_position": -4104
    },
    {
      "id": 81869676,
      "iid": 2681,
      "project_id": 7603319,
      "title": "Include discovery output in `meltano elt` output",
      "description": "### What is the current *bug* behavior?\n\nWhen running `meltano --log-level=debug elt tap-spreadsheets-anywhere target-postgres --job_id=test`, with the tap trying to load an unsupported JSON file, error messages from the tap's discover code are not shown in the output.\n\nAfter checking with @DouweM, it is apparently related to the fact that meltano elt runs the tap twice, once with --discover to generate the catalog, and then in sync mode along with the target. meltano elt only forwards stdout and stderr from that sync mode run, not the discovery run, meaning that any log messages that only show up during discovery mode are lost, unless discovery mode fails entirely and all output is dumped.\n\n### What is the expected *correct* behavior?\n\nLog messages from the discovery step should be forwarded to the output as well.\n\n### Steps to reproduce\n\n- setup `tap-spreadsheets-anywhere` to load a file incorrectly formatted, so that discovery will fail with an error message. The following config for the tap can be used to trigger such an error:\n```yaml\nplugins:\n  extractors:\n  - name: tap-spreadsheets-anywhere\n    pip_url: git+https://github.com/ets/tap-spreadsheets-anywhere.git\n    config:\n      tables:\n        - path: https://salsa.debian.org/iso-codes-team/iso-codes/-/raw/main/data/\n        format: json\n        name: iso_countries\n        pattern: \"iso_3166-1.*\"\n        key_properties:\n        - 'alpha_2'\n        start_date: '2011-01-01T00:00:00Z'\n```\n- run `meltano --log-level=debug elt tap-spreadsheets-anywhere target-postgres --job_id=test`\n- note that the output does not include the expected error messages (`ERROR Unable to write Catalog entry for 'iso_countries' - it will be skipped due to error 'str' object has no attribute 'items'`) should appear in the logs\n\n### Relevant logs and/or screenshots\n\n### Possible fixes\n\n\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team",
      "state": "closed",
      "created_at": "2021-03-29T19:00:20.927Z",
      "updated_at": "2021-10-21T15:22:44.045Z",
      "closed_at": "2021-10-21T15:22:44.017Z",
      "closed_by": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "Office Hours::To Discuss",
        "flow::Doing",
        "kind::Feature",
        "urgency::default",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2241595,
        "iid": 191,
        "group_id": 2524164,
        "title": "Fri: Oct 22, 2021 (Tap-Toberfest)",
        "description": "",
        "state": "closed",
        "created_at": "2021-09-20T18:58:27.170Z",
        "updated_at": "2021-10-25T14:54:00.700Z",
        "due_date": "2021-10-22",
        "start_date": "2021-10-16",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/191"
      },
      "assignees": [],
      "author": {
        "id": 75577,
        "username": "LaurentS",
        "public_email": "",
        "name": "Laurent Sava\u00ebte",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/ac898ad4d1975ac4678873c142f8ed88161383546137af50ad4f58fdc678c798?s=80&d=identicon",
        "web_url": "https://gitlab.com/LaurentS"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 10,
      "merge_requests_count": 2,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2681",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": 8,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2681",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2681/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2681/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2681",
        "relative": "#2681",
        "full": "meltano/meltano#2681"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 116,
      "epic": {
        "id": 331276,
        "iid": 116,
        "title": "Enable ELT pipelines in Meltano to be composable",
        "url": "/groups/meltano/-/epics/116",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2021",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 523674,
      "relative_position": -4360
    },
    {
      "id": 70124985,
      "iid": 2301,
      "project_id": 7603319,
      "title": "Add `meltano run [<plugin>...]` to run arbitrary plugins in a pipeline",
      "description": "As meltano run evolves we may opt to expand/change the invocation syntax but\n\n>  a simple first iteration will be to focus on just the chain use case: we do a bit of work to validate blocks, but otherwise we run left to right and find ExtractLoad Blocks as appropriate. @tayloramurphy \n\nIt's simply `meltano run tap-gitlab target-jsonl tap-gitlab target-csv dbt:run` with blocks run in series (with ExtractLoad blocks parsed and linked as needed). \n\nOther sample valid invocations:\n\n- `meltano run tap-gitlab map-remove-nulls target-msyql dbt:run`\n- `meltano run tap-gitlab target-msyql dbt:run tap-msqyl target-json`\n- `meltano run tap-gitlab target-msyql dbt:run dbt:test superset:build`\n\nInvalid invocations:\n\n- command block between IOBlocks: `meltano run tap-gitlab dbt:run target-msyql`\n- starting IOBlock (tap-peloton) with no ending IOBlock (a target): `meltano run tap-peloton tap-gitlab target-mysql` \n- ending IOBlock (target-jsonl) with no starting IOBlock (a tap): `meltano run tap-gitlab target-mysql target-jsonl` \n- tap/target used as command block: `meltano run tap-gitlab:discovery`\n\nJob ID generation and STATE support:\n\n- If no environment is provided: job ID is not generated and STATE is not supported.\n- If environment is provided: job ID is automatically generated with a format such as `{environment_name}:{tap_name}-to-{target_name}`.\n\nExplicitly out of scope in the first version:\n\n- Running taps/targets as commands is out of scope at least in this first version. \n- Retries, permissive or selective failures is out of scope at least in this first version. A failure at any point halts execution and no further blocks are executed. \n\n\nFully out of scope:\n\n- There's no plan as of now to support individual block-level arg passing - and it will likely not be available in future revisions. For instance, this will not be possible: `meltano run dbt:run dbt:test[--verbose]`. Instead you'd need to use `meltano invoke` or create a custom `test-verbose` command and execute like this `meltano run dbt:run dbt:test-verbose`.\n\n\n<details>\n  <summary>Original issue body</summary>\n  \nAs in:\n\n- `meltano elt <extractor> <loader> [--transform=skip]` -> `meltano run <extractor> <loader>`, e.g. `meltano run tap-foo target-bar`\n- `meltano elt <extractor> <loader> --transform=run` -> `meltano run <extractor> <loader> <transformer>`, e.g. `meltano run tap-foo target-bar dbt`\n- `meltano elt <extractor> <loader> --transform=only` -> `meltano run <transformer> --with <extractor> --with <loader>`, e.g. `meltano run dbt --with tap-foo target-bar` (see https://gitlab.com/meltano/meltano/-/issues/2546)\n\nAnd instead of `meltano schedule gitlab-to-jsonl tap-gitlab target-jsonl @hourly --transform=run:\n\n```yaml\nschedules:\n- name: gitlab-to-jsonl\n  extractor: tap-gitlab\n  loader: target-jsonl\n  transform: run\n  interval: '@hourly'\n```\n\nWe get `meltano schedule gitlab-to-jsonl tap-gitlab target-jsonl dbt @hourly`:\n\n```yml\n- name: gitlab-to-jsonl\n  interval: '@hourly'\n  pipeline: # or `run`?\n  - tap-gitlab\n  - target-jsonl\n  - dbt\n```\n</details>",
      "state": "closed",
      "created_at": "2020-08-21T18:40:56.781Z",
      "updated_at": "2022-02-01T22:01:03.465Z",
      "closed_at": "2021-12-15T23:22:29.556Z",
      "closed_by": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "labels": [
        "Accepting Merge Requests",
        "CLI",
        "Demo Day::To Share",
        "Marketing::Blog Feature",
        "Office Hours::Discussed",
        "flow::Review",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286172,
        "iid": 200,
        "group_id": 2524164,
        "title": "Fri: Dec 17, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:20:21.743Z",
        "updated_at": "2022-01-04T16:10:50.410Z",
        "due_date": "2021-12-17",
        "start_date": "2021-12-11",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/200"
      },
      "assignees": [],
      "author": {
        "id": 87854,
        "username": "DouweM",
        "public_email": "",
        "name": "Douwe Maan",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bbb752c75ae2744bddf1640d75edf9b6f7d4e5f4fbba4a4f0910961e6f0519b9?s=80&d=identicon",
        "web_url": "https://gitlab.com/DouweM"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 37,
      "merge_requests_count": 1,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2301",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 12,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2301",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2301/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2301/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2301",
        "relative": "#2301",
        "full": "meltano/meltano#2301"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 116,
      "epic": {
        "id": 331276,
        "iid": 116,
        "title": "Enable ELT pipelines in Meltano to be composable",
        "url": "/groups/meltano/-/epics/116",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2021",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 217403,
      "relative_position": -3462
    },
    {
      "id": 70124963,
      "iid": 2300,
      "project_id": 7603319,
      "title": "Allow extractor Singer messages to be transformed using Python before passing them to loader (Stream Maps)",
      "description": "We could support [`transformer` plugins](https://meltano.com/docs/plugins.html#transformers) other than `dbt`, that would follow extraction rather than loading, and would transform an extractor's output stream of Singer messages (`SCHEMA`, `RECORD`, etc), before they're streamed into the loader.\n\nThe two types of transformers could be distinguished using an extra, e.g. `type: {etl,elt}` or `{follows,acts_on,transforms}: {extractor,loader}`\n\nWe could support both pip packages, and local executable files, using either the `pip_url` or `executable` plugin setting.",
      "state": "closed",
      "created_at": "2020-08-21T18:39:37.722Z",
      "updated_at": "2021-12-16T19:21:52.743Z",
      "closed_at": "2021-12-16T19:21:52.498Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Extract",
        "Transform",
        "flow::Triage",
        "kind::Feature",
        "urgency::default",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286172,
        "iid": 200,
        "group_id": 2524164,
        "title": "Fri: Dec 17, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:20:21.743Z",
        "updated_at": "2022-01-04T16:10:50.410Z",
        "due_date": "2021-12-17",
        "start_date": "2021-12-11",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/200"
      },
      "assignees": [],
      "author": {
        "id": 87854,
        "username": "DouweM",
        "public_email": "",
        "name": "Douwe Maan",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bbb752c75ae2744bddf1640d75edf9b6f7d4e5f4fbba4a4f0910961e6f0519b9?s=80&d=identicon",
        "web_url": "https://gitlab.com/DouweM"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 9,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2300",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 12,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2300",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2300/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2300/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": "https://gitlab.com/api/v4/projects/7603319/issues/2299"
      },
      "references": {
        "short": "#2300",
        "relative": "#2300",
        "full": "meltano/meltano#2300"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 116,
      "epic": {
        "id": 331276,
        "iid": 116,
        "title": "Enable ELT pipelines in Meltano to be composable",
        "url": "/groups/meltano/-/epics/116",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2021",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 217402,
      "relative_position": -3334
    },
    {
      "id": 70124790,
      "iid": 2299,
      "project_id": 7603319,
      "title": "Allow stream-level and property-level transformations to be defined in `meltano.yml` (Stream Maps)",
      "description": "<details><summary>Expand Original Issue Description</summary>\n\nInspired by https://www.dropbase.io/, PipelineWise transformations (https://transferwise.github.io/pipelinewise/user_guide/transformations.html), and our [existing extractor extras](https://meltano.com/docs/plugins.html#metadata-extra), I'm imagining something like:\n\n```yaml\nextractors:\n- name: tap-example\n  # ...\n  transform:\n    <entity>:\n      <function>: <args>\n      <attribute>:\n        <function>: <args>\n```\n\nSince these transformations would act on an extractor's output: a stream of Singer `SCHEMA` and `RECORD` messages, we could relatively easily support functions for:\n- renaming (prefixing, suffixing) entity (stream, table) or attribute (property, column) names\n- dropping entities or attributes, in cases where a tap doesn't support discovery mode and entity selection\n- adding attributes with predefined or dynamic values, like PipelineWise's metadata columns: https://transferwise.github.io/pipelinewise/user_guide/metadata_columns.html\n- filtering records based on one or more attribute values, keeping only those that do (or don't!) match (`drop_if`, `drop_unless`?)\n- replacing text in attribute values\n- replacing empty strings with nulls\n- replacing nulls with a string\n- changing attribute types and casting values, which can go beyond overriding the JSON schema using the [`schema` extra](https://meltano.com/docs/plugins.html#schema-extra)\n\nFunctions could take arguments of any type: a simple string, an array of values, or an object with additional keys. If a function doesn't take any attribute (like `drop`), it could just take a `true` boolean.\n\nSince functions could have object arguments, Meltano would not immediately be able to distinguish between `{entity: {attribute: {function: scalar_value}}}` and `{entity: {function: {nested_key: nested_value}}}`, where the key nested under an entity identifier could either be an attribute identifier or a function name. We don't have this issue with [`metadata`](https://meltano.com/docs/plugins.html#metadata-extra) and [`schema`](https://meltano.com/docs/plugins.html#schema-extra) extras, because metadata values cannot (so far) be objects, and since schema info can only be specified for attributes, not entities as a whole. Perhaps we can add a special `_` or `_self` or `_entity` key at the attribute level to nest entity-level transformation functions under, in cases where they need object values.\n\n</details>\n\n## Background (Updated 2021-12-15)\n\nThere would be a large advantage to being able to enable transformations like those from [pipelinewise-transform-field](https://github.com/transferwise/pipelinewise-transform-field) and Meltano SDK's [Inline Stream Maps](https://sdk.meltano.com/en/latest/stream_maps.html) to be defined natively in `meltano.yml` config.\n\nThis opens up a large number of use cases defined on the SDK docs site:\n\n> ### Stream-Level Mapping Applications\n>\n> - Stream aliasing: streams can be aliased to provide custom naming downstream.\n> - Stream filtering: streams records can be filtered based on any user-defined logic.\n> - Stream duplication: streams can be split or duplicated and then sent as multiple distinct streams to the downstream target.\n> \n> ### Property-Level Mapping Applications\n>\n> - Property-level aliasing: properties can be renamed in the resulting stream.\n> - Property-level transformations: properties can be transformed inline.\n> - Property-level exclusions: properties can be removed from the resulting stream.\n> - Property-level additions: new properties can be created based on inline user-defined expressions.\n\nAs well as fixes for these common issues:\n\n- Applying selection rules to taps that don't support selection.\n- Resolve issues caused by taps that use selection rules to filter `RECORD` messages but not the `SCHEMA` messages that is used to create target tables.\n- Resolve compatibility issues from taps that send data types that the chosen target cannot understand.\n- Resolve compatibility issues from taps that send `ACTIVATE_VERSION` messages to targets that don't understand them.\n- Need for \"record flattening\" when neither the tap or target supports this feature natively.\n\n## Proposal: Map transforms as properties of extractors and loaders (Updated 2021-12-15)\n\nAfter running the following...\n\n```bash\nmeltano add mapper meltano-map-transform\nmeltano add mapper pipelinewise-transform-field\n```\n\n... you would be able to provide a config such as:\n\n\n```yaml\nmappers:\n- name: meltano-map-transform\n  pip_url: meltano-map-transform\n  config:                         # Optionally, a default config.\n    # ...\n- name: pipelinewise-transform-field\n  pip_url: pipelinewise-transform-field\n- name: no-activate-version.      # A fictional mapper that removes ACTIVATE_VERSION messages\n  pip_url: no-activate-version\n  config:                         # Optionally, a default config.\n    # ...\nextractors:\n- name: tap-gitlab\n  # ...\n  mappings:\n  - name: pii-hasher               # The name of the map transform to apply.\n    mapper: meltano-map-transform  # The mapper plugin to use.\n    config:                        # What will be sent to the transformer in a config.json file.\n      stream_maps:\n        customers:\n          id_hashed: md5(record['id'])\n          id: None\nloaders:\n- name: target-salesforce\n  # ...\n  mappings:\n  - name: add-global-guid          # The name of the map transform to apply.\n    mapper: meltano-map-transform  # The mapper plugin to use.\n    config:                        # What will be sent to the transformer in a config.json file.\n      stream_maps:\n        customers:\n          guid: md5(record['id'])\n- name: target-csv\n  # ...\n  mappings:\n  - name: flatten-records          # The name of the map transform to apply.\n    mapper: meltano-map-transform  # The mapper plugin to use.\n    default: true                  # Transform prepended automatically if default=true.\n    config:                        # What will be sent to the transformer in a config.json file.\n      flatten_records: true\n  - name: compat-fix               # The name of the map transform to apply.\n    mapper: no-activate-version    # The mapper plugin to use.\n                                   # config is omitted if the generic config is sufficient\n```\n\nOne or more map transforms may be placed between tap and target:\n\n```bash\nmeltano run tap-gitlab pii-hasher target-salesfoce\nmeltano run tap-gitlab pii-hasher flatten-records target-csv\n```\n\nSince `default=true` for `flatten-records` and `compat-fix` on `target-csv`, these are all equivalent:\n\n```bash\nmeltano run tap-gitlab flatten-records target-csv\nmeltano run tap-gitlab target-csv\n```\n\nNote: For the example config above, this command would fail because `flatten-records` is only defined for `target-csv` and is not defined for `tap-gitlab` nor `target-salesforce`: `meltano run tap-gitlab flatten-records target-salesforce`.",
      "state": "closed",
      "created_at": "2020-08-21T18:32:43.092Z",
      "updated_at": "2022-03-01T22:43:03.636Z",
      "closed_at": "2022-02-18T22:02:17.099Z",
      "closed_by": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "labels": [
        "Extract",
        "Office Hours::Up Next",
        "Roadmap",
        "Transform",
        "flow::Review",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286177,
        "iid": 204,
        "group_id": 2524164,
        "title": "February 2022",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:21:35.408Z",
        "updated_at": "2022-03-01T20:28:25.106Z",
        "due_date": "2022-02-28",
        "start_date": "2022-02-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/204"
      },
      "assignees": [],
      "author": {
        "id": 87854,
        "username": "DouweM",
        "public_email": "",
        "name": "Douwe Maan",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bbb752c75ae2744bddf1640d75edf9b6f7d4e5f4fbba4a4f0910961e6f0519b9?s=80&d=identicon",
        "web_url": "https://gitlab.com/DouweM"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 28,
      "merge_requests_count": 1,
      "upvotes": 3,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2299",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 12,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2299",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2299/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2299/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2299",
        "relative": "#2299",
        "full": "meltano/meltano#2299"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 116,
      "epic": {
        "id": 331276,
        "iid": 116,
        "title": "Enable ELT pipelines in Meltano to be composable",
        "url": "/groups/meltano/-/epics/116",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2021",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 217401,
      "relative_position": -3206
    },
    {
      "id": 69183865,
      "iid": 2205,
      "project_id": 7603319,
      "title": "Add `container_spec` for containerized plugin commands",
      "description": "The `tap-mssql` plugin is a good example of a non-standard, non-python tap which would nevertheless be desirable for mainstream support. One way to support this is by adding a docker_image option in discovery.yml and work through whatever issues come up in that process.\n\nOriginally started as a discussion here: https://meltano.slack.com/archives/C013Z450LCD/p1596043957041600?thread_ts=1595992122.035100&cid=C013Z450LCD\n\n--------------\n\n## Update (2021-08-24)\n\n-----------------\n\nThe original use case for this issue (java-based `singer/tap-mssql`) is no longer a priority since we now have a python-based `tap-mssql` implementation and there just haven't been many (any?) other taps or targets requested which were not pip installable.\n\nA newer use case is Lightdash, which has a complex set of requirements and is recommended to be run via docker - or specifically via docker compose.\n\n## Update ~~(2021-10-05)~~ ~~(2021-11-29)~~ (2021-12-07)\n\nIn discussions around this topic, it appears clear we need to provide docker and non-docker invocation methods for plugins so that a `--container=True` flag (or similar) could toggle the behavior to dockerized vs native invocation methods. The docker config is then additive to existing `executable` and `pip_url` inputs.\n\n### New `container_spec` option for plugin commands\n\nThis feature would add a structured `container_spec` config option to each plugin command:\n\n```yml\nplugins:\n    utilities:\n        name: lightdash\n        commands:\n        - name: serve\n          executable: \"lightdash serve\"  # ignored when running via docker\n          container_spec:\n            image: lightdash\n            command: lightdash serve\n            entrypoint: \n            env:\n                ENVVAR1: foo\n                ENVVAR2: bar\n            ports:\n            - 5000\n            - 8080\n            volumes:\n            - \".:/project/myproject\"\n        - name: build\n          executable: \"lightdash build\"  # ignored when running via docker\n          container_spec:\n            image: lightdash\n            command: lightdash build\n            entrypoint: \n            env:\n                ENVVAR1: foo\n                ENVVAR2: bar\n            ports: [] # None needed\n            volumes:\n            - \".:/project/myproject\"\n```\n\n### Supported `container_spec` options in V1:\n\n* `image`\n* `vars`\n* `ports`\n* `command`\n* `entrypoint`\n* `volumes` - or *at least* a container path in which to mount the root project dir\n\nOnly `image` is required. All other options are optional.\n\n### New `--containers=true|false` flag for CLI commands `elt`, `invoke`, and `run`\n\nThe CLI commands `elt`, `invoke`, and `run` would all have a new `--containers` CLI arg. This arg has the following behaviors:\n\n- `true`: This uses `container_spec` whenever it is available.\n    - Important: `true` setting does not guarantee that all invocations will be run containerized. Any plugin or command that does not have a `container_spec` will be attempted to be invoked natively. If native invocation fails, the command will fail - as is the existing behavior today.\n- `false`: This users local invocation (non-containerized) for all plugins. (Assumption being that there is no container runtime available on the machine.)\n    - Note: If a plugin _only_ has a `container_spec` config and does not have any other means of being invoked, then the command will fail.\n\nNote that if multiple plugins need to be invoked, they will share the same preference setting across the entire meltano CLI command.\n\n#### Sample invocation\n\nFor instance, taking the following sample invocation: `meltano --containers=true run tap-gitlab target-snowflake dbt:run dbt:test lightdash:build` and assuming that only `tap-gitlab` and `lightdash:build` have a defined `container_spec`, the behavior will be as follows:\n\n- `tap-gitlab` will be invoked within a container and its data will be passed to the STDIN of `target-snowflake`, which will be running natively.\n- `dbt:run` and `dbt:test` will both be run natively, since no `container_spec` exists for those commands.\n- `lightdash:build` will be run within a container.\n\nAssuming the same command is run with `--containers=false`, and assuming `lightdash:build` does not also have an non-containerized `executable` set, then meltano will fail to build an execution plan and will abort immediately with something like:\n\n> Execution of `lightdash:build` is not defined when container runtimes are disabled. To proceed, add a native `executable` definition to `lightdash:build` command or run with `--containers=true` to enable containerized execution.\n\nLastly, if `executable` and `container_spec` are both provided for the `lightdash:build` command, but the command is invoked natively (`--containers=false`) without the proper prerequisites installed, then the command will fail at the very end of the job when `meltano run` reaches the final `lightdash:build` step.\n\n#### Optional CLI conventions we could support:\n\n- `--containers` is short for `--containers=true`\n- `--no-containers` is short for `--containers=false`\n\n\n## Out of scope\n\n### Tap and Target containerization\n\nWe will probably build support for general plugins (`transformers`, `orchestrators`, and `utilities`) first - or more specifically for plugin `commands` first.\n\nDue to the additional complexity, containerized extractors and loaders would likely be a fast-follow on top of the first MVC release.\n\nUnlike for general utilities, the `container_spec` config for extractors and loaders needs to be at the plugin level, not the command level, and any `command` value will likely be ignored by Meltano at runtime, in favor of the ways that Meltano already knows to invoke a tap, especially: `tap-mytap --discover --config=/path/to/config.json` (discovery) and `tap-mytap --config=/path/to/config.json` (sync).\n\n### Compose Syntax and docker-compose.yml files\n\nOut of scope for now, but we _might_ also support docker-compose in future:\n\n```yml\nplugins:\n    utilities:\n        name: lighdash\n        commands:\n        - name: serve\n          container_spec:\n            compose: lightdash.docker-compose.yml\n```",
      "state": "closed",
      "created_at": "2020-07-29T17:55:52.517Z",
      "updated_at": "2022-02-22T18:01:54.337Z",
      "closed_at": "2022-02-18T03:08:07.730Z",
      "closed_by": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "labels": [
        "Accepting Merge Requests",
        "Office Hours::Up Next",
        "Roadmap",
        "flow::Review",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286177,
        "iid": 204,
        "group_id": 2524164,
        "title": "February 2022",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:21:35.408Z",
        "updated_at": "2022-03-01T20:28:25.106Z",
        "due_date": "2022-02-28",
        "start_date": "2022-02-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/204"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 57,
      "merge_requests_count": 1,
      "upvotes": 3,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2205",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 12,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2205",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2205/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2205/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2205",
        "relative": "#2205",
        "full": "meltano/meltano#2205"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 116,
      "epic": {
        "id": 331276,
        "iid": 116,
        "title": "Enable ELT pipelines in Meltano to be composable",
        "url": "/groups/meltano/-/epics/116",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2021",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 443371,
      "relative_position": -569
    }
  ]
}
