{
  "cookies": {
    "_cfuvid": "Rh3CYyjSYLj6cxKbX.7obaZROd3Xnpr2WbA9PLe4e1A-1747940889513-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:08:09.475936+00:00",
  "elapsed": 0.74624,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e99bb9e3c37ff-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:08:09 GMT",
    "ETag": "W/\"b7836dfdbab96bf6fca96e1722a35e74\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/118/issues?epic_iid=118&id=2524164&page=2&per_page=20>; rel=\"next\", <https://gitlab.com/api/v4/groups/2524164/epics/118/issues?epic_iid=118&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/118/issues?epic_iid=118&id=2524164&page=2&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=Rh3CYyjSYLj6cxKbX.7obaZROd3Xnpr2WbA9PLe4e1A-1747940889513-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-26-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-c",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"14b3cc460e5e032aa77cf4a365302884\",\"version\":\"1\"}",
    "x-next-page": "2",
    "x-page": "1",
    "x-per-page": "20",
    "x-prev-page": "",
    "x-request-id": "14b3cc460e5e032aa77cf4a365302884",
    "x-runtime": "0.447284",
    "x-total": "27",
    "x-total-pages": "2"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/118/issues"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/118/issues",
  "_decoded_content": [
    {
      "id": 109104017,
      "iid": 3524,
      "project_id": 7603319,
      "title": "Capture and store dbt artefacts following job run",
      "description": "As with Singer STATE messages (containing bookmarks in json form), dbt also produces json artefacts that can be used to track [model build times](https://discourse.getdbt.com/t/analyzing-fishtowns-dbt-project-performance-with-artifacts/2214) and to [defer execution](https://docs.getdbt.com/reference/node-selection/defer) of models in another namespace (speeding up development and CI/CD use cases). Meltano can help facilitate these use cases by capturing dbt artefacts and making them available (either via the new `meltano state` command, or during invocations of dbt as with Singer state), handling a common pain point for users self-hosting dbt.\n\ndbt generates [4 json artefacts](https://docs.getdbt.com/reference/artifacts/dbt-artifacts) (schemas available), with [`manifest.json`](https://docs.getdbt.com/reference/artifacts/manifest-json) and [`run_results.json`](https://docs.getdbt.com/reference/artifacts/run-results-json) being the most useful. `manifest.json` is a complete representation of a dbt project at the point of execution, used by the `--defer --state` commands to defer execution of unchanged models to another namespace (typically prod) during development and CI/CD. `run_results.json` is used for tracking operational metrics such as model build times after a run has completed.\n\nExamples:\n\n```bash\n# invoke dbt run, deferring to most recent production state files\n# for this to work, Meltano would have to be able to fetch state from a different Meltano environment\n# (i.e. a different job-id prefix) to a location on disk before invoking dbt\nmeltano invoke dbt run --select [...] --defer --state \".meltano/transformer/state/prod:$MELTANO_JOB_ID_WITHOUT_ENV/\"\n\n# alternative syntax, with template rendering by Meltano before invocation\nmeltano invoke dbt run --select [...] --defer --state \"{{ get_state_dir('prod') }}\"\n```",
      "state": "closed",
      "created_at": "2022-05-25T13:37:03.161Z",
      "updated_at": "2022-05-30T13:41:24.956Z",
      "closed_at": "2022-05-30T13:41:24.929Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3524",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3524",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3524/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3524/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3524",
        "relative": "#3524",
        "full": "meltano/meltano#3524"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1390721,
      "relative_position": -15390
    },
    {
      "id": 108758044,
      "iid": 3505,
      "project_id": 7603319,
      "title": "New family of commands for catalog and profiler artifacts - 'meltano catalog' or 'meltano snapshot' or similar",
      "description": "The use case here is for users to create artifacts detailing the data structures and data profiling outputs associated with their project. Over time, Meltano could expand the ways in which this data is used.\n\nToday, we have much of this data in `.meltano` internal artifacts (such as the singer catalog files) but we don't have any well defined means of working with these artifacts, we don't provide a wholistic diff/compare options, and we don't have a single place where a user could publish or search their schema definitions (for instance)\n\n## Schema catalog change detection\n\n```\nmeltano catalog snapshot create all # Create artifacts for all taps' schema and for known dbt models' schemas\nmeltano catalog snapshot update all # Update artifacts\nmeltano catalog snapshot diff tap-gitlab --from=<old-path> --to=<new-path> # Print a diff of just the tap-gitlab artifacts\n```\n\nThe user could presumably choose whether they want these artifacts committed to their repo or not.\n\n## Community plugin first approach\n\nThis is a big undertaking and would likely need to go through multiple iterations before a stable interface is landed on.\n\nTo allow faster iteration, this could in theory be built first as a `utility` plugin and published to the hub.\n\n```\nmeltano add utility meltano-catalog-util\nmeltano run meltano-catalog-util:create all\nmeltano run meltano-catalog-util:update all\nmeltano run meltano-catalog-util:diff tap-gitlab\n```",
      "state": "closed",
      "created_at": "2022-05-18T15:46:29.145Z",
      "updated_at": "2022-05-30T13:39:23.809Z",
      "closed_at": "2022-05-30T13:39:23.789Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351603,
        "iid": 212,
        "group_id": 2524164,
        "title": "Q4-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:40:00.762Z",
        "updated_at": "2021-11-29T21:40:00.762Z",
        "due_date": "2022-12-31",
        "start_date": "2022-10-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/212"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3505",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3505",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3505/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3505/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3505",
        "relative": "#3505",
        "full": "meltano/meltano#3505"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1384134,
      "relative_position": -14877
    },
    {
      "id": 108312695,
      "iid": 3475,
      "project_id": 7603319,
      "title": "Support Okta for OAuth in Meltano UI",
      "description": "Meltano UI currently supports OAuth with Google and GitLab but currently has no Okta support. We've received a few questions about this on [Slack](https://meltano.slack.com/archives/CFG3C3D1Q/p1652185611472819).",
      "state": "closed",
      "created_at": "2022-05-10T13:48:53.384Z",
      "updated_at": "2022-05-30T13:36:36.521Z",
      "closed_at": "2022-05-30T13:36:36.506Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 394049,
        "username": "afolson",
        "public_email": "",
        "name": "Amanda Folson",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/394049/avatar.png",
        "web_url": "https://gitlab.com/afolson"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3475",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3475",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3475/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3475/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3475",
        "relative": "#3475",
        "full": "meltano/meltano#3475"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1352733,
      "relative_position": -14364
    },
    {
      "id": 108154859,
      "iid": 3465,
      "project_id": 7603319,
      "title": "Possibly rename Environments to something else",
      "description": "As per #3463:\n\n> We have an opportunity with 2.0 to have a cleaner break with legacy terminology that may not point us towards the enhanced vision.\n\nWith broad support amongst the tools in the data ecosystem for receiving configuration overrides at runtime via environment variables, the ability for Meltano to both source and seed environment variables is a key mechanism we rely on for integrating and orchestrating standalone tools into a cohesive Data Platform. However, having our own feature called an Environment that is not directly analogous to the terminal environment of its namesake (not all values in a Meltano Environment are consumed by plugins as environment variables) we introduce ambiguity into our domain. This causes user confusion and necessitates verbosity in docs and comments to disambiguate which environment is meant.\n\nChanging to something like `Workspaces` allows us to talk about \"environment variables seeded into a plugins Workspace\" rather than \"environment variables seeded into a plugins Meltano Environment\".\n\nThis issue is somewhat inspired by Hashicorps' feature rename in Terraform a while back. [As of Terraform v0.10](https://www.terraform.io/language/state/workspaces) the feature of supporting multiple segregated states in a single configuration directory previously called \"environments\" became \"workspaces\". Hashicorp cite \"feedback about confusion caused by the overloading of the word \"environment\" both within Terraform itself and within organizations that use Terraform\" for the reason they switched. This applies equally to Meltano and our audience.\n\nWorkspaces are used in a similar way in at least on other product in our space - Quantumics - for segregating a project into related use-cases (rather than related config, as in our case):\n\n![Screenshot_2022-05-06_at_16.29.46](/uploads/d14d7b48bcd17e7e2c7c4a8f62f47c0c/Screenshot_2022-05-06_at_16.29.46.png)",
      "state": "closed",
      "created_at": "2022-05-06T15:38:02.183Z",
      "updated_at": "2022-05-31T18:51:28.277Z",
      "closed_at": "2022-05-31T18:51:28.210Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": true,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3465",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3465",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3465/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3465/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3465",
        "relative": "#3465",
        "full": "meltano/meltano#3465"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1345993,
      "relative_position": -13851
    },
    {
      "id": 108106191,
      "iid": 3463,
      "project_id": 7603319,
      "title": "Possibly rename plugins to something else",
      "description": "We have some \"legacy\" terminology that may not point us towards our enhanced vision.\n\nPlugins in particular is one that we could replace with something more descriptive. In the framing of an OS, it may not \n\nTo help frame this a bit, it's useful to consider instances where `plugins` is used:\n\n* [MeltanoHub](https://hub.meltano.com/) - `If you're already using Meltano, learn more about the plugins it supports out of the box: `\n* [Meltano Plugins page](https://docs.meltano.com/concepts/plugins)\n  *  `Meltano takes a modular approach to data engineering in general and EL(T) in particular, where your project and pipelines are composed of plugins of different types`\n  * `In order to use a given package as a plugin in a project, assuming it meets the requirements of the plugin type in question, Meltano needs to know:`\n* [Meltano Project page](https://docs.meltano.com/concepts/project)\n  * `Your project\u2019s plugins, typically added to your project using meltano add, are defined under the plugins property, inside an array named after the plugin type (e.g. extractors, loaders).`\n\nSome options that come to mind:\n\n* component\n* application (app)\n* service\n* module\n* element\n* segment\n\n\nProbably not a good choice:\n* package\n\nIf we make a go decision on this, there'd be a lot of documentation and copy to update, as well as code potentially - we'd probably want to accept a new key in lieu of `plugins`.",
      "state": "closed",
      "created_at": "2022-05-05T19:09:58.671Z",
      "updated_at": "2022-05-31T18:51:21.417Z",
      "closed_at": "2022-05-31T18:51:21.397Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [
        {
          "id": 1942272,
          "username": "tayloramurphy",
          "public_email": "",
          "name": "Taylor A Murphy",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
          "web_url": "https://gitlab.com/tayloramurphy"
        }
      ],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "user_notes_count": 9,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": true,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3463",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3463",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3463/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3463/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3463",
        "relative": "#3463",
        "full": "meltano/meltano#3463"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1343703,
      "relative_position": -13338
    },
    {
      "id": 107078338,
      "iid": 3433,
      "project_id": 7603319,
      "title": "New paradigm for bundling plugin dependencies and `files` bundles",
      "description": "Today:\n\n\n```yml\ntransformers:\n  - name: dbt\n    namespace: dbt\n    docs: https://docs.meltano.com/guide/transformation\n    repo: https://github.com/dbt-labs/dbt-core\n    pip_url: dbt-core~=1.0.0 dbt-postgres~=1.0.0 dbt-redshift~=1.0.0 dbt-snowflake~=1.0.0 dbt-bigquery~=1.0.0\n    settings:\n    # ...\norchestrators:\n  - name: airflow\n    namespace: airflow\n    docs: https://docs.meltano.com/guide/orchestration\n    repo: https://github.com/apache/airflow\n    pip_url: 'apache-airflow==2.1.2 --constraint https://raw.githubusercontent.com/apache/airflow/constraints-2.1.2/constraints-${MELTANO__PYTHON_VERSION}.txt'\n    settings:\n    # ...\n# ...\nfiles:\n  - name: airflow\n    namespace: airflow # << auto-installed with `dbt` due to matching `namespace`\n    repo: https://gitlab.com/meltano/files-airflow\n    pip_url: git+https://gitlab.com/meltano/files-airflow.git\n    update:\n      orchestrate/dags/meltano.py: true\n  - name: dbt\n    namespace: dbt # << auto-installed with `dbt` due to matching `namespace`\n    repo: https://gitlab.com/meltano/files-dbt\n    pip_url: git+https://gitlab.com/meltano/files-dbt.git@config-version-2\n```\n\n## The challenge\n\nThe number of collisions on namespace will potentially skyrocket one we complete #3283+. We can no longer reasonably scan all the plugins in the hub or in discovery.yml to identify matching namespaces and then have confidence that the matching plugins should be installed together. Instead, we need a more explicit mapping of files resources to the plugins that need those resources.\n\n## Proposed refactor:\n\n- The `namespace` field can be removed (optionally auto-calculated internally per #3374+).\n- Files resources are now defined inline with the plugins themselves.\n\n```yml\ntransformers:\n  - name: dbt\n    docs: https://docs.meltano.com/guide/transformation\n    repo: https://github.com/dbt-labs/dbt-core\n    pip_url: dbt-core~=1.0.0 dbt-postgres~=1.0.0 dbt-redshift~=1.0.0 dbt-snowflake~=1.0.0 dbt-bigquery~=1.0.0\n    bundle: # or `depends_on:`\n      files:\n      - name: files-dbt  # Name might be optional, since the plugin has a name in its API definition.\n        # This is the API endpoint\n        ref: https://hub.meltano.com/meltano/api/v1/plugins/extractors/tap-zendesk--twilio-labs\norchestrators:\n  - name: airflow\n    docs: https://docs.meltano.com/guide/orchestration\n    repo: https://github.com/apache/airflow\n    pip_url: 'apache-airflow==2.1.2 --constraint https://raw.githubusercontent.com/apache/airflow/constraints-2.1.2/constraints-${MELTANO__PYTHON_VERSION}.txt'\n    bundle:\n      files:\n      - name: airflow-files\n        variant: meltanolabs\n    settings:\n    # ...\n```\n\nThe files needed for the repo would then be self-contained within the plugin definition and are self-sufficient for installing the plugin, without needing external plugin to be installed.\n\n## Moving to `copier`\n\nOur current paradigm does not facilitate supporting changes over time to the files (the \"day 2\" problem). A related proposal would be to #3432+, but that can be delivered separately from this change.\n\n## Standalone `files` plugins\n\nWe can still support standalone `files` plugins for use cases where it still makes sense to do so apart from auto-installed resources for a `utility`, `transformer`, or `orchestrator` plugin.\n\nHowever, we would not post separate definitions to the hub for those `files` plugins which are best combined with their particular plugin.",
      "state": "closed",
      "created_at": "2022-04-23T23:11:08.151Z",
      "updated_at": "2022-05-30T13:31:54.443Z",
      "closed_at": "2022-05-30T13:31:54.422Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Office Hours::Discussed",
        "kind::Feature",
        "v2.0",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351599,
        "iid": 209,
        "group_id": 2524164,
        "title": "May 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:38:23.665Z",
        "updated_at": "2021-11-29T21:38:23.665Z",
        "due_date": "2022-05-31",
        "start_date": "2022-05-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/209"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 18,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3433",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 8,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3433",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3433/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3433/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3433",
        "relative": "#3433",
        "full": "meltano/meltano#3433"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": {
        "id": 56416,
        "iid": 56,
        "sequence": 3,
        "group_id": 2524164,
        "title": null,
        "description": null,
        "state": 3,
        "created_at": "2022-05-13T20:04:48.839Z",
        "updated_at": "2022-05-30T00:05:02.370Z",
        "start_date": "2022-05-23",
        "due_date": "2022-05-29",
        "web_url": "https://gitlab.com/groups/meltano/-/iterations/56416"
      },
      "health_status": null,
      "epic_issue_id": 1315868,
      "relative_position": -12825
    },
    {
      "id": 107045007,
      "iid": 3432,
      "project_id": 7603319,
      "title": "Consider `copier` support for `files` bundles",
      "description": "Copier is a tool written in Python - primarily for scaffolding use cases like `cookiecutter` - but it gives more control over the \"day 2\" problem of maintaining code that's already been installed by the template. I do not know if it is a good fit for the files use case, but it would in theory give more control over the following:\n\n- What to do if a file already exists.\n- How to \"update\" a file if the template is re-applied.\n- How to prompt for values or decisions (if needed).\n\nhttps://github.com/copier-org/copier\n\n> Templates have these goals:\n> \n> - Code scaffolding. Help consumers have a working source code tree as quick as possible. All templates allow scaffolding.\n> - Code lifecycle management. When the template evolves, let consumers update their projects. Not all templates allow updating.",
      "state": "closed",
      "created_at": "2022-04-22T18:16:13.261Z",
      "updated_at": "2022-05-30T13:31:47.892Z",
      "closed_at": "2022-05-30T13:31:47.869Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351603,
        "iid": 212,
        "group_id": 2524164,
        "title": "Q4-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:40:00.762Z",
        "updated_at": "2021-11-29T21:40:00.762Z",
        "due_date": "2022-12-31",
        "start_date": "2022-10-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/212"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3432",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3432",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3432/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3432/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3432",
        "relative": "#3432",
        "full": "meltano/meltano#3432"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1312329,
      "relative_position": -12312
    },
    {
      "id": 106127428,
      "iid": 3381,
      "project_id": 7603319,
      "title": "Support file-like object based StreamReader/Writer pairs for meltano run",
      "description": "Chatting a bit with @aaronsteers we've kicked around the idea of adding support for File-like objects as the underlying communication mechanism for the ExtractLoadBlock in `meltano run` a few times, and wanted to finally get it down on paper. The basic idea is that, rather than chaining stdio of tap, mappers, targets together using `asyncio.subprocess.PIPE` directly, we actually offer an option to run with a custom interface that reads and feeds stdin/stdout/stderr as usual, but behind the scene's is using a file like object. \n\nBasically, we would capture a tap's stdout, and rather than piping it to the next IOBlock directly, we'd write that to a tmp file on disk. Down stream, a target's stdin would be in turn fed by tailing the tmp file. Neither the tap nor the target would actually be aware of this, meltano would handle the abstraction and details.\n\nThis approach has obvious throughput/performance and durability issues, so _by no means advocating for this to be the default mode_, but providing it as a runtime option opens up some interesting possibilities. Since named pipe's basically look and act like a file, we also unlock some additional \"interesting\" scenarios for free:\n\n- File backed writes would effectively function as a write buffer, handy for scenarios where targets are slower and memory is a constraint. \n- A runtime argument to persist the file even after a run completes would also be very useful for troubleshooting. Particularly in scenarios where users want to capture raw stdout/stderr entries to diagnose issue (@vischous uses this pattern successfully a lot for troubleshooting)\n- Named pipes could provide cross container pipes, that would presumably be more performant than a file-based one. \n- Named pipes could enable primitive cross network writes (probably a terrible idea, but, an idea!).\n- Could also serve as a way to implement a primitive single-writer, multi-reader pattern (an even more terrible idea, but, an idea!). \n\nI think importantly, it also lays the groundwork for \"real\" network-based pipes, since an implementation would most likely use the same interface.",
      "state": "closed",
      "created_at": "2022-04-05T19:53:47.501Z",
      "updated_at": "2022-05-30T13:26:08.677Z",
      "closed_at": "2022-05-30T13:26:08.660Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Needs Refinement",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3381",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3381",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3381/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3381/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3381",
        "relative": "#3381",
        "full": "meltano/meltano#3381"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1289239,
      "relative_position": -11286
    },
    {
      "id": 105971723,
      "iid": 3371,
      "project_id": 7603319,
      "title": "Consider a gentle nudge to switch variants",
      "description": "I'm creating this issue just to keep track of this insight I had from obvserving how a handoff from one maintainer to a new maintainer occurs today in OctoPrint. I thought this messaging was particularly helpful and wanted to share as a potential option for us to do something similar as well.\n\nThe messaging here is basically a warning in the UI: the plugin has switched maintainers (\"variants\" in our lingo) with a link to docs on how to migrate to the new maintainer.\n\n<details><summary>Click to expand</summary>\n\n![image](/uploads/eddc78fc4d55f16f3fad6e31eafe2bf0/image.png)\n\n</details>\n\nContext:\n\nOctoPrint is a 3D printing platform which has hundreds of open source plugins, running on python. In the same sense that Meltano is the open source DataOps OS, they are the open source 3D printing OS. (They also run on python and have an [extensive library](https://plugins.octoprint.org/) of 3rd party open source plugins.)\n\nThere are many parallels, I think, and this one seemed helpful to log.",
      "state": "closed",
      "created_at": "2022-04-03T06:07:03.909Z",
      "updated_at": "2022-05-30T13:25:04.633Z",
      "closed_at": "2022-05-30T13:25:04.613Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "urgency::low",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3371",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3371",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3371/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3371/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3371",
        "relative": "#3371",
        "full": "meltano/meltano#3371"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1267531,
      "relative_position": -10773
    },
    {
      "id": 105780593,
      "iid": 3360,
      "project_id": 7603319,
      "title": "Evaluate support of DuckDB: `target-duckdb` loader, `dbt-duckdb` transformer, and `duckdb-local` utility service",
      "description": "DuckDB is installable via pip and could make a good local transformation alternative to SQLite. \n\nUnlike SQLite, DuckDB is tuned for OLAP use cases.\n\nFrom https://duckdb.org/:\n\n![image](/uploads/8161337dd6ea4fd1ef6109828ae568f6/image.png)\n\nProbably ~\"urgency::low\", but could make a nice CI-contained end-to-end local warehouse.\n\n- Loader `target-duckdb` does not exist, but parquet and CSV are supported, so one of those targets might work as a bridge.\n- DBT transform `dbt-duckdb` does exist: https://pypi.org/project/dbt-duckdb/\n- Utility plugin `duckdb-local` could be created as a simple pip installable plugin: https://duckdb.org/docs/installation/",
      "state": "closed",
      "created_at": "2022-03-30T19:22:10.315Z",
      "updated_at": "2022-05-30T13:24:03.350Z",
      "closed_at": "2022-05-30T13:24:03.326Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3360",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3360",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3360/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3360/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3360",
        "relative": "#3360",
        "full": "meltano/meltano#3360"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1237419,
      "relative_position": -9747
    },
    {
      "id": 105632412,
      "iid": 3353,
      "project_id": 7603319,
      "title": "Add `connection` as first-class construct in `meltano.yml`",
      "description": "### Problem to solve\n\nAs a user of Meltano, I would like a place in `meltano.yml` to specify `Connection` config objects that can be referenced and reused in all of the plugins I add to my Meltano Project.\n\n### Target audience\n\nEngineers/developers using Meltano with tools that themselves have native constructs for connections, such as dbt, Airflow, Great Expectations and Superset.\n\n### Further details\n\nConnections are a ubiquitous construct across the tools of the data platform, and yet in Meltano these details must still be expressed individually for each plugin as plain config or environment variables. This is not only extra work for users of Meltano, it also adds unnecessary human action in the integration path between plugins accessing the same resources (databases, warehouses, SaaS endpoints etc.).\n\nFor example, in the case of Snowflake:\n\n- Official Snowflake Python [Connector parameters](https://docs.snowflake.com/en/user-guide/python-connector-api.html#label-snowflake-connector-methods) (used under the hood by many python-based tools)\n- Airflow Snowflake [Connection](https://airflow.apache.org/docs/apache-airflow-providers-snowflake/stable/connections/snowflake.html)\n- dbt Snowflake [Profile](https://docs.getdbt.com/reference/warehouse-profiles/snowflake-profile)\n- Superset Snowflake Datasource [connection string](https://superset.apache.org/docs/databases/snowflake)\n- Great Expectations Datasource [connection string](https://docs.greatexpectations.io/docs/guides/connecting_to_your_data/database/snowflake/)\n\nFrom the above it is clear that configuration is commonly expressed in two forms, with tools supporting either or both formats (examples from Airflows [connection docs](https://airflow.apache.org/docs/apache-airflow/stable/howto/connection.html#exporting-connections-from-the-cli)):\n\n- yaml/json:\n\n\t```yaml\n\tsnowflake_example_connection:\n\t  conn_type: snowflake\n\t  login: user\n\t  password: password\n\t  host: snowflake.example\n\t  schema: db-schema\n\t  extra:\n\t    account: account\n\t    database: snow-db\n\t    region: us-east\n\t    warehouse: snow-warehouse\n\t```\n\n- URI\n\n\t```\n\tsnowflake://user:password@snowflake.example/db-schema?account=account&database=snow-db&region=us-east&warehouse=snow-warehouse\n\t```\n\nWhilst it is common for tools to support the specification of a 'default' connection, the richness of User/Role/Group functionalities in databases and warehouses for controlling access and for cost management (e.g. monitoring Snowflake credit consumption based on per-tool or per-pipeline User/Role definitions) mean that most tools will define or consume several connections based on the execution context. This means a single Project will typically have many more connection definitions than base warehouse and database resources.\n\nInterestingly we _already_ handle connections via a [`ConnectionService`](https://gitlab.com/meltano/meltano/-/blob/1baac4f6780ca761a25ba69632116ad1b7493ba8/src/meltano/core/connection_service.py#L15) in `meltano.core` (for use in the older Model functionality), however (as noted in the [comments](https://gitlab.com/meltano/meltano/-/blob/1baac4f6780ca761a25ba69632116ad1b7493ba8/src/meltano/core/connection_service.py#L39)) this has too detailed an understanding of the expected format of each connection type.\n\n### Proposal\n\nExpected outcomes:\n\n- Allow users to specify and manage connection information via the CLI (including a default connection per type), _without_ the need to explicitly reference that information when adding new compatible plugins.\n- Allow users to specify a named connection on a per-plugin and per-run basis, or override individual settings from the default connection.\n\nTo achieve these two outcomes, we could:\n\n1. Support connection definitions in `discovery.yml`.\n\n```yaml\n# discovery.yaml\nconnections:\n  - name: snowflake\n    variant: meltano # for cases where there really is a wide variety in ways to configure a particular system, multiple variants could possibly be used?\n    dialect: snowflake # as already exists for loaders https://gitlab.com/meltano/meltano/-/blob/master/schema/meltano.schema.json#L421\n    settings:\n      # supporting all the values listed in the Snowflake docs,\n      # with descriptions and kinds (omitted for brevity)\n      # https://docs.snowflake.com/en/user-guide/python-connector-api.html#connect\n      - name: user\n      - name: password\n      - name: host\n      - name: port\n      - name: database\n      - name: account\n      - name: warehouse\n      ...\n  - name: postgres\n    variant: meltano\n    dialect: postgres\n    settings:\n      # supporting all the values listed in the Postgres/sqlalchemy docs,\n      # with descriptions and kinds (omitted for brevity)\n      - name: user\n      - name: password\n      - name: host\n      - name: port\n      - name: database\n```\n\n2. Support configuration of connections, including a `default` per connection dialect. The default could be implied I guess, in cases with only one connection?\n\n```yaml\n# meltano.yml\nversion: 1\nplugins:\n  connections:\n  - name: postgres\n    default: true\n    config:\n      user: meltano\n      password: ${POSTGRES_MELTANO_PASSWORD}\n      host: db.example.com\n      port: 5432\n      database: meltano\n\n  - name: snowflake\n    default: true\n    config:\n      user: \"MELTANO\"\n      password: ${SNOWFLAKE_MELTANO_PASSWORD}\n      host: snowflake.example\n      account: account_name\n      database: snow-db\n      ...\n  - name: snowflake-dbt\n    inherits_from: snowflake\n    config:\n      user: \"DBT\"\n      password: ${SNOWFLAKE_DBT_PASSWORD}\n      # custom settings still supported as normal\n      wacky_auth_setting: smoke_signals  # becomes CONNECTION_SNOWFLAKE_WACKY_AUTH_SETTING\n  \n  extractors:\n  - name: tap-postgres\n    \n  loaders:\n  - name: target-snowflake\n\n  transformers:\n  - name: dbt-snowflake\n```\n\n3. Support the injection of connection details, _without_ requiring the user to specify them explicitly via refs, using either `env_aliases`, `aliases` or the default `value` field in `discovery.yml` with env var of the form `CONNECTION_<dialect>_<setting name>`. E.g.:\n\n```yaml\n# discovery.yml\nextractors:\n  - name: tap-postgres\n    label: PostgreSQL\n    description: PostgreSQL database extractor\n    namespace: tap_postgres\n    variants:\n    - name: transferwise\n      docs: https://hub.meltano.com/extractors/postgres.html\n      repo: https://github.com/transferwise/pipelinewise-tap-postgres\n      pip_url: pipelinewise-tap-postgres\n      capabilities:\n        - catalog\n        - discover\n        - state\n      settings_group_validation:\n        - ['host', 'port', 'user', 'password', 'dbname']\n      settings:\n        - name: host\n          value: localhost\n          description: PostgreSQL host\n          env_aliases: [CONNECTION_POSTGRES_HOST]\n        - name: port\n          kind: integer\n          value: 5432\n          description: PostgreSQL port\n          env_aliases: [CONNECTION_POSTGRES_PORT]\n        - name: user\n          description: PostgreSQL user\n          env_aliases: [CONNECTION_POSTGRES_USER]\n        - name: password\n          kind: password\n          description: PostgreSQL password\n          env_aliases: [CONNECTION_POSTGRES_PASSWORD]\n        - name: dbname\n          description: PostgreSQL database name\n          env_aliases: [CONNECTION_POSTGRES_DATABASE]\n        ...\n\nloaders:\n  - name: target-snowflake\n    label: Snowflake\n    description: Snowflake database loader\n    namespace: target_snowflake\n    dialect: snowflake  # I did not know this already existed \ud83d\ude05\n    target_schema: $TARGET_SNOWFLAKE_SCHEMA\n    variants:\n      - name: transferwise\n        docs: https://hub.meltano.com/loaders/snowflake.html\n        repo: https://github.com/transferwise/pipelinewise-target-snowflake\n        pip_url: pipelinewise-target-snowflake\n        settings_group_validation:\n          - ['account', 'dbname', 'user', 'password', 'warehouse', 'file_format', 'default_target_schema']\n        settings:\n          - name: account\n            label: Account\n            # previous values left for backwards compatibility\n            env_aliases: [SF_ACCOUNT, CONNECTION_SNOWFLAKE_ACCOUNT]\n            description: Snowflake account name (i.e. rtXXXXX.eu-central-1)\n            placeholder: E.g. rtXXXXX.eu-central-1\n          - name: dbname\n            label: DB Name\n            aliases: [database]\n            # previous values left for backwards compatibility\n            env_aliases: [TARGET_SNOWFLAKE_DATABASE, SF_DATABASE, CONNECTION_SNOWFLAKE_DATABASE] \n            description: Snowflake Database name]\n          ...\n```\n\n```yaml\n# dbt profiles\nconfig-version: 2\nversion: 2\nconfig:\n  send_anonymous_usage_stats: True\n  use_colors: True\nmeltano:\n  target: snowflake\n  outputs:\n    snowflake:\n      type: snowflake\n      threads: 4\n      account: \"{{ env_var('CONNECTION_SNOWFLAKE_ACCOUNT') }}\"\n      user: \"{{ env_var('CONNECTION_SNOWFLAKE_USER') }}\"\n      password: \"{{ env_var('CONNECTION_SNOWFLAKE_PASSWORD') }}\"\n      role: \"{{ env_var('CONNECTION_SNOWFLAKE_ROLE') }}\"\n      database: \"{{ env_var('CONNECTION_SNOWFLAKE_DATABASE') }}\"\n      warehouse: \"{{ env_var('CONNECTION_SNOWFLAKE_WAREHOUSE') }}\"\n      schema: \"DEFAULT\"\n```\n\n4. Support the selection of a named connection at the plugin level, or at `run` time. I think the easiest way to control which connection populates the `CONNECTION_*` for each plugins `Context` is using plugin extras:\n\n```yaml\n# meltano.yml\nenvironments:\n- name: dev\n  config:\n    plugins:\n      transformers:\n      - name: dbt-snowflake\n        config:\n          ...\n        # new `connection` plugin extra\n        connection_name: snowflake-dbt # this uses the `snowflake-dbt` connection from 2. above to populate the `CONNECTION_SNOWFLAKE_*` env vars for this plugin in this environment\n```\n\nPlugin extras can also be set at runtime using environment variables (as per the [docs](https://docs.meltano.com/guide/configuration#plugin-extras)):\n\n`TARGET_SNOWFLAKE__CONNECTION_NAME=snowflake-dbt meltano run tap-gitlab target-snowflake dbt-snowflake:run`\n\nAlso users can always revert back to configuring the individual settings manually in the plugin config or via an environment:\n\n```yaml\n# meltano.yml\nenvironments:\n- name: dev\n  config:\n    plugins:\n      loaders:\n      - name: target-snowflake\n        config:\n          user: \"MY_CUSTOM_USER\" # overrides CONNECTION_SNOWFLAKE_USER from the default connection in this environment\n```\n\n### What does success look like, and how can we measure that?\n\n- New users of Meltano are able to get started quickly by specifying default connections once (during onboarding) knowing that any compatible plugins added thereafter will reuse those connections.\n- Power users retain fine-grained control over which connections are used by which plugin per environment or at runtime.\n  - e.g. ```TAP_GITLAB__CONNECTION_NAME=gitlab_dev TARGET_SNOWFLAKE__CONNECTION_NAME=snowflake_ken DBT__CONNECTION_NAME=snowflake_ken meltano run tap-gitlab target-snowflake dbt:run``` (not particularly pretty, but the env vars could also go in a `--environment`).\n- Mapping of Meltano Connection to plugin-specific setting values is part of the _plugin definition_, stored as part of `discovery.yml`.\n- Plugins without `connection` support still work with existing settings and environment variables, 'as-is'.\n\n### Reasons Not to Build\n\n- ~~Not particularly DRY; many connections will reference the same warehouse or database with different User/Group/Role. This might be solved with connection inheritance or resource referencing in future iterations.~~ Connections expressed as plugins immediately support inheritance, solving the DRY issue.\n\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references",
      "state": "closed",
      "created_at": "2022-03-28T16:40:45.164Z",
      "updated_at": "2022-05-30T13:23:20.329Z",
      "closed_at": "2022-05-30T13:23:20.304Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 8,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3353",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3353",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3353/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3353/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3353",
        "relative": "#3353",
        "full": "meltano/meltano#3353"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1237420,
      "relative_position": -10260
    },
    {
      "id": 105311945,
      "iid": 3343,
      "project_id": 7603319,
      "title": "Top-level 'warehouse' definition in `meltano.yml`.",
      "description": "\n## Proposal\n\n1. Allow 'warehouses' to be defined - either under 'plugins' or as a peer to 'plugins'.\n   1. If we go the route of warehouses being a type of plugin, these would probably start off as \"dummy\" plugins, which primarily lend a paradigm for defining the warehouse definition once, as a shared resource for other plugins.\n   1. If we go the route of having `warehouses` as peer to `plugins` and `environments`, we lose some of the inheritance and override capabilities that plugins have automatically.\n2. Each environment should have exactly one defined `warehouse:` or `primary_warehouse:` entry.\n   1. If a warehouse is not defined, then calls to warehouse-related config should fail.\n3. We can inject the environment's warehouse settings into plugin's defaults.\n\n## Warehouses as 'passthrough' settings buckets\n\nIn v1, a warehouse plugin would pretty much be a passthrough construct:\n\n1. They can all be `--custom` in MVP, meaning the developer can define basically arbitrary strings as 'settings' and we don't need to centrally manage the ontology of each adapter.\n2. Any number of settings can be configured or customized according to the user's needs.\n3. We'd probably standardize on a few recommended best practice settings names: `database`, `schema`, and perhaps `adapter_type`.\n\n## Warehouses as 'proper' plugins\n\nOver time, variants/forks of a warehouse definition could get 'smarter' and more capable, for instance installing the snowflake CLI.\n\nNote:\n\n- There's probably a counter-argument that `snowflake-cli` would make a better `utility` plugin, rather than a being part of the top-level `warehouse`.\n\n## Warehouses as 'plugins'\n\nThe below sample code is derived from the meltano squared repo. This assumes we have the warehouse itself as a custom plugin, able to be defined at the top level under \"plugins\", with settings overriden.\n\n```yml\nversion: 1\nplugins:\n  warehouses:\n  - name: snowflake\n    config:\n      account: meltano\n      user: dbt_loader\n      raw_db: raw\n      raw_schema: raw\n      transform_db: marts\n      transform_schema: default\n      compute_warehouse: loader_wh\n  - name: athena\n    config: [/*...*/]\n\n  loaders:\n  - name: target-snowflake\n    variant: transferwise\n    pip_url: pipelinewise-target-snowflake\n    config:\n      account: ${WAREHOUSE_ACCOUNT}\n      file_format: CSV\n      add_metadata_columns: true\n      password: ${SNOWFLAKE_PASSWORD}\n  - name: target-snowflake-github-search\n    inherit_from: target-snowflake\n    config:\n      default_target_schema: GITHUB_SEARCH\n\n  transformers:\n  - name: dbt-snowflake\n    pip_url: 'dbt-core~=1.0.0 dbt-snowflake~=1.0.0'\n    config:\n      target: snowflake\n      models: squared\n      sf_password: ${WAREHOUSE_PASSWORD}\n      sf_account: ${WAREHOUSE_ACCOUNT}\n      sf_user: ${WAREHOUSE_USER}\n      sf_role: ${WAREHOUSE_ROLE}\n      sf_database_raw: ${WAREHOUSE_RAW_DB}_${MELTANO_ENVIRONMENT}  # Renders as `raw_prod` in the prod environment\n      sf_database_prep: ${WAREHOUSE_TRANSFORM_DB}_${MELTANO_ENVIRONMENT}\n      sf_database_prod: ${WAREHOUSE_TRANSFORM_DB}_${MELTANO_ENVIRONMENT}\n      sf_warehouse: ${WAREHOUSE_COMPUTER_WAREHOUSE}\n    # ...\n\n  extractors:\n  # ... Normal taps defined here.\n  - name: tap-snowflake  # for reverse ETL\n    namespace: tap_snowflake\n    pip_url: git+https://github.com/pnadolny13/pipelinewise-tap-snowflake.git@add_role_support\n    executable: tap-snowflake\n    capabilities:\n    - properties\n    - discover\n    - state\n    config:\n      account: ${WAREHOUSE_ACCOUNT}\n      user: ${WAREHOUSE_USER}\n      password: ${WAREHOUSE_PASSWORD}\n\nenvironments:\n  - name: prod\n    primary_warehouse: snowflake\n    plugins:\n      warehouses:\n      - name: snowflake\n        config:\n\n```\n\n## Passthrough setting dialect\n\nIn the above, I'm borrowing existing paradigm from elsewhere in Meltano so that `${WAREHOUSE_<SETTING_NAME>}` would resolve to the equivalent of jinja psuedocode `${{ this.warehouse.get('setting_name') }}`. \n\nThis works well as long as each environment has a primary warehouse set, and assuming we don't need random access to arbitrary warehouse specs.\n\n(We can alternatively consider if we should build #3112+ first, in order to provide more expressiveness.)\n\n## Intelligent \"warehouse-aware\" defaults for other plugins\n\nIf a plugin developer knows they want to leverage some generic attribute from the warehouse spec, their default value can leverage the env var defaults which are sensible for that context. For instance, the `account` setting in `target-snowflake` could have a default value of `WAREHOUSE_ACCOUNT`.",
      "state": "closed",
      "created_at": "2022-03-22T21:18:25.711Z",
      "updated_at": "2022-05-30T10:29:33.614Z",
      "closed_at": "2022-05-30T10:29:33.598Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Configuration",
        "Office Hours::Discussed",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 12,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3343",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3343",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3343/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3343/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3343",
        "relative": "#3343",
        "full": "meltano/meltano#3343"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1225808,
      "relative_position": -9234
    },
    {
      "id": 104424263,
      "iid": 3323,
      "project_id": 7603319,
      "title": "Investigate supporting other container runtimes for `container_spec",
      "description": "From Florian\n\n>>>\nSince we don't wrap the docker cli, it might not be as easy to swap in other container run times unless they support the Docker API. So might be worth investigating how this works with containerd. At first glance, I can't tell if containerd has a legacy Docker compatible API (seems like older version may have). Containerd is grpc based so guessing there are already python bindings floating around we could leverage in the future.\n\nThe other one that pop'd up when we were chatting with the community last year about docker alternatives was Podman. Poking around a bit it does seem like Podman still has a docker compatible API (https://docs.podman.io/en/latest/\\_static/api.html?version=v4.0) so might be worth seeing if that just works or if requires additional config.\n\nJust flagging this because with the new Docker Desktop license change in full effect https://gitlab.com/meltano/meta/-/issues/174 might become a bit more tricky/important.\n>>>",
      "state": "closed",
      "created_at": "2022-03-08T21:23:43.886Z",
      "updated_at": "2022-05-30T10:27:04.292Z",
      "closed_at": "2022-05-30T10:27:04.271Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3323",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3323",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3323/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3323/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3323",
        "relative": "#3323",
        "full": "meltano/meltano#3323"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1171358,
      "relative_position": -8721
    },
    {
      "id": 103987084,
      "iid": 3302,
      "project_id": 7603319,
      "title": "Create a plan to bring REST API to parity with CLI",
      "description": "@pandemicsyn: based on a convo with @aaronsteers I'll focus on two topic areas:\n\n1. What (if any) immediate deficits do we have in the API that should be address.\n2. What would a v2 of the API look like, what decisions do we need to make, and how do we get there.",
      "state": "closed",
      "created_at": "2022-03-02T20:29:44.326Z",
      "updated_at": "2022-05-22T01:31:41.796Z",
      "closed_at": "2022-05-22T01:31:41.779Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Needs Refinement",
        "OKR: Managed Meltano Beta",
        "Roadmap",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351599,
        "iid": 209,
        "group_id": 2524164,
        "title": "May 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:38:23.665Z",
        "updated_at": "2021-11-29T21:38:23.665Z",
        "due_date": "2022-05-31",
        "start_date": "2022-05-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/209"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 26,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3302",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3302",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3302/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3302/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3302",
        "relative": "#3302",
        "full": "meltano/meltano#3302"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": {
        "id": 56415,
        "iid": 55,
        "sequence": 2,
        "group_id": 2524164,
        "title": null,
        "description": null,
        "state": 3,
        "created_at": "2022-05-13T20:04:48.838Z",
        "updated_at": "2022-05-23T00:05:02.513Z",
        "start_date": "2022-05-16",
        "due_date": "2022-05-22",
        "web_url": "https://gitlab.com/groups/meltano/-/iterations/56415"
      },
      "health_status": null,
      "epic_issue_id": 1159047,
      "relative_position": -7695
    },
    {
      "id": 102572563,
      "iid": 205,
      "project_id": 24722673,
      "title": "Defining acceptable levels of support for Meltano plugins",
      "description": "As discussed in the Leadership call today, we don't have a standard right now for what \"Meltano Support\" entails, or what levels of support (aka \"which checkboxes\") each plugin can/should reach before it's an acceptable minimum increment. Part of this discussion is necessarily going to need to cover the varying ways in which we promote and/or caveat the support we can provide.\n\n## Layers/types of support\n\n### What do we mean by minimal \"Meltano support\" for tool \"X\"?\n\nI think as a bare minimum, \"Meltano support\" means that you should be to \"install and run\" the tool. And further, if you are not able to install and/or run the tool, we'll _help you_ (aka \"support you\") in getting it working - in Slack and/or logged issues. This is consistent with how we run Airflow, Singer, SQLFluff, and dbt. Everyone on the team basically is ready to help support you if you get stuck. We'll sometimes refer to external docs for advanced use cases, but we will help at least with the initial \"getting started\" problems if you get stuck.\n\n### When can/should we \"integrate with\" tool \"X\" but not directly imply \"support\" for tool \"X\"\n\nFivetran and Dagster can easily be \"integrated with\" Meltano _today_ while not being in any way \"supported by\" Meltano. We have many users who are also Fivetran and Dagster users and they are able to integrate their Meltano projects with Fivetran and Dagster today. We don't require them to switch tools and we are intentionally open and accepting of those integration points. We could publish a how-to blog post on how we can be integrated with Fivetran and Dagster - and we could the next day add to the website that Meltano \"works with\" Fivetran and Dagster.\n\nNevertheless, if a new user is trying to get Dagster working and has never used Dagster before, we'll still direct them to explore Airflow because as of today, that's the only tool we can officially \"support\". Similarly, if a user comes to Meltano asking how to setup their Fivetran account, we'll redirect them to the Fivetran Slack and/or we'll politely suggest alternatives to Fivetran which we can directly support them with.\n\n### External \"integration points\" that clearly do not suggest Meltano support\n\nMany users have `awscli` as a custom Meltano plugin and we could certainly add this as an installable plugin on the hub. Doing so doesn't mean they can setup their AWS account with Meltano, nor does it imply Meltano is going to manage their S3 buckets for them. Those integration points are helpful to users that have AWS resources managed external to Meltano, but in supporting an `awscli` helper tool, Meltano would not be suggesting that users are going to get help creating VPCs, private subnets, load balancers, and S3 buckets.\n\nFivetran integration may be similar to this - we may want to support an integration point where users can install a Fivetran CLI and/or we may have guidance on how to add a Fivetran Airflow operator into their DAG (https://github.com/fivetran/airflow-provider-fivetran) - but this doesn't imply that Fivetran is in any way \"supported\" by Meltano, nor is their Fivetran EL \"part of their Meltano project\".\n\n### Proposal\n\nAs we explore adding different plugin types, let's be very explicit and careful with these types of support:\n\n1. Installable but not supported\n   - Dagster is a great example. We could tomorrow at it as \"installable\" to `discovery.yml` but that would not imply or give any support.\n   - Importantly, we've made a call to _not_ add Dagster in that \"installable but not supported\" capacity. We should try to provide guidance on why and when this is okay, versus when not.\n   - Similarly, we waited to support `Great Expectations` until we had a path to support \"validators\". We could have just added it as a pip_url but our goal was to have \"testing\" as a native support paradigm.\n2. Supported external integrations\n   - This category means we \"support\" you integrating your Meltano project with the tool, but your Meltano project does not contain or manage that tool.\n2. Supported external integrations\n   - This category means we \"support\" you integrating your Meltano project with the tool, but your Meltano project does not contain or manage that tool.\n3. Supported project-level plugins (DevOps-compatible)\n   - The tool meets these criteria:\n     1. You can manage it and create/iterate on resources within your project.\n     2. Meltano supports you doing so, meaning we'll help if you get stuck and we'll create resources to aid in the new user experience.\n     3. The tool renders its artifacts into the project directory, such that the tool's dev lifecycle is able to participate in the DevOps and CI/CD vision.\n        - Standard tests for \"DevOps compatibility\" are: (1) whether changes can be reviewed in a PR/MR, (2) does the tool support automated deployment, and (3) does the tool support parametrized deployments.\n4. Supported project-level plugins which are _not_ DevOps compatible\n   - We don't have any tools in this categorization as of yet. We are considering adding Superset and Lightdash which have partial DevOps support; these meet some but not all tests for DevOps compatibility described above.\n   - The impact of not being DevOps compatible is greatest the further up the dependency tree the tool is located. \n   - Since BI is generally the last step in the dependency tree, the impact downstream is minimal/non-existent. Conversely, for the EL cycle, the impact of an EL tool not supporting DevOps reviews/deployments is greater, since virtually everything in the project relies on EL changes that will be outside of the Meltano project code review cycle.\n\n<!-- Labels to add for triaging -->",
      "state": "closed",
      "created_at": "2022-02-16T20:39:32.137Z",
      "updated_at": "2022-05-30T22:54:32.694Z",
      "closed_at": "2022-05-30T22:54:32.673Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "Documentation",
        "kind::Non-Product",
        "valuestream::Business Operation"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 12,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": true,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meta/-/issues/205",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/24722673/issues/205",
        "notes": "https://gitlab.com/api/v4/projects/24722673/issues/205/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/24722673/issues/205/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/24722673",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#205",
        "relative": "#205",
        "full": "meltano/meta#205"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1127614,
      "relative_position": -7182
    },
    {
      "id": 102006400,
      "iid": 3218,
      "project_id": 7603319,
      "title": "Consider how to migrate from generic utilites to specific plugin types",
      "description": "@DouweM rightly pointed out that as we figure out some of these abstractions for new plugins we'll have to have a migration path for users. \n\nAssuming there's a future state where we have `analyzer` type plugins, how do we get installed plugins from `utility` to the new type?\n\n@aaronsteers @pandemicsyn @edgarrmondragon @kgpayne if you have quick thoughts. This isn't something I think we need to decide on right now, but it'll come up at some point.",
      "state": "closed",
      "created_at": "2022-02-07T15:33:43.174Z",
      "updated_at": "2022-05-30T10:14:18.946Z",
      "closed_at": "2022-05-30T10:14:18.860Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 8,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3218",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3218",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3218/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3218/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3218",
        "relative": "#3218",
        "full": "meltano/meltano#3218"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1102076,
      "relative_position": -6156
    },
    {
      "id": 101679618,
      "iid": 3200,
      "project_id": 7603319,
      "title": "Add a `service` plugin paradigm, centered around `up` and `down` commands and behaviors",
      "description": "We've discussed in other issues how superset and other plugins might unify around a `ui` command which launches a process connected to the UI and then can be shut down by Meltano killing the process ID.\n\nAnother approach is to define an `up` and `down` lexicon for commands, which is more of a `service` paradigm. This fits better when the thing being launched is not a single process, but instead is a complex set of services, perhaps multiple invocations of containers using `docker-compose`.\n\nPlugins and use cases which might use this paradigm:\n\n- Jupyter: #2595+\n- Superset: #2605+\n- Postgres: Specifically, a local Meltano-managed Postgres DB, run in a container.\n- Clickhouse: Locally hosted, per https://gitlab.com/meltano/meltano/-/issues/3125#note_801037835\n\nNote: I don't know that adopting this up/down paradigm requires an entirely new plugin type, but I'd be open to it if `service` was to be its own plugin, and perhaps similar with a files bundle, it may be complimentary to utility plugins instead of defined by them.\n\n### Differences between a `service` paradigm and a `command` paradigm\n\nCommands:\n\n- Run until canceled or until the job is complete.\n- State is expected to be locally stored within the project folder, or within a separately managed service.\n\nServices:\n\n- `up` runs until the launch is confirmed successful.\n- `down` runs until the shutdown is successful.\n- State is expected to be locally stored in a volume or backend, likely separate from the project folder.\n\n### Example with Superset `ui` versus `up` and `down`\n\nIf invoked as a `ui` command, we assume superset will store its state locally in files or remotely in an external volume or DB.\n\nIf invoked as a service with `up` and `down`, we assume there is important and possibly complex state that may or may not be represented in the project folder after execution. Extra steps are needed to export that state to another machine.",
      "state": "closed",
      "created_at": "2022-02-01T18:32:49.634Z",
      "updated_at": "2022-05-30T10:12:10.312Z",
      "closed_at": "2022-05-30T10:12:10.295Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "OKR: Managed Meltano Beta",
        "Office Hours::Discussed",
        "Roadmap",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 15,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3200",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3200",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3200/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3200/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3200",
        "relative": "#3200",
        "full": "meltano/meltano#3200"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1103422,
      "relative_position": -6669
    },
    {
      "id": 101296712,
      "iid": 3182,
      "project_id": 7603319,
      "title": "Consider supporting Castled Data as a Reverse ELT option",
      "description": "* Site: https://castled.io/\n* HN: https://news.ycombinator.com/item?id=30072244\n\n* Based on Java. Transport format unclear - maybe a tight coupling?\n\n* Apps: https://github.com/castledio/castled/tree/main/connectors/src/main/java/io/castled/apps/connectors\n* Warehouses: https://github.com/castledio/castled/tree/main/connectors/src/main/java/io/castled/warehouses",
      "state": "closed",
      "created_at": "2022-01-26T15:11:50.306Z",
      "updated_at": "2022-05-30T10:09:54.968Z",
      "closed_at": "2022-05-30T10:09:54.948Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3182",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3182",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3182/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3182/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3182",
        "relative": "#3182",
        "full": "meltano/meltano#3182"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1075441,
      "relative_position": -5130
    },
    {
      "id": 100424452,
      "iid": 3152,
      "project_id": 7603319,
      "title": "Add utilities to execute, convert and distribute Jupyter notebooks as reports.",
      "description": "### Problem to solve\n\nAs a Meltano user, we use Jupyter notebooks for management reports; \n\n- I\u2019d like to be able to execute and convert Jupyter notebooks in my Meltano project.\n- I\u2019d like to be able to distribute pdf reports by email in my Meltano project.  (Sendgrid)\n- I\u2019d like to be able to distribute markdown reports to Slack in my Meltano project.  (Apprise)\n- I\u2019d like to be able to distribute markdown reports to Matatika in my Meltano project.  (matatika publish)\n\n\n### Target audience\n\nUsers who want to create reports and send from their Meltano project.\n\nFor example:\n\n- In a Jupyter notebook you could make yourself a daily report on details of Job runs within your Meltano project.\n- You could make a weekly summary of some metrics you are tracking through your Meltano project.\n\n\n### Proposal\n\nWe want to add our [notebook](https://github.com/Matatika/notebook) utility plugin to Meltano, which through meltano can handle the executing and converting of a Jupyter notebook.\n\n### What does success look like, and how can we measure that?\n\nA notebook plugin that executes Jupyter notebooks and has the ability to convert them, included in the Meltano discovery.yml.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_",
      "state": "closed",
      "created_at": "2022-01-11T12:34:06.580Z",
      "updated_at": "2022-05-30T10:05:48.156Z",
      "closed_at": "2022-05-30T10:05:48.136Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 8411379,
        "username": "DanielPDWalker",
        "public_email": "",
        "name": "Daniel Walker",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/c232815480c791c4f0718a1dc3eda341ddfbea94a010f83a013042b82da7f186?s=80&d=identicon",
        "web_url": "https://gitlab.com/DanielPDWalker"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3152",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3152",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3152/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3152/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3152",
        "relative": "#3152",
        "full": "meltano/meltano#3152"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1041494,
      "relative_position": -4617
    },
    {
      "id": 100196332,
      "iid": 3139,
      "project_id": 7603319,
      "title": "The Meltano Tasks Service (MTS)",
      "description": "**Change log:**\n\n- 2022-01-06: v1 First iteration.\n- 2022-01-12: v2 Major description re-write, incorporating feedback and clarifications.\n\n# The Meltano Tasks Service (MTS)\n\n## Proposed Architecture\n\nWe propose using an agent-based architecture, common amongst CI/CD tools (e.g. GitLabs self-hosted runners) for the execution of Tasks (units of work) in local, development and production environments. In this architecture, execution of Meltano tasks is delegated to hosts running a Meltano Task Agent. Rather than connecting directly to these agents (requiring point-to-point network connectivity), commands are submitted to a service on the internet (called the Meltano Tasks Service, or MTS) via an API. Hosts running the Meltano Task Agent need only have outbound internet access to poll the MTS API for new tasks, and to post task statuses, logs and artefacts. Tasks are single invocations of the Meltano CLI (e.g. an `elt` or `invoke` command) and therefore benefit from state, config injection and environment selection. Task Agents can be deployed on hosts close to key resources such as Warehouses and internal databases, and tasks can be directed to specific Task Agents using metadata and routing rules inside your Meltano Project config. Tasks can be submitted to the MTS via the Meltano CLI or directly to the MTS using the API or native integrations provided for your orchestration framework of choice.\n\n![Execution_Models-2](/uploads/8edb95ca1398fac6f1e6364cae3148cb/Execution_Models-2.jpg)\n\nWorking in this way achieves two key goals:\n\n- It provides a single execution model for local, development and production stages all within Meltanos' control, whilst still supporting external orchestration for scheduling and workflow functions.\n\n- It solves the proximity challenges associated with current centralised execution-orchestration platforms by enabling users to execute tasks in proximity to the resources those tasks depend on (rather than relying on SSH Tunnels, Proxies or other network-level bridges to connect to disparate resources to a central processing pool such as a k8s or ECS cluster).\n\n## Background\n\nData platforms have several fundamental differences to other kinds of software systems, necessitating a different approach to their architecture and deployment. The data community is used to thinking about our work in two parallel workstreams; an operational stream and a logical/data stream. In the operational stream, we care about the smooth running of our data processing tasks. In the logical stream we care about the quality of the data and assets produced by those tasks. Stakeholders typically only care about the latter, but data quality depends heavily on reliable, timely execution and effective metadata collection from that execution. Therefore solving the operational challenges (i.e. the execution of tasks) would set us up to collect and centralise the relevant metadata needed to help solve the more visible logical layer concerns. \n\n### Differences from 'Task Orchestration Frameworks'\n\n**Importantly** a 'Task Execution Framework' facilitated by the Meltano Tasks Service is different and complimentary to a 'Task Orchestration Framework' such as Airflow, Dagster or Prefect. The latter determines _what_ task to run _when_ (arranged as DAGs) whilst the former determines _where_ the task should run and _how_ (with what config and state). Current orchestrators enforce a single answer to the _where_ question according to their configured Executors (typically a Celery queue or Kubernetes Cluster), which is simply not flexible enough in the data ecosystem to meet proximity constraints and avoid building network bridges. It is our expectation that todays orchestrators will call the MTS to delegate the 'last mile' execution of tasks as an alternative execution model to delegating tasks to Celery or Kubernetes; i.e. Orchestration and Execution split into two separate, specialised and loosely coupled concerns.\n\nBoth Dagster and Prefect (which already ostensibly follow an agent-based architecture model) are optimised for running whole flows of tasks using a single Daemon/Agent (and both either recommend or only support one Daemon/Agent). Deamons/Agents receive an entire DAG and execute it using one of their supported Executors (typically Celery, Docker (on host), Kubernetes, ECS etc.). This is similar in effect to Airflow, and is the prevailing centralised execution model. Conventional wisdom is that if all resources are not available on the same network as the host or cluster running your jobs (or out on the internet), you need SSH bastions, AWS VPC Transit Gateways/Peering or similar to bridge the gap. We think we can do better, whilst still integrating with existing orchestrators for scheduling and DAG definitions.\n\n### DevOps vs. DataOps\n\nThese two parallel concerns in operational robustness and logical quality impose new constraints that are not common to typical software applications and their deployment:\n\n- In data integration systems, proximity matters. Unlike common software services (micro or monolith), whos components are typically hosted in one central network location (VPC, k8s/ECS cluster etc.), _where_ tasks run is as important as _when_ or _how_ they run for data movement (ELTP) and data transformation. Tasked with collecting and processing data from disparate (private and public) databases and API's, the ability to seamlessly and unintrusively 'drop into' environments hosted and managed by others becomes important. Current tooling relies on network-level constructs such as SSH Tunnels/Bastions, VPNs or AWS Transit Gateway/Peering (or equivalent) to bridge between a centralised data processing infrastructure and disparate sources. This imposes a not-insignificant operational burden, and introduces operational risks and points-of-failure.\n\n- Given the need to test both the operational and logical/data outcomes of data tasks and workflows, development and production data tasks require access to the same data sources. Unlike a typical 3-tier web app, which can readily be instantiated into an isolated environment (populated with mock data and integrations) using Infrastructure-as-Code practices and CI/CD automations, data workflows require the same read-only access to sources in both development and production to generate accurate and testable output data and artefacts (dashboards, reports etc.). Therefore the definition of 'development environment' is different in the data world - it is a state of configuration (e.g. added filters on data sources to minimise processing time, and diverted output locations/schemas for targets/destinations) rather than an isolated physical location/environment. Choosing a model that allows local (for development and 1-off curation tasks), development and production workflows to share the same 'physical' execution environment whilst still providing robust logical separation is highly desirable.\n\nIt is our belief that an agent-based architecture meets these constraints. Task Agents can be deployed in close proximity to resource dependencies, wherever they are hosted, negating the need for network-level bridges. As Task Agents simple call the Meltano CLI to execute Tasks, they benefit from the [Environments](https://meltano.com/docs/environments.html) feature that already handles the configuration differences between local, development and production.\n\n### Implementation and Ordering\n\nAs mentioned below, building such a system is a non-trivial development commitment. My aim in raising this as an option is to avoid us traveling too far down other avenues (wrapping/controlling/tightly integrating with specific orchestrators) without understanding the limitations of current orchestrators 'last-mile' execution models. As the Task Agents will simply be calling the Meltano CLI, much of the development work runs parallel to CLI improvements (rather than in series with). As the team and company grows, additional resources can be allocated to this component independent of CLI development work.\n\nSpecific recommendations:\n\n- Replace the Meltano system database with an API (possibly using the same codebase as the current UI web service). By relying on network connectivity to a shared relational database when executing tasks, we affectively limit the extent to which tasks (CLI invocations) can be distributed. Moving this to an API (that is Meltano-project, and therefore environment, aware) we open the door to running Tasks _anywhere_ (with internet access) using a unified backend. Whilst this is technically possible by hosting a database open to the internet, that is considered a bad practice for security reasons (at a minimum). Naturally the UI will still need a database for persistence, but it will be abstracted and hidden from the CLI behind APIs.\n\n### Other Opportunities\n\n- The MTS could be self-hostable as part of Meltanos Core OS offering, but would also be an excellent SaaS opportunity; a paid offering for managing Task Agent registration, bounded permissions, secrets, rbac, task queues, authentication, logs, artefact store/data lake, and also providing pay-as-you-go worker agents for use cases that do not require self-hosted runners (e.g. EL from a SaaS tool to a SaaS warehouse). This strikes me as 'the GitLab model' \ud83d\ude80\n\n- By intermediating task executions with the MTS, Enterprise and Regulated workloads are afforded additional governance controls; the opportunity to evaluate Authorisation as well as Authentication for entities calling the MTS. Say I am working on some local changes with my personal API creds, but I accidentally flag a task or workflow to run in `--environment=prod` in stead of my own dev environment. With the API in between it can return a 'Permission Denied' error for my user on the `prod` environment \ud83d\udd12 The same could be true at the resource/inventory level; \"User 'ken' does not have permission to target warehouse 'snowflake-prod'.\" \ud83d\ude42\n\n<details>\n<summary><h1>v1</h1></summary>\n\nHow does Meltano execute units of 'work' (called tasks, jobs, steps and similar in various data tools)?\n\nAs part of our progress on `meltano run` we had several discussions around executing multiple elt/invoke actions in a single command (e.g. `meltano run tap-github target-snowflake db:run`) vs. relying on an orchestrator to execute the `meltano` CLI command multiple times as part of a workflow (culminating in an [issue on 'run all'](https://gitlab.com/meltano/meltano/-/issues/3041)). These two approaches can broadly be categorised as 'internal' and 'external' run modes:\n\n- Internal, aka 'the dbt model': `dbt run` executes a complex DAG/workflow of subtasks (model builds) using a single command with rich selection syntax. `meltano run` could do the same, executing complex DAGs of plugin tasks (EL, dbt, Great Expectations etc.) from a single interface.\n\n- External, aka 'the orchestrator model'. In this mode DAGs are defined in an external orchestrator, made up of individual `meltano elt ...` and `meltano invoke ...` tasks. This is how we are running [Meltano at Meltano](https://gitlab.com/meltano/squared) with Airflow today.\n\nBoth these models have their pros and cons, but before briefly summarising them there is one more axis of interest I would like to add; execution locality. _Where_ Meltano runs is as important as _how_ it runs in several critical use cases, including data movement (ELTP) and data transformation. Having fine-grained control over where Meltano runs specific tasks would afford us the ability to co-locate jobs with resources and dependencies, for both performance and security reasons. Think running `dbt run` from a host in the same subnet as Redshift, or sensitive internal database EL's in the same private subnets as the `meltano elt` runner, or particularly intensive tasks on hosts with more CPU/memory/bandwidth/GPU.\n\nWith that in mind, how do the two models compare?\n\n**Internal:**\n\nThe internal execution model is least flexible from an execution locality perspective. All subtasks run on a single host, with limited opportunities for resource isolation and right-sizing of subtasks. dbt manages with threading, however this only works because all of the 'heavy lifting' is performed by the warehouse rather than the host itself. That said, the internal model offers a clean and simple user experience and is especially great for local development and testing.\n\n**External:**\n\nThe external execution model is more flexible in terms of execution locality, at the cost of increased complexity and reduced integration. Orchestrators like Airflow, Dagster and Prefect provide fine-grained control of Task-level resourcing (e.g. using the KubernetesPodOperator in Airflow), however network locality is harder to achieve (i.e. having worker nodes spread across many isolated networks).\n\n---\n\nThese two are not mutually exclusive (it is possible that we can support internal for dev and external in production, using a DAG Generator) but they illustrate the key constraints. In an ideal world we would have the simplicity and convenience of the internal execution model and the flexibility of the external one - with even more flexibility on top!\n\n**Agent-based:**\n\nThis best-of-both-worlds scenario might be achieved using an agent-based architecture, common amongst CI/CD tools (e.g. GitLabs self-hosted [runners](https://docs.gitlab.com/runner/)). In this scenario, execution of Meltano tasks is delegated to hosts running a Meltano agent. Rather than connecting directly to these agents (requiring point-to-point network connectivity), commands are submitted to a service on the internet via an API. Hosts running the Meltano agent need only have outbound internet access to poll the API for new tasks, and to post task statuses, logs and artefacts. Agents can be deployed on hosts close to key resources such as Warehouses and internal databases, and tasks can be directed to specific hosts using metadata and routing rules.\n\nIn this way we get the convenience of the internal model (i.e. complex DAG executions with a single command, as discussed in [Office Hours on 2022-01-05](https://youtu.be/JzWMADHS4tw?t=2382)) with the benefits of the external model (and more) in terms of execution locality flexibility!\n\nDoes this replace orchestration? Not necessarily. This service would not _need_ to implement scheduling. Manual runs could be orchestrated by the host (laptop) executing `meltano run` via the CLI (which would submit API requests for tasks to be performed, returning the responses and logs to the users terminal). Scheduled runs could similarly be executed by an orchestrator, either using the CLI or by a dedicated Meltano Operator (in the Airflow case) to interact with the task API directly. This is particularly compelling in the case of managed orchestrators like Astronomer and Prefect Cloud where accessing an API on the internet to submit tasks is much easier than deploying workers into private hosting environments to run Meltano close to existing resources.\n\nThis API service could be self-hostable as part of Meltanos Core OS offering, but would also be an excellent SaaS opportunity; a paid offering for managing the agent registration, bounded permissions, secrets, rbac, task queues, authentication, logs, artefact store/data lake, and also providing pay-as-you-go worker agents for use cases that do not require self-hosted runners (e.g. EL from a SaaS tool to a SaaS warehouse). This strikes me as 'the GitLab model' \ud83d\ude80\n\n**Additional thoughts:**\n\nAgents would likely need access to a Meltano Project git repository, either directly or via the API, in order to retrieve users Projects and run specific builds/commit hashes (for dev, test and staging use cases). With similar challenges already solved in the CI/CD space as example, such versioning challenges are not insurmountable. This approach may also simplify the environments challenge (dev, prod, staging) - I believe the same Agents would be used for all environments, on the basis that i) your dbt task will likely always prefer to run on the agent closest to the warehouse, regardless of the kind of task and ii) resource constraints can be handled with priorities and Agent scaling (i.e. always giving preference to tasks marked as 'prod' in Agent task queues, and adding Agents based on queue depths).\n\n</details>",
      "state": "closed",
      "created_at": "2022-01-06T11:40:07.425Z",
      "updated_at": "2022-05-30T10:04:19.086Z",
      "closed_at": "2022-05-30T10:04:19.061Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Backend",
        "Discussion",
        "Marketing::Blog Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 28,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3139",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3139",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3139/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3139/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3139",
        "relative": "#3139",
        "full": "meltano/meltano#3139"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 118,
      "epic": {
        "id": 331279,
        "iid": 118,
        "title": "Pillar 3: Build the future of DataOps with Meltano",
        "url": "/groups/meltano/-/epics/118",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1451</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1035790,
      "relative_position": -4104
    }
  ]
}
