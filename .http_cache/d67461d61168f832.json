{
  "cookies": {
    "_cfuvid": "ub_6MJogAJ8VIyXMLqdVZAYzTfJ6zg32yWJpRNP37jI-1747940853790-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:33.684274+00:00",
  "elapsed": 0.50726,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e98ddbc372667-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:33 GMT",
    "ETag": "W/\"63229170d1d758101611fc0ba7dd9f19\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/88/issues?epic_iid=88&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/88/issues?epic_iid=88&id=2524164&page=1&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=ub_6MJogAJ8VIyXMLqdVZAYzTfJ6zg32yWJpRNP37jI-1747940853790-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-01-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-b",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"6b545d44058b24623ce45e027ae2e2d8\",\"version\":\"1\"}",
    "x-next-page": "",
    "x-page": "1",
    "x-per-page": "20",
    "x-prev-page": "",
    "x-request-id": "6b545d44058b24623ce45e027ae2e2d8",
    "x-runtime": "0.311026",
    "x-total": "13",
    "x-total-pages": "1"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/88/issues"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/88/issues",
  "_decoded_content": [
    {
      "id": 96092882,
      "iid": 171,
      "project_id": 27821563,
      "title": "Write a \"The Future of Singer is bright\" Post",
      "description": "Follow on from https://gitlab.com/meltano/meltano/-/issues/2687\n\nOnce we've launched the SingerHub this will be a great re-introduction post of Singer.",
      "state": "closed",
      "created_at": "2021-04-05T19:34:26.108Z",
      "updated_at": "2021-11-22T17:35:10.122Z",
      "closed_at": "2021-10-25T15:21:36.321Z",
      "closed_by": {
        "id": 220186,
        "username": "Emily",
        "public_email": "",
        "name": "Emily Kyle",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/220186/avatar.png",
        "web_url": "https://gitlab.com/Emily"
      },
      "labels": [
        "Marketing::Blog Feature",
        "kind::Non-Product",
        "urgency::default",
        "valuestream::Ecosystem"
      ],
      "milestone": {
        "id": 2286169,
        "iid": 197,
        "group_id": 2524164,
        "title": "Fri: Nov 26, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:19:17.403Z",
        "updated_at": "2021-11-29T16:18:19.341Z",
        "due_date": "2021-11-26",
        "start_date": "2021-11-20",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/197"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/marketing/marketing-general/-/issues/171",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/27821563/issues/171",
        "notes": "https://gitlab.com/api/v4/projects/27821563/issues/171/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/27821563/issues/171/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/27821563",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#171",
        "relative": "#171",
        "full": "meltano/marketing/marketing-general#171"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 528616,
      "relative_position": -4168
    },
    {
      "id": 92282130,
      "iid": 2903,
      "project_id": 7603319,
      "title": "Singer Spec clarification: supporting mergeable STATE artifacts",
      "description": "As discussed in office hours yesterday, we need to document a spec clarification to allow STATE merging.\n\n## Use Cases\n\nThe main use cases involve orchestrator-driven or user-driven parallelization. \n\n1. For any initial backfill tasks where we want the streams to be parallelized by the orchestrator (Meltano), for instance by breaking the list of streams into multiple sync groups, we also need a means of merging the multiple STATE outputs which are produced from the 4 jobs.\n2. For #2727 (Melturbo), multiple states will be created and we'll need to merge them afterward.\n3. (More use cases to-be-added...)\n\n## Spec Proposal A: Top-level Mergeability\n\nThe simplest spec proposal is as follows:\n\n> All top level bookmarks in the STATE json object should be considered atomic and mergeable with other top-level bookmarks.\n\nIn practice, this convention is already true for 99% of taps. The implications are that, if the STATE output from one job contains a top-level `users` bookmark, and the STATE output from another job contains a top-level `customers` bookmark, the two job outputs may be merged together to create a single merged STATE output with both `users` and `customers` bookmarks combined.\n\n### Compatibility Detection\n\nAs noted above, we can probably assume all taps already support this capability and then manage to the exceptions. If we do not take this assumption, detecting/confirming compatibility should still be simple step to accomplish, since we can check top-level boookmarks to see that they matching the name of the streams which were synced in the executed job.\n\n### Limitations\n\nThis method has the limitation of not being able to merge partitioned state. Optionally, we could expand the definition above to encompass multiple partition states within the jobs' STATE outputs.\n\n## Spec Proposal B: `JSON Patch`\n\nA more complex spec proposal might implement the `JSON Patch` implementation for more advanced merging: http://jsonpatch.com/\n\nThis is likely _not_ true today for most taps. There could still be valuable to enable this capability in order to support more advanced use cases",
      "state": "closed",
      "created_at": "2021-08-19T15:26:09.903Z",
      "updated_at": "2022-05-30T09:35:45.981Z",
      "closed_at": "2022-05-30T09:35:45.954Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::Ecosystem"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2903",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2903",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2903/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2903/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2903",
        "relative": "#2903",
        "full": "meltano/meltano#2903"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 778812,
      "relative_position": -4617
    },
    {
      "id": 90690673,
      "iid": 2865,
      "project_id": 7603319,
      "title": "Document differences between Singer and Airbyte Specs",
      "description": "Related to https://gitlab.com/meltano/crm/-/issues/352\n\nAirbyte Catalog - https://docs.airbyte.io/understanding-airbyte/catalog\nAirbyte Spec - https://docs.airbyte.io/understanding-airbyte/airbyte-specification\n\nSinger Spec - https://hub.meltano.com/singer/spec",
      "state": "closed",
      "created_at": "2021-07-22T16:04:28.972Z",
      "updated_at": "2021-08-02T16:20:46.392Z",
      "closed_at": "2021-08-02T16:20:46.376Z",
      "closed_by": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "labels": [
        "flow::Doing",
        "kind::Risk",
        "urgency::highest",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2166241,
        "iid": 177,
        "group_id": 2524164,
        "title": "Fri: Aug 6, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-07-29T18:04:03.816Z",
        "updated_at": "2021-08-09T15:24:25.207Z",
        "due_date": "2021-08-06",
        "start_date": "2021-07-31",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/177"
      },
      "assignees": [
        {
          "id": 1942272,
          "username": "tayloramurphy",
          "public_email": "",
          "name": "Taylor A Murphy",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
          "web_url": "https://gitlab.com/tayloramurphy"
        }
      ],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": true,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2865",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2865",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2865/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2865/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2865",
        "relative": "#2865",
        "full": "meltano/meltano#2865"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 720666,
      "relative_position": -4104
    },
    {
      "id": 89858198,
      "iid": 162,
      "project_id": 22672923,
      "title": "Spec proposal for duplicate-proof incremental replication",
      "description": "As part of the Singer spec, and also as a best practice to avoid records being skipped, taps are implemented with a `greater-than-or-equal-to` comparison against the replication key value.\n\nThe \"or equal to\" part of the comparison is confusing to new users but the reason for it is important: to ensure record \"ties\" are never omitted from the final target.\n\n## Existing mitigations\n\nThe current solution for this problem is (1) use primary key upserts on the target side, which will naturally solve the duplication problem or (2) use a solution like dbt to remove duplicates downstream.\n\n## Proposed improvement\n\n1. Continue, as today, to use \"greater than or equal to\" logic.\n2. Add to the STATE dictionary a new `record_hashes_seen` property (or similar) as a list of record hashes having the same value as the max replication key value.\n    - As we parse each record during a stream, assuming its value is equal to the max replication key (which will be true for _every_ record if the stream is sorted), then we can store a hash of the record into STATE along with the max replication key value.\n3. Next time through the sync, if the hash of a record exactly matches a hash in the set of `record_hashes_seen`, we can omit that record and not send it downstream.\n4. Any other ties by replication_key_value will be emitted downstream to the target, assuming their hash has _not_ yet been seen/sent.\n5. When writing out STATE messages, only the latest \"ties\" need to be included in the `record_hashes_seen`. This would not be a cumulative list of all records, only the latest ties by replication key.\n\n\nSince the SDK entirely handles the State implementation for SDK-based taps, we have an opportunity to build this as a more robust solution across all taps using the SDK.\n\n## Best reasons not to build\n\nThe reasons _not_ to build this are (1) performance, (2) complexity, and (3) scalability.\n\nThe complexity argument can be mitigated by the fact that these are all aspects managed entirely in the SDK, so developers and users can in general completely ignore these internal state treatments.\n\nRegarding performance, the hashing of a record should be able to be performed very quickly, and then it is just a matter of tuning the caching and variable comparison logic. This should be tunable to reach satisfactory performance, but if not, we could also mitigate by enabling as an optional setting, such as `dedupe_incremental_streams` (bool), or similar.\n\nRegarding scalability, this solution should scale fine assuming a small number \"ties\" by replication key value. If the number of ties is in the thousands or larger, however, this could have adverse affects on the stability of STATE messages. An option to disable the behavior via settings (as described in the previous paragraph, could prove useful for this as well. That said, presumably the larger the number of ties (within reason), the higher the value of this deduplication capability.\n\n## Regarding adherance to Singer Spec\n\nTo my knowledge, this implementation would still adhere to the spec since (1) the STATE behavior is entirely up to the tap to control, (2) we still accomplish `>=` logic for replication keys, (3) we still guarantee that every record will be sent _at least once_.",
      "state": "closed",
      "created_at": "2021-07-06T18:51:05.117Z",
      "updated_at": "2022-05-29T23:45:04.043Z",
      "closed_at": "2022-05-29T23:45:04.025Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/162",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/162",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/162/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/162/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#162",
        "relative": "#162",
        "full": "meltano/sdk#162"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 692115,
      "relative_position": -3078
    },
    {
      "id": 89567956,
      "iid": 105,
      "project_id": 24722673,
      "title": "Singer Working Group",
      "description": "I'd like to start a working group for the Singer Spec. Meetings would be monthly or fortnightly, private invitation. After one or two meetings, we could decide whether to publically publish recordings or notes afterwards.\n\nQualifications for participation might be:\n\n- (1) be a Singer orchestration platform or Singer-based services provider\n- (2) must promote \"Singer\" on website homepage\n\nAs of today, this might include (check means invite sent):\n- [x] Stitch - Dan Mosora\n- [x] Pipelinewise - Peter Kosztolanyi\n- [x] [Singerly](https://www.singerly.co/) - Contacts TDB\n- [x] [Meltano](https://meltano.com)\n- [x] [AutoIDM](https://www.autoidm.com) - Derek Visch\n- [x] [Bytecode](https://bytecode.io/) - Contacts TBD\n- [x] [Hotglue](https://hotglue.xyz/) - Hassan Syyid\n\nNote:\n- Other non-Singer vendors / solution providers in the space would not be included unless they changed their home page marketing to promote Singer.\n- As we scale, we may need to create more stringent criteria, and/or we may cap the membership at 8-10 partners (invite only).\n\nRegular topics for discussion:\n\n- Expansion of Singer capabilities\n- Support needs of the Singer community\n- \"Feature gaps\" in terms of Singer coverage\n- Ontology of Singer features/capabilities\n- Proposed improvements to Hub and SDK",
      "state": "closed",
      "created_at": "2021-06-30T20:32:04.334Z",
      "updated_at": "2021-11-14T22:18:01.796Z",
      "closed_at": "2021-11-14T22:18:01.775Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Community",
        "flow::To Do",
        "kind::Non-Product",
        "valuestream::Hub"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 18,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": true,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meta/-/issues/105",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 7,
        "completed_count": 7
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/24722673/issues/105",
        "notes": "https://gitlab.com/api/v4/projects/24722673/issues/105/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/24722673/issues/105/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/24722673",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#105",
        "relative": "#105",
        "full": "meltano/meta#105"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 692186,
      "relative_position": -5130
    },
    {
      "id": 82211170,
      "iid": 2693,
      "project_id": 7603319,
      "title": "Add Diagrams to Singer Spec",
      "description": "Feedback from first draft is that some diagrams would help.\n\nWe can add Mermaid to the blog to help with this. I think some simple ones would be great. \n\nThis was shared on the Singer Slack \n\n![image](/uploads/16ed783f3a29498e8f00decf05619bab/image.png)",
      "state": "closed",
      "created_at": "2021-04-02T20:03:32.180Z",
      "updated_at": "2022-05-30T07:08:25.344Z",
      "closed_at": "2022-05-30T07:08:25.328Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Documentation",
        "flow::Triage",
        "kind::Feature",
        "valuestream::Ecosystem"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2693",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2693",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2693/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2693/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2693",
        "relative": "#2693",
        "full": "meltano/meltano#2693"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 524969,
      "relative_position": -4360
    },
    {
      "id": 81423256,
      "iid": 2665,
      "project_id": 7603319,
      "title": "Support SaaS targets for \"Reverse ETL/ELT\" and \"Operational Analytics\" use cases",
      "description": "A common use case for data teams is to move data from their data warehouse, after it's been transformed, and into a downstream SaaS application. This as come to be known as Reverse ETL or Operational Analytics. Two of the newer startups in this space are Census and Hightouch.\n\nMeltano and Singer can be a viable solution to this space. Each SaaS target would have to handle how to transform data and it's a use case that's been thought about for the [SDK](https://sdk.meltano.com).\n\nOn the Meltano side, we'd want to support this with a good definition experience in meltano.yml. A first iteration already exists in that this would be an `extractor` and `loader`, but since reverse etl typically occurs after transformation, it may be useful to have an alias on these (export / publish?). Users may want to import credentials from an existing target, which could imply some kind of chaining of an extractor to a loader. We'd have to be more aware of the DAG then. \n\nMeltano could also be made aware of [dbt exposures](https://docs.getdbt.com/docs/building-a-dbt-project/exposures) and understand the DAG between transformation and another extract.",
      "state": "closed",
      "created_at": "2021-03-22T15:33:37.160Z",
      "updated_at": "2022-05-30T07:05:11.519Z",
      "closed_at": "2022-05-30T07:05:11.497Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "Product Vision"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2665",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2665",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2665/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2665/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2665",
        "relative": "#2665",
        "full": "meltano/meltano#2665"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 500300,
      "relative_position": -2052
    },
    {
      "id": 81422943,
      "iid": 2664,
      "project_id": 7603319,
      "title": "Create Non-singer-esque language for common extract and load operations",
      "description": "From our Vision discussion:\n\nStraightforward non-singer-esque language for common EL operations: \"backfill\", \"incremental\", \"full replace\", etc.\n* Awareness around append-only targets\n* No remaining shortcomings around singer spec",
      "state": "closed",
      "created_at": "2021-03-22T15:31:30.041Z",
      "updated_at": "2022-05-30T07:05:04.301Z",
      "closed_at": "2022-05-30T07:05:04.267Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Product Vision"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2664",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2664",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2664/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2664/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2664",
        "relative": "#2664",
        "full": "meltano/meltano#2664"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 500289,
      "relative_position": -4232
    },
    {
      "id": 81139423,
      "iid": 2657,
      "project_id": 7603319,
      "title": "Independent tap and target state",
      "description": "### Problem to solve\nI have built a tap that emits state in the form of a bookmark. This bookmark is not a replication key, and is of no use to any downstream targets. It stores a list of object ID's that should be saved between invocations of the tap, used to generate a diff that 'detects' deleted objects.\n\nHowever the target I am using is scrubbing this bookmark - it only emits state for keys that it has processed. As Meltano stores the targets state output only, the list of ID's my tap requires is never available on subsequent runs. This breaks functionality in my tap. The same problem could conceivably happen for a given target - where a tap incorrectly handles state passed to it.\n\n### Target audience\nTap developers using the Meltano orchestrator.\n\n### Further details\nWhilst I can (and will) encourage the targets I use to conform to the spec, I believe Meltano has a opportunity to help smooth over this rough edge and to contribute to improving the overall robustness of the ecosystem.\n\n### Proposal\nTo solve this we could consider storing tap and target state separately, combining them together to ensure no keys are missed. For matching keys, we would return values from the target (assuming bookmarks of 'uploads' are more appropriate than bookmarks of 'downloads'). For non-matching keys, they are included (from both tap and target) to ensure no data is missed.\n\nThis also poses the question - what happens when a tap and target use the same key for different purposes? Today the target would override it. Perhaps having separate tap/target namespaces for bookmarking might address this risk in the spec.\n\n### What does success look like, and how can we measure that?\nSolving this would allow tap and target makers to be certain their plugins will work regardless of the implementation of their counterpart in a Meltano pipeline.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_",
      "state": "closed",
      "created_at": "2021-03-17T22:21:44.797Z",
      "updated_at": "2022-05-30T07:04:20.029Z",
      "closed_at": "2022-05-30T07:04:20.008Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "Load",
        "kind::Feature"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2657",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2657",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2657/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2657/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2657",
        "relative": "#2657",
        "full": "meltano/meltano#2657"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 503356,
      "relative_position": -2565
    },
    {
      "id": 80002326,
      "iid": 2616,
      "project_id": 7603319,
      "title": "Investigate using Apache Arrow (or other interchange formats)",
      "description": "As mentioned in https://news.ycombinator.com/item?id=26284253#26300348, it would be interesting to see how the [Singer Spec](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#example) could evolve to support other interchange formats such as [Apache Arrow](https://arrow.apache.org/).",
      "state": "closed",
      "created_at": "2021-03-01T12:25:03.207Z",
      "updated_at": "2022-05-30T06:59:06.109Z",
      "closed_at": "2022-05-30T06:59:06.090Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Community",
        "Discussion",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2616",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2616",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2616/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2616/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2616",
        "relative": "#2616",
        "full": "meltano/meltano#2616"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 450801,
      "relative_position": -1026
    },
    {
      "id": 79727893,
      "iid": 2602,
      "project_id": 7603319,
      "title": "Define framework for the proposal and consideration of optional extensions to the Singer spec",
      "description": "",
      "state": "closed",
      "created_at": "2021-02-24T16:24:51.030Z",
      "updated_at": "2021-10-01T15:16:51.201Z",
      "closed_at": "2021-10-01T15:16:51.187Z",
      "closed_by": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "labels": [
        "Documentation",
        "flow::Triage",
        "kind::Risk",
        "valuestream::Ecosystem"
      ],
      "milestone": {
        "id": 2136620,
        "iid": 176,
        "group_id": 2524164,
        "title": "Staging",
        "description": "",
        "state": "active",
        "created_at": "2021-07-07T19:00:49.676Z",
        "updated_at": "2021-07-07T19:00:49.676Z",
        "due_date": null,
        "start_date": null,
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/176"
      },
      "assignees": [
        {
          "id": 1942272,
          "username": "tayloramurphy",
          "public_email": "",
          "name": "Taylor A Murphy",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
          "web_url": "https://gitlab.com/tayloramurphy"
        }
      ],
      "author": {
        "id": 87854,
        "username": "DouweM",
        "public_email": "",
        "name": "Douwe Maan",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bbb752c75ae2744bddf1640d75edf9b6f7d4e5f4fbba4a4f0910961e6f0519b9?s=80&d=identicon",
        "web_url": "https://gitlab.com/DouweM"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2602",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2602",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2602/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2602/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2602",
        "relative": "#2602",
        "full": "meltano/meltano#2602"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 443367,
      "relative_position": 0
    },
    {
      "id": 77124878,
      "iid": 2508,
      "project_id": 7603319,
      "title": "Document unofficial Singer extension: `ACTIVATE_VERSION`",
      "description": "As explained by Jeff Huth [in Slack](https://meltano.slack.com/archives/CFG3C3C66/p1601148878022700?thread_ts=1600699540.015800&cid=CFG3C3C66):\n\n>>>\nMost taps are upsert only; either `FULL_TABLE` (all records) or `INCREMENTAL` (only records on/after the bookemark). But there are a few taps out there that use `ACTIVATE_VERSION` . This is an undocumented feature and only works if the target is set up to deal with this... basically, it loads ALL records with a version, then (logically?) deletes earlier version(s) of the records with the same Primary Key. These allow you to upsert + delete (to logically delete the \"delta\" records).\n\nImagine you load 100 records from a table today; then you delete 5 records and load 95 records tomorrow. This feature \"deletes\" the delta 5 records.\n\nMost database targets allow for this. But some file-based targets and even singer-check-tap target fail when you try to run these taps.\n\n`tap-google-sheets` is a tap that uses this.\n>>>\n\nThe `ACTIVATE_VERSION` message is not currently documented in the the Singer spec (issue to change that: https://github.com/singer-io/getting-started/issues/71), but it is included in the `singer-python` library (where it's marked as experimental): https://github.com/singer-io/singer-python/blob/master/singer/messages.py#L137\n\nWhile this feature may be experimental from the Singer spec's perspective, it is implemented by at least one tap/target pair that's supported out of the box by Meltano, so it's effectively standardized and worth documenting:\n\n- https://meltano.com/plugins/extractors/salesforce.html\n  - https://github.com/singer-io/tap-salesforce/pull/6\n  - https://gitlab.com/meltano/tap-salesforce/-/blob/a241d97714aaae19a094bfa0a522420f599b23ce/tap_salesforce/__init__.py#L351\n  - https://gitlab.com/meltano/tap-salesforce/-/blob/a241d97714aaae19a094bfa0a522420f599b23ce/tap_salesforce/sync.py#L162\n- https://meltano.com/plugins/loaders/postgres.html\n  - https://github.com/datamill-co/target-postgres/blob/9c095d91e215f932caa897a6587c6dc6278db8cf/target_postgres/target_tools.py#L142-L153\n\nWe are also planning to support this feature in taps and targets built using the Singer SDK: https://gitlab.com/meltano/singer-sdk/-/issues/18",
      "state": "closed",
      "created_at": "2021-01-12T22:46:35.598Z",
      "updated_at": "2022-05-30T06:46:02.416Z",
      "closed_at": "2022-05-30T06:46:02.395Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Documentation",
        "Extract",
        "Load"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 87854,
        "username": "DouweM",
        "public_email": "",
        "name": "Douwe Maan",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bbb752c75ae2744bddf1640d75edf9b6f7d4e5f4fbba4a4f0910961e6f0519b9?s=80&d=identicon",
        "web_url": "https://gitlab.com/DouweM"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2508",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2508",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2508/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2508/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2508",
        "relative": "#2508",
        "full": "meltano/meltano#2508"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 366622,
      "relative_position": -1539
    },
    {
      "id": 72421432,
      "iid": 2385,
      "project_id": 7603319,
      "title": "Add declarative way to define tables and their replication methods and keys on DB taps, that doesn't require user to understand Singer metadata",
      "description": "This could be inspired by or a subset of PipelineWise's YAML configuration format (see https://transferwise.github.io/pipelinewise/connectors/taps/postgres.html), which we could support in `meltano.yml` by translating the schema and table mappings into catalog [metadata rules](https://meltano.com/docs/plugins.html#metadata-extra) and tap and target settings:\n\n```yaml\nschemas:\n\n  - source_schema: \"public\"            # Source schema in postgres with tables\n    target_schema: \"repl_pg_public\"    # Target schema in the destination Data Warehouse\n    target_schema_select_permissions:  # Optional: Grant SELECT on schema and tables that created\n      - grp_stats\n\n    # List of tables to replicate from Postgres to destination Data Warehouse\n    #\n    # Please check the Replication Strategies section in the documentation to understand the differences.\n    # For LOG_BASED replication method you might need to adjust the source mysql/ mariadb configuration.\n    tables:\n      - table_name: \"table_one\"\n        replication_method: \"INCREMENTAL\"   # One of INCREMENTAL, LOG_BASED and FULL_TABLE\n        replication_key: \"last_update\"      # Important: Incremental load always needs replication key\n\n        # OPTIONAL: Load time transformations\n        #transformations:\n        #  - column: \"last_name\"            # Column to transform\n        #    type: \"SET-NULL\"               # Transformation type\n\n      # You can add as many tables as you need...\n      - table_name: \"table_two\"\n        replication_method: \"LOG_BASED\"     # Important! Log based must be enabled in MySQL\n\n  # You can add as many schemas as you need...\n  # Uncomment this if you want replicate tables from multiple schemas\n  #- source_schema: \"another_schema_in_postgres\"\n  #  target_schema: \"another\n```\n\nTo support the `source_schema` and `target_schema` settings, which correspond to PipelineWise targets' `schema_mapping` settings (see https://gitlab.com/meltano/meltano/-/issues/2442), we'd need to find a way to extract these as (for example) `TAP_FOO__SCHEMA_MAPPING` (similar in spirit to the existing `TAP_FOO__LOAD_SCHEMA`: https://meltano.com/docs/plugins.html#load-schema-extra).",
      "state": "closed",
      "created_at": "2020-10-08T22:57:17.579Z",
      "updated_at": "2022-05-30T06:30:50.962Z",
      "closed_at": "2022-05-30T06:30:50.891Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "kind::Feature"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 87854,
        "username": "DouweM",
        "public_email": "",
        "name": "Douwe Maan",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bbb752c75ae2744bddf1640d75edf9b6f7d4e5f4fbba4a4f0910961e6f0519b9?s=80&d=identicon",
        "web_url": "https://gitlab.com/DouweM"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2385",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2385",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2385/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2385/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2385",
        "relative": "#2385",
        "full": "meltano/meltano#2385"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 259633,
      "relative_position": -4873
    }
  ]
}
