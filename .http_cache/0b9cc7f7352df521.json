{
  "cookies": {
    "_cfuvid": "2DUrUct0.NF15axGI8fwMvI5HHtck6dyCTQPH1WkBbg-1747940822839-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:02.772460+00:00",
  "elapsed": 0.610225,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e981bcc4f46e7-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:02 GMT",
    "ETag": "W/\"30e6151c03ffcadeb56afe19b8949390\"",
    "Link": "<https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=7&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"prev\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=9&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"next\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=1&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"first\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=10&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=2DUrUct0.NF15axGI8fwMvI5HHtck6dyCTQPH1WkBbg-1747940822839-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-44-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-c",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"b6cfa1f3c4faf0932bc2edb516544ba4\",\"version\":\"1\"}",
    "x-next-page": "9",
    "x-page": "8",
    "x-per-page": "20",
    "x-prev-page": "7",
    "x-request-id": "b6cfa1f3c4faf0932bc2edb516544ba4",
    "x-runtime": "0.311924",
    "x-total": "200",
    "x-total-pages": "10"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?order_by=updated_at&page=8&scope=all&sort=asc&updated_after=2022-01-01T00%3A00%3A00Z"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?order_by=updated_at&page=8&scope=all&sort=asc&updated_after=2022-01-01T00%3A00%3A00Z",
  "_decoded_content": [
    {
      "id": 97829554,
      "iid": 278,
      "project_id": 22672923,
      "title": "Application vs Library for SDK-based packages",
      "description": "I want to start the conversation around our (recommended) packaging strategy for SDK-based taps and targets.\n\nA [recent conversation in Slack][cjk-convo] revealed that installing SDK-based taps (e.g. `pipx install git+https://github.com/MeltanoLabs/tap-github.git`) references the specified dependency versions in `pyproject.toml` and completely ignores the pinned versions in `poetry.lock`.\n\nThe most relevant discussions around using Poetry to distribute end-user Python applications (like Singer Taps) is happening [here][locked-suggestion] and in [this PR][pinned-experimental].\n\n[cjk-convo]: https://meltano.slack.com/archives/C01PKLU5D1R/p1637687521258300\n[locked-suggestion]: https://github.com/python-poetry/poetry/issues/1307#issuecomment-674336917\n[pinned-experimental]: https://github.com/python-poetry/poetry-core/pull/71",
      "state": "closed",
      "created_at": "2021-11-23T18:03:35.588Z",
      "updated_at": "2022-05-30T00:01:50.919Z",
      "closed_at": "2022-05-30T00:01:50.860Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "flow::Triage",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/278",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/278",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/278/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/278/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#278",
        "relative": "#278",
        "full": "meltano/sdk#278"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 98127780,
      "iid": 282,
      "project_id": 22672923,
      "title": "Let taps continue to next partitions upon error",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\nFollow up to !195 and probably related to #137 (and maybe #134)\n\nIn release 0.3.14, there is now support for `RetriableAPIError` and `FatalAPIError`, which I think should be extended to allow for the tap to continue after such an error (whether that's the default or an opt-in behaviour), in particular when dealing with a partitioned stream.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\nExample use case: `tap-github` can fetch data for a list of repos. Currently, if it fails at some point, the rest of the list is not handled at all. See [this issue](https://github.com/MeltanoLabs/tap-github/issues/52) for more details. In that particular case, not handling the error means we're not able to retrieve data past the error which seems persistent on some repos.\n\nGiven that the tap is run as a separate process, bubbling the exception up to the top level doesn't actually help in that the calling process cannot get access to the details of it. Returning state (and maybe an error exit code) seems like a cleaner way to fail.\n\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nIn `Stream._sync_records`, the code [loops through a list of contexts](https://gitlab.com/meltano/sdk/-/blob/main/singer_sdk/streams/core.py#L911), but there is no error handling. The loop could be enclosed in a `try...except` block which could selectively capture the above exceptions and update state (or not) accordingly, before proceeding with the next context.\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nI can't really think of a reason why this would cause problems, but I only have the `tap-github` use case in mind. If there are downsides, that behaviour could be opt-in via a config option, with the default behaviour remaining as is.",
      "state": "closed",
      "created_at": "2021-11-29T22:40:06.720Z",
      "updated_at": "2022-05-30T00:02:21.853Z",
      "closed_at": "2022-05-30T00:02:21.750Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Needs Refinement",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 75577,
        "username": "LaurentS",
        "public_email": "",
        "name": "Laurent Sava\u00ebte",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/ac898ad4d1975ac4678873c142f8ed88161383546137af50ad4f58fdc678c798?s=80&d=identicon",
        "web_url": "https://gitlab.com/LaurentS"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/282",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/282",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/282/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/282/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#282",
        "relative": "#282",
        "full": "meltano/sdk#282"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 98834104,
      "iid": 291,
      "project_id": 22672923,
      "title": "Make the HTTP library used for REST and GraphQL taps pluggable",
      "description": "While [Requests](https://docs.python-requests.org/en/latest/) has become the dominant HTTP(S) library for Python users, others are rising in popularity including [httpx](https://www.python-httpx.org/) which offers a variety of improvements on Requests including support for HTTP/2. Requests is probably a good default due to how familiar it is for most Python developers, but it might be quite useful if there was a way to make the library pluggable.\n\nThere may be some [potential code changes](https://www.python-httpx.org/compatibility/) that might have to be made for HTTPX support\u2014in particular, it doesn't support [prepared requests](https://www.python-httpx.org/compatibility/#request-instantiation). HTTPX also supports both sync and async (which may be useful if #184 is resolved and the concerns around debugging of async code are resolved).",
      "state": "closed",
      "created_at": "2021-12-10T14:32:23.352Z",
      "updated_at": "2022-05-30T00:03:32.940Z",
      "closed_at": "2022-05-30T00:03:32.917Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 508920,
        "username": "tommorris",
        "public_email": "",
        "name": "Tom Morris",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/508920/avatar.png",
        "web_url": "https://gitlab.com/tommorris"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/291",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/291",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/291/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/291/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#291",
        "relative": "#291",
        "full": "meltano/sdk#291"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 98853126,
      "iid": 292,
      "project_id": 22672923,
      "title": "Follow-up from SQLStreams: 'only_schemas' and/or 'ignore_schemas' config option",
      "description": "I've spun this off as a follow-on, rather than building into v1.\n\nThe following discussion from !44 should be addressed:\n\n- [ ] @edgarrmondragon started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/44#note_745212193):  (+2 comments)\n\n    > @aaronsteers Maybe we want to allow the user to filter out certain schemas. Like `information_schema` itself, or as I found for CockroachDB, `crdb_internal`.\n    > \n    > ```suggestion:-0+0\n    >         for schema_name in inspected.get_schema_names():\n    >           if schema_name in self.ignored_schemas or schema_name not in self.config.get(\"selected_schemas\", []):\n    >               continue\n    >         ... \n    > ```\n    > \n    > Maybe a similar thing for filtering selected tables. This could help with source dbs where there's a lot of tables (like in a large data warehouse) but the user doesn't want to waste time **discovering** all of them if they're interested in a select few.",
      "state": "closed",
      "created_at": "2021-12-10T20:27:14.131Z",
      "updated_at": "2022-05-30T00:03:42.766Z",
      "closed_at": "2022-05-30T00:03:42.663Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/292",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/292",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/292/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/292/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#292",
        "relative": "#292",
        "full": "meltano/sdk#292"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 99700434,
      "iid": 296,
      "project_id": 22672923,
      "title": "Configuration validation for Discovery",
      "description": "https://gitlab.com/meltano/sdk/-/blob/main/singer_sdk/tap_base.py#L439-441\n\nI'm using config for definitions of some semi complicated things. \n\nExample of use case:\n1. https://gitlab.com/autoidm/autoidm-tap-bamboohr/-/merge_requests/7 (This is merged into the master branch as well if you want to take a look there)\n    * For this scneario f you define the configurations wrong the required=True validation gets hit, but doesn't throw an error during discovery.\n    * lets say I misname the configuration for name to namee\n```\n2021-12-23T17:31:09.595670Z [info     ] time=2021-12-23 12:31:09 name=tap-bamboohr level=INFO message=Skipping parse of env var settings... name=tap-bamboohr stdio=stderr type=discovery                                                    2021-12-23T17:31:09.595782Z [info     ] time=2021-12-23 12:31:09 name=tap-bamboohr level=WARNING message=Config validation failed: 'name' is a required property name=tap-bamboohr stdio=stderr type=discovery                               2021-12-23T17:31:09.595863Z [info     ] JSONSchema was: {'type': 'object', 'properties': {'auth_token': {'type': ['string'], 'description': 'Token gathered from BambooHR, instructions are [here](https://documentation.bamboohr.com/docs#section-authentication)'}, 'subdomain': {'type': ['string'], 'description': 'subdomain from BambooHR'}, 'custom_reports': {'type': ['array', 'null'], 'items': {'type': 'object', 'properties': {'name': {'type': ['string']}, 'filters': {'type': 'object', 'properties': {'lastChanged': {'type': ['object', 'null'], 'properties': {'includeNull': {'type': ['string', 'null']}, 'value': {'type': ['string', 'null']}}}}}, 'fields': {'type': 'array', 'items': {'type': ['string']}}}, 'required': ['name', 'filters', 'fields']}, 'description': 'CustomReport full body definition, example in meltano.yml, same format as the Body for the POST request [here](https://documentation.bamboohr.com/reference/request-custom-report-1)'}}, 'required': ['auth_token', 'subdomain']} name=tap-bamboohr stdio=stderr type=discovery\n2021-12-23T17:31:09.595961Z [info     ] time=2021-12-23 12:31:09 name=root level=INFO message=Operator '__else__=None' was not found. Unmapped streams will be included in output. name=tap-bamboohr stdio=stderr type=discovery             2021-12-23T17:31:09.596680Z [info     ] Traceback (most recent call last): name=tap-bamboohr stdio=stderr type=discovery                                                                                                                     2021-12-23T17:31:09.596763Z [info     ]   File \"<string>\", line 1, in <module> name=tap-bamboohr stdio=stderr type=discovery                                                                                                                 2021-12-23T17:31:09.596830Z [info     ]   File \"/home/visch/git/tap-bamboohr/.venv/lib/python3.8/site-packages/click/core.py\", line 1128, in __call__ name=tap-bamboohr stdio=stderr type=discovery                                          2021-12-23T17:31:09.596895Z [info     ]     return self.main(*args, **kwargs) name=tap-bamboohr stdio=stderr type=discovery\n2021-12-23T17:31:09.596959Z [info     ]   File \"/home/visch/git/tap-bamboohr/.venv/lib/python3.8/site-packages/click/core.py\", line 1053, in main name=tap-bamboohr stdio=stderr type=discovery                                              2021-12-23T17:31:09.597027Z [info     ]     rv = self.invoke(ctx)      name=tap-bamboohr stdio=stderr type=discovery                                                                                                                         2021-12-23T17:31:09.597091Z [info     ]   File \"/home/visch/git/tap-bamboohr/.venv/lib/python3.8/site-packages/click/core.py\", line 1395, in invoke name=tap-bamboohr stdio=stderr type=discovery                                            2021-12-23T17:31:09.597156Z [info     ]     return ctx.invoke(self.callback, **ctx.params) name=tap-bamboohr stdio=stderr type=discovery                                                                                                     2021-12-23T17:31:09.597224Z [info     ]   File \"/home/visch/git/tap-bamboohr/.venv/lib/python3.8/site-packages/click/core.py\", line 754, in invoke name=tap-bamboohr stdio=stderr type=discovery\n2021-12-23T17:31:09.597292Z [info     ]     return __callback(*args, **kwargs) name=tap-bamboohr stdio=stderr type=discovery                                                                                                                 2021-12-23T17:31:09.597386Z [info     ]   File \"/home/visch/git/tap-bamboohr/.venv/lib/python3.8/site-packages/singer_sdk/tap_base.py\", line 460, in cli name=tap-bamboohr stdio=stderr type=discovery                                       2021-12-23T17:31:09.597463Z [info     ]     tap = cls(  # type: ignore  # Ignore 'type not callable' name=tap-bamboohr stdio=stderr type=discovery                                                                                           2021-12-23T17:31:09.597529Z [info     ]   File \"/home/visch/git/tap-bamboohr/.venv/lib/python3.8/site-packages/singer_sdk/tap_base.py\", line 82, in __init__ name=tap-bamboohr stdio=stderr type=discovery                                   2021-12-23T17:31:09.597595Z [info     ]     self.input_catalog or self._singer_catalog name=tap-bamboohr stdio=stderr type=discovery\n2021-12-23T17:31:09.597660Z [info     ]   File \"/home/visch/git/tap-bamboohr/.venv/lib/python3.8/site-packages/singer_sdk/tap_base.py\", line 218, in _singer_catalog name=tap-bamboohr stdio=stderr type=discovery                           2021-12-23T17:31:09.597730Z [info     ]     for stream in self.streams.values() name=tap-bamboohr stdio=stderr type=discovery                                                                                                                2021-12-23T17:31:09.597794Z [info     ]   File \"/home/visch/git/tap-bamboohr/.venv/lib/python3.8/site-packages/singer_sdk/tap_base.py\", line 108, in streams name=tap-bamboohr stdio=stderr type=discovery                                   2021-12-23T17:31:09.597858Z [info     ]     for stream in self.load_streams(): name=tap-bamboohr stdio=stderr type=discovery                                                                                                                 2021-12-23T17:31:09.597923Z [info     ]   File \"/home/visch/git/tap-bamboohr/.venv/lib/python3.8/site-packages/singer_sdk/tap_base.py\", line 247, in load_streams name=tap-bamboohr stdio=stderr type=discovery\n2021-12-23T17:31:09.597987Z [info     ]     for stream in self.discover_streams(): name=tap-bamboohr stdio=stderr type=discovery                                                                                                             2021-12-23T17:31:09.598051Z [info     ]   File \"/home/visch/git/tap-bamboohr/tap_bamboohr/tap.py\", line 57, in discover_streams name=tap-bamboohr stdio=stderr type=discovery                                                                2021-12-23T17:31:09.598115Z [info     ]     custom_report = CustomReport(tap=self, name=report[\"name\"], custom_report_http_post_body=report) name=tap-bamboohr stdio=stderr type=discovery                                                   2021-12-23T17:31:09.598203Z [info     ] KeyError: 'name'               name=tap-bamboohr stdio=stderr type=discovery                                                                                                                         2021-12-23T17:31:09.616971Z [info     ]                                name=tap-bamboohr stdio=stderr type=discovery                  \n```\n\nAs you can see here an error occurs in the code when we try to do a lookup on the configuration dict, and name does not exist. Instead failing at configuration validation is what I actually want here.",
      "state": "closed",
      "created_at": "2021-12-23T17:34:00.432Z",
      "updated_at": "2022-05-30T00:04:13.588Z",
      "closed_at": "2022-05-30T00:04:13.529Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/296",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/296",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/296/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/296/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#296",
        "relative": "#296",
        "full": "meltano/sdk#296"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 96,
      "epic": {
        "id": 240357,
        "iid": 96,
        "title": "SDK Development (Parent Epic)",
        "url": "/groups/meltano/-/epics/96",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 100042791,
      "iid": 298,
      "project_id": 22672923,
      "title": "Parent-child documentation confusing",
      "description": "Raising a question that came up from my team while using the SDK.\n\nOne of my team members was confused by the [Parent-Child streams](https://gitlab.com/meltano/sdk/-/blob/main/docs/parent_streams.md) docs. Specifically, they weren't sure how `group_id` was used in the path of `EpicIssuesStream`, they new it was in the context, but thought it was being set as an instance property and were confused why it wasn't working.\n\nI explained that there was probably a method like this that was implied to exist, and that the SDK does parameter replacement in paths:\n\n```python\n    def get_url_params(\n        self, context: Optional[dict], next_page_token: Optional[Any]\n    ) -> Dict[str, Any]:\n       return { 'group_id': context['group_id'], 'epic_iid': context['epic_iid'], 'page': next_page_token }\n```\n\nMight be something to consider adding/refining.",
      "state": "closed",
      "created_at": "2022-01-03T20:08:58.043Z",
      "updated_at": "2022-05-30T00:04:28.787Z",
      "closed_at": "2022-05-30T00:04:28.772Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Documentation",
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/298",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 1,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/298",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/298/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/298/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#298",
        "relative": "#298",
        "full": "meltano/sdk#298"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 81,
      "epic": {
        "id": 94267,
        "iid": 81,
        "title": "Meltano Documentation improvements",
        "url": "/groups/meltano/-/epics/81",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 100112449,
      "iid": 299,
      "project_id": 22672923,
      "title": "Support for JSON Schema refs in Schemas",
      "description": "Ref isn't currently supported in schemas, and it fails in a very peculiar way (empty object is returned)\n\nI assumed they were supported as schemas follow the json schema spec, but I guess it's not included. I believe Schemas are parsed from the `pipelinewise-singer-python = \"1.2.0\"` dependency which I believe gets parsed here https://github.com/transferwise/pipelinewise-singer-python/blob/master/singer/schema.py . It's odd to me that we're not using the `jsonschema` library here to parse the schemas but :shrug: \n\nUse case:\n1. https://github.com/AutoIDM/tap-clickup/blob/c99bb82c3b7eec7b25732ecdb1c091d5795c8420/tap_clickup/schemas/space.json?#L158 , lots of nested values that all need the same definitions. \n2. This also makes for nicer json schema if you don't have to copy paste all of the time, the tap-clickup repo uses it all of the time\n\nCurrent outcome for refs:\n1. Schema for the ref object returns an empty object. This is bad, and unexpected. This led to https://github.com/AutoIDM/tap-clickup/issues/104 . I think https://gitlab.com/meltano/sdk/-/issues/228#note_801273924 should be able to catch this kind of stuff by validating the schema is correct (in this case an empty object imo isn't correct, or at a minimum should be a warning in a validation process)",
      "state": "closed",
      "created_at": "2022-01-04T21:24:55.543Z",
      "updated_at": "2022-05-30T00:04:35.858Z",
      "closed_at": "2022-05-30T00:04:35.841Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 17,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/299",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/299",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/299/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/299/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#299",
        "relative": "#299",
        "full": "meltano/sdk#299"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 100266542,
      "iid": 303,
      "project_id": 22672923,
      "title": "Document how parent context fields are included in the child record",
      "description": "When user parent-child streams with the SDK as documented in https://sdk.meltano.com/en/latest/parent_streams.html\n\n```python\nclass GitlabStream(RESTStream):\n    # Base stream definition with auth and pagination logic \n    # This logic works for other base classes as well, including Stream, GraphQLStream, etc.\n\n\nclass EpicsStream(GitlabStream):\n\n    name = \"epics\"\n\n    # ...\n\n    def get_child_context(self, record: dict, context: Optional[dict]) -> dict:\n        \"\"\"Return a context dictionary for child streams.\"\"\"\n        return {\n            \"group_id\": record[\"group_id\"],\n            \"epic_id\": record[\"id\"],\n            \"epic_iid\": record[\"iid\"],\n        }\n\n\nclass EpicIssuesStream(GitlabStream):\n    # Note that this class inherits from the GitlabStream base class, and not from \n    # the EpicsStream class.\n\n    name = \"epic_issues\"\n\n    # EpicIssues streams should be invoked once per parent epic:\n    parent_stream_type = EpicsStream  \n\n    # Assume epics don't have `updated_at` incremented when issues are changed:\n    ignore_parent_replication_keys = True\n\n    # Path is auto-populated using parent context keys:\n    path = \"/groups/{group_id}/epics/{epic_iid}/issues\"\n\n    # ...\n```\n\nthe docs fail to mention that `group_id`, `epic_id` and `epic_iid` are all added to the child `epic_issues` records and should the dev want them, they need to be included in the stream schema.",
      "state": "closed",
      "created_at": "2022-01-07T17:23:58.922Z",
      "updated_at": "2022-05-30T00:05:06.683Z",
      "closed_at": "2022-05-30T00:05:06.660Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Documentation",
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/303",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 1,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/303",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/303/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/303/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#303",
        "relative": "#303",
        "full": "meltano/sdk#303"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 81,
      "epic": {
        "id": 94267,
        "iid": 81,
        "title": "Meltano Documentation improvements",
        "url": "/groups/meltano/-/epics/81",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 100848815,
      "iid": 305,
      "project_id": 22672923,
      "title": "Duplicate call to `discover_catalog_entries()`",
      "description": "The following discussion from !44 should be addressed:\n\n- [ ] @edgarrmondragon started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/44#note_755501269):  (+2 comments)\n\n    > @aaronsteers One thing I noticed during another round of checks is that `discover_catalog_entries` is called twice when running the tap in discovery mode. I am to [(git) blame](https://gitlab.com/meltano/sdk/-/commit/167e6c580f34a34acf4bc52d844bca47cb54e4b0#fd3598421f9ddf9445b3b51c92df2c7a7c089f49) for the path leading from `_singer_catalog` here:\n    > \n    > ```mermaid\n    > flowchart BT\n    >   SQLTap.catalog_dict --> SQLConnector.discover_catalog_entries\n    >   SQLTap.discover_streams --> SQLTap.catalog_dict\n    >   Tap.load_streams --> SQLTap.discover_streams\n    >   Tap.streams --> Tap.load_streams\n    >   Tap._singer_catalog --> Tap.streams\n    >   Tap.__init__ --> Tap._singer_catalog\n    >   Tap.cli --> Tap.__init__\n    > \n    >   Tap.catalog_json_text --> SQLTap.catalog_dict\n    >   Tap.run_discovery --> Tap.catalog_json_text\n    >   Tap.cli --> Tap.run_discovery\n    > ```\n    > \n    > This is something to keep in our radar for optimization",
      "state": "closed",
      "created_at": "2022-01-18T15:06:41.325Z",
      "updated_at": "2022-05-30T00:05:22.340Z",
      "closed_at": "2022-05-30T00:05:22.312Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Tech Debt",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/305",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/305",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/305/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/305/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#305",
        "relative": "#305",
        "full": "meltano/sdk#305"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 100877675,
      "iid": 306,
      "project_id": 22672923,
      "title": "Support `LOG_BASED` replication method",
      "description": "We don't currently have any examples of SDK-based taps which use `LOG_BASED` replication. After merging !44+, we can start exploring this method.\n\nCommunity contributions welcomed.",
      "state": "closed",
      "created_at": "2022-01-19T03:37:10.793Z",
      "updated_at": "2022-05-30T00:05:30.852Z",
      "closed_at": "2022-05-30T00:05:30.500Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/306",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 8,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/306",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/306/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/306/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#306",
        "relative": "#306",
        "full": "meltano/sdk#306"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 108,
      "epic": {
        "id": 302158,
        "iid": 108,
        "title": "Expanded Target Functionality in the SDK",
        "url": "/groups/meltano/-/epics/108",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>2278</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 100938833,
      "iid": 307,
      "project_id": 22672923,
      "title": "Discussion: Reconsider serialization method for partition-based state",
      "description": "When a tap contains multiple partitions, the state tracking for each partition is stored in a `partitions` list inside the stream's bookmark. This recently broke, and appears to be being created as a map instead of a list. However, there are advantages to storing this as a map and I'm opening this issue to discuss pros/cons and to decide if we should move to a map-based implementation permanently instead of a list-based implementation.\n\n## Consideration 1: Scalability and random-access\n\nMerging, deduping, and traversing partitions is slower if not stored in map format. Implementations will likely need to convert to a map in order to efficiently access partition states in memory, which then needs to be serialized again back into list format every time a STATE message is to be emitted. The continual conversion of the partition states between list and map formats has a performance cost.\n\n## Consideration 2: Interop with Meltano and other Singer orchestrators\n\nThe default state `merge()` behavior in Meltano requires that states be traversable as nested maps. More discussion here: \n\nRelated to Singer \"Composable states\" working group item here: https://github.com/MeltanoLabs/Singer-Working-Group/issues/6#issuecomment-1016850184\n\n## Consideration 3: Need for deterministic string keys for each partition\n\nOne challenge with trying to create a map-based implementation is that we'd need to be able to create a deterministic string key for each partition. (Whereas now the state index can be its own dictionary of any number of keys or data types).\n\nFor example, a partition index could be `{'region': 'west', 'city': 'Seattle'}` or  `{'project': 'meltano/meltano', 'issue': 12345}`.\n\n## Consideration 4: Backwards compatibility\n\nIf we want to change the schema, we can implement a conversion process in the default implementation of `load_state()` here: https://gitlab.com/meltano/sdk/blob/main/singer_sdk/tap_base.py#L274",
      "state": "closed",
      "created_at": "2022-01-19T20:56:05.937Z",
      "updated_at": "2022-05-30T00:05:38.593Z",
      "closed_at": "2022-05-30T00:05:38.578Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Tech Debt",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 9,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/307",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/307",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/307/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/307/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#307",
        "relative": "#307",
        "full": "meltano/sdk#307"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 100953312,
      "iid": 308,
      "project_id": 22672923,
      "title": "Slim down SDK package by making `sql` an 'extra'",
      "description": "In future, we can consider slimming the SDK size by having `SQL` or `sql` as an 'extra'.\n\nThe following discussion from !44 should be addressed:\n\n- [ ] @edgarrmondragon started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/44#note_814255051):  (+2 comments)\n\n    > @aaronsteers Should this be optional and added to a `sql` extra?",
      "state": "closed",
      "created_at": "2022-01-20T06:25:57.564Z",
      "updated_at": "2022-05-30T00:05:46.185Z",
      "closed_at": "2022-05-30T00:05:46.150Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "urgency::low",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/308",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/308",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/308/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/308/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#308",
        "relative": "#308",
        "full": "meltano/sdk#308"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 96,
      "epic": {
        "id": 240357,
        "iid": 96,
        "title": "SDK Development (Parent Epic)",
        "url": "/groups/meltano/-/epics/96",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 101055584,
      "iid": 310,
      "project_id": 22672923,
      "title": "Leverage schema and other API details from OpenAPI spec file",
      "description": "In a perfect world, we'd be able to leverage schema definitions from an API's publicly declared API definition such as OpenAPI spec.\n\n@edgarrmondragon has proven this is a viable path via his work here: https://github.com/edgarrmondragon/tap-shortcut\n\n---------------------------\n\nFrom https://github.com/MeltanoLabs/tap-github/pull/26#discussion_r789253333:\n\n@ericboucher:\n\n> @aaronsteers @edgarrmondragon are there any tools to extract the schema/typing directly from an OpenAPI file? It would be pretty neat if we could simply plug into github/rest-api-description@main/descriptions-next/api.github.com/api.github.com.json to generate and validate types\n\n@edgarrmondragon:\n\n> @ericboucher not any that do it as we need out-of-the-box, but I have an implementation here: https://github.com/edgarrmondragon/tap-shortcut/blob/99bb738608305baa11fe26acfe32d2c9c7089a58/tap_shortcut/tap.py#L86-L121.\n\n------------------------\n\nFor my part, I have been thinking about the same, and wanted to start a discussion on whether an OpenAPI spec can be leveraged to speed up the development process.",
      "state": "closed",
      "created_at": "2022-01-21T17:12:12.264Z",
      "updated_at": "2022-05-30T00:06:01.602Z",
      "closed_at": "2022-05-30T00:06:01.575Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 9,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/310",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/310",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/310/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/310/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#310",
        "relative": "#310",
        "full": "meltano/sdk#310"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 101328586,
      "iid": 312,
      "project_id": 22672923,
      "title": "Document all plugin CLI options",
      "description": "The [current docs page](https://sdk.meltano.com/en/latest/implementation/cli.html) documents only the `--config` and `--catalog` options for taps. It would be good to include documentation for other options as well as options for targets and mappers.",
      "state": "closed",
      "created_at": "2022-01-26T19:19:06.395Z",
      "updated_at": "2022-05-30T00:06:17.907Z",
      "closed_at": "2022-05-30T00:06:17.420Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Documentation",
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/312",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 2,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/312",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/312/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/312/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#312",
        "relative": "#312",
        "full": "meltano/sdk#312"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 81,
      "epic": {
        "id": 94267,
        "iid": 81,
        "title": "Meltano Documentation improvements",
        "url": "/groups/meltano/-/epics/81",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 101385006,
      "iid": 313,
      "project_id": 22672923,
      "title": "Support class method stream discovery for all stream types",
      "description": "The Athena tap uses a stream class method to discover streams: https://github.com/MeltanoLabs/tap-athena/blob/master/tap_athena/tap.py#L29, the SDK doesn't currently make this easy for any other type of stream.\n\nI'm currently writing a tap for a REST API, where one of the resources is a 'reports' endpoint (see https://developer.niceincontact.com/API/ReportingAPI#/Reporting/Generate%20a%20datadownload%20report%20file). Users create these reports in the UI, but they can be retrieved through the API. The API provides an endpoint to retrieve the report data given the report ID, and also an endpoint to list available reports.\n\nIt would be really great to incorporate the thinking from https://gitlab.com/meltano/sdk/-/merge_requests/44 into all stream types, allowing tap developers to more easily incorporate 'dynamic' stream discovery. \n\nRight now, for me to call the list reports endpoint and instantiate a stream for each to return in `tap.py` is quite awkward when using the `RESTStream`. I'd like to be able to implement a method like `NiceInContactReportStream.discover_reports()`, but the `self.http_headers` and `self.authenticator.auth_headers` I need to authenticate with are attributes of an instantiated class, so I can't make `discover_reports()` a class method. As a workaround, I have to instantiate an instance of the `NiceInContactReportStream` with some fake values to then be able to call `discover_reports()`.\n\nMy example `discover_report_ids()`\n\n```\nclass NiceInContactStream(RESTStream):\n    name = \"base\" # has to have a name to be able to instantiate\n    schema = { # has to have a schema to be able to instantiate\n        \"stub\": {\n            \"type\": \"number\",\n        }\n    }\n    ...\n\n    def discover_reports(self):\n        \"\"\"Used in discovery.\"\"\"\n        headers = self.http_headers\n        headers.update(self.authenticator.auth_headers)\n\n        resp = requests.get(\n            url=\"https://api-c44.nice-incontact.com/incontactapi/services/v23.0/reports\",\n            headers=headers,\n        ).json()\n\n        datadownload_reports = [report for report in resp[\"reports\"] if report[\"reportType\"] == \"DataDownload\"]\n        return datadownload_reports\n```\n\nAnd its use in tap.py\n\n```\n    def discover_streams(self) -> List[Stream]:\n        \"\"\"Return a list of discovered streams.\"\"\"\n        nice_in_contact_stream = NiceInContactStream(self)\n        reports = nice_in_contact_stream.discover_reports()\n\n        return [ReportStream(self, report)\n            for report in reports\n        ]\n```\n\nHope this makes sense but happy to elaborate more!",
      "state": "closed",
      "created_at": "2022-01-27T13:04:54.400Z",
      "updated_at": "2022-05-30T00:06:26.818Z",
      "closed_at": "2022-05-30T00:06:26.796Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 2585766,
        "username": "NiallRees",
        "public_email": "",
        "name": "Niall",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/2585766/avatar.png",
        "web_url": "https://gitlab.com/NiallRees"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/313",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/313",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/313/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/313/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#313",
        "relative": "#313",
        "full": "meltano/sdk#313"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 101417669,
      "iid": 314,
      "project_id": 22672923,
      "title": "Improved `--help` text for `--schema=?` CLI option enums",
      "description": "Laurent Sava\u00ebte @LaurentS:\n\n> @edgarrmondragon I've updated the code as you suggested. It works, but I also feel like it's a bit suboptimal in the sense that the help displayed shows --test TEXT instead of listing the options available. I wonder if following the way --format is defined with a Choice might make it more user friendly...\n\nThis is logged as a follow-on ~\"urgency::low\" to print more helpful `--help` guidance. Would pair well with #312.\n\nThe following discussion from !218 should be addressed:\n\n- [ ] @edgarrmondragon started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/218#note_759581853):  (+3 comments)",
      "state": "closed",
      "created_at": "2022-01-27T20:59:58.653Z",
      "updated_at": "2022-05-30T00:06:33.728Z",
      "closed_at": "2022-05-30T00:06:33.709Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "urgency::low",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/314",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": 2,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/314",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/314/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/314/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#314",
        "relative": "#314",
        "full": "meltano/sdk#314"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 96,
      "epic": {
        "id": 240357,
        "iid": 96,
        "title": "SDK Development (Parent Epic)",
        "url": "/groups/meltano/-/epics/96",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 101492605,
      "iid": 317,
      "project_id": 22672923,
      "title": "Make it easier to fix data types to conform to a stream's schema",
      "description": "In an effort to keep streams DRY, I frequently use:\n\n```\nclass MyStream(BaseStream):\n    schema = th.PropertiesList(\n        th.Property(\"field1\", th.IntegerType),\n        th.Property(\"field2\", th.NumberType),\n        th.Property(\"field3\", th.IntegerType),\n        th.Property(\"field4\", th.IntegerType),\n        th.Property(\"field5\", th.IntegerType),\n        th.Property(\"field6\", th.DateTimeType),\n        th.Property(\"field7\", th.IntegerType),\n        th.Property(\"field8\", th.IntegerType),\n        th.Property(\"field9\", th.IntegerType),\n        th.Property(\"field10\", th.IntegerType)\n    )\n\n    schema_values = {k: v[\"type\"][0] for k, v in schema[\"properties\"].items()}\n\n    def post_process(self, row: dict, context: Optional[dict] = None) -> dict:\n        \"\"\"Fix the data types.\"\"\"\n\n        # Convert the data types\n        for k, v in row.items():\n            if not v:\n                row[k] = None\n            elif self.schema_values[k] == \"integer\":\n                row[k] = int(v)\n            elif self.schema_values[k] == \"number\":\n                row[k] = float(v)\n        return row\n```\n\nto correct the data types from APIs.\n\nIs this something which the maintainers think would be useful to add (a better version of) into the SDK?",
      "state": "closed",
      "created_at": "2022-01-28T22:15:31.139Z",
      "updated_at": "2022-05-30T00:06:56.830Z",
      "closed_at": "2022-05-30T00:06:56.796Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Discussion",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 2585766,
        "username": "NiallRees",
        "public_email": "",
        "name": "Niall",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/2585766/avatar.png",
        "web_url": "https://gitlab.com/NiallRees"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/317",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/317",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/317/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/317/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#317",
        "relative": "#317",
        "full": "meltano/sdk#317"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 101495823,
      "iid": 318,
      "project_id": 22672923,
      "title": "Add reference paginator implementations",
      "description": "## Summary\n\n[//]: # (Concisely summarize the feature you are proposing.)\n\nAdd reference and common pagination implementations in a similar fashion to _authenticators_.\n\n## Proposed benefits\n\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nThere is a limited number of pagination standards, which may only differ in minute details, much like authentication headers (`Authorization: Bearer <token>`, `Authorization: Token <>`), so having a sensible set of pre-built implementations may simplify things further for users by allowing them to pick one off-the-shelf.\n\nAnother benefit is that having dedicated pagination classes makes unit-testing them much easier.\n\nYet another benefit of moving to a dedicated class for pagination, is that the paginator state doesn't need to be limited to the previous value but can include arbitrary attributes, like the last-seen record (https://gitlab.com/meltano/sdk/-/issues/124+).\n\n## Proposal details\n\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nI have a reference implementation [here](https://github.com/edgarrmondragon/tap-readthedocs/pull/13/files).\n\n**TL;DR**\n\n```python\nclass APIPaginator:\n    \"\"\"An API paginator object.\"\"\"\n\n    @property\n    def current_value(self) -> TPageToken:\n        \"\"\"Get the current pagination value.\"\"\"\n        ...\n\n    @property\n    def finished(self) -> bool:\n        \"\"\"Get a flag that indicates if the last page of data has been reached.\"\"\"\n        ...\n\n    @property\n    def count(self) -> int:\n        \"\"\"Count the number of pages traversed so far.\"\"\"\n        ...\n\n    def advance(self, response: Response) -> None:\n        \"\"\"Get a new page value and advance the current one.\"\"\"\n        ...\n\n    def has_more(self, response: Response) -> bool:\n        \"\"\"Override this method to check if the endpoint has any pages left.\"\"\"\n        ...\n\n    @abstractmethod\n    def get_next(self, response: Response) -> Optional[TPageToken]:\n        \"\"\"Get the next pagination token or index from the API response.\"\"\"\n        ...\n```\n\n## Best reasons not to build\n\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nCan't think of any. The current `RESTStream.get_next_page_token` can be slowly deprecated with the introduction of a paginator that wraps the stream (as in [tap-readthedocs/client.py at 09dca8c653cd73e51ce265e239c94c68479481b1 \u00b7 edgarrmondragon/tap-readthedocs \u00b7 GitHub](https://github.com/edgarrmondragon/tap-readthedocs/blob/09dca8c653cd73e51ce265e239c94c68479481b1/tap_readthedocs/client.py#L17-L48)).",
      "state": "closed",
      "created_at": "2022-01-29T01:34:13.117Z",
      "updated_at": "2022-05-30T00:07:04.464Z",
      "closed_at": "2022-05-30T00:07:04.445Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Architecture Decision",
        "kind::Tech Debt",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/318",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/318",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/318/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/318/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#318",
        "relative": "#318",
        "full": "meltano/sdk#318"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 101495895,
      "iid": 319,
      "project_id": 22672923,
      "title": "Create HTTPConnector interface for all API interactions",
      "description": "## Summary\n\n[//]: # (Concisely summarize the feature you are proposing.)\n\nCurrently, for HTTP taps (REST, GraphQL, etc.), all aspects of making a request go through the stream class. This works well for most access patterns where one endpoint corresponds to one stream. However, there are other use cases that require making requests not with the direct purpose of yielding records.\n\n## Proposed benefits\n\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\n- Another request is required to complement or enrich the data, like when trying to get a complete record after a response that contains only IDs (https://gitlab.com/meltano/sdk/-/issues/93+).\n  \n- The API is dynamic and offers metadata endpoints that may inform the tap about available streams (https://gitlab.com/meltano/sdk/-/issues/313+) and/or their schemas (https://gitlab.com/meltano/sdk/-/issues/310+).\n  \n- The underlying request is not accessible, making it harder or unclear how to tweak parameters like timeout limits, caching (https://gitlab.com/meltano/sdk/-/issues/237+), etc.\n  \n- Async requests are not currently supported. Separation of concerns in an object dedicated to HTTP requests might make it easier for the community to implement and contribute an async connector (https://gitlab.com/meltano/sdk/-/issues/291+ and https://gitlab.com/meltano/sdk/-/issues/184+).\n  \n- A single interface for all HTTP sources would make features and bugfixes automatically apply to existing stream types and new ones too (https://gitlab.com/meltano/sdk/-/issues/221+).\n  \n\n## Proposal details\n\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\n- Build a module dedicated to HTTP sources, i.e. `singer_sdk.http`.\n  \n  - `singer_sdk.http.connector` contains the `HTTPConnector` class. In the MVC, `HTTPConnector` would manage aspects that the exiting stream classes do not, like the `Session` object.\n    \n  - `singer_sdk.http.streams.base`. In the MVC, methods useful to both GraphQL and REST streams can be moved to `HTTPStream` in this module without introducing breaking changes.\n    \n  - `singer_sdk.http.streams.rest` moved from `singer_sdk.streams.rest`\n    \n  - `singer_sdk.http.streams.graphql` moved from `singer_sdk.streams.grapql`\n    \n  - `singer_sdk.http.authenticators` moved from `singer_sdk.authenticators`\n    \n  - `singer_sdk.http.paginators` new module if https://gitlab.com/meltano/sdk/-/issues/318+ is implemented.\n    \n\n## Best reasons not to build\n\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nThis would not add any new features for existing taps and only counts as addressing maintainability and extensibility (encourage contributions).",
      "state": "closed",
      "created_at": "2022-01-29T01:38:55.099Z",
      "updated_at": "2022-05-30T00:07:12.353Z",
      "closed_at": "2022-05-30T00:07:12.332Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Tech Debt",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/319",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/319",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/319/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/319/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#319",
        "relative": "#319",
        "full": "meltano/sdk#319"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 96,
      "epic": {
        "id": 240357,
        "iid": 96,
        "title": "SDK Development (Parent Epic)",
        "url": "/groups/meltano/-/epics/96",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 101497131,
      "iid": 320,
      "project_id": 22672923,
      "title": "Support arbitrary key-value pairs in metadata",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\n\nAccording to the [singer metadata spec](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#metadata):\n\n> A tap is free to write ANY type of metadata they feel is useful for describing fields in the schema, although several reserved keywords exist.\n\nHowever, our `dataclass` implementation prevents the addition of arbitrary fields to the metadata by the tap developer. So, something like this is not possible:\n\n```json\n{\n  \"metadata\" : {\n    \"selected\" : true,\n    \"some-other-metadata\" : \"whatever\"\n  },\n  \"breadcrumb\" : [\"properties\", \"some-field-name\"]\n}\n```\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nTaps can emit informational metadata. This tags can be later leveraged by data catalogs and orchestrators (https://gitlab.com/meltano/meltano/-/issues/2611+).\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nAs suggested above, tap devs interested in adding key-value pairs to their metadata objects would have to subclass `_singer.Metadata` etc. This is complicated by the use those of classes in `Tap` and `Stream`.\n\nTo avoid that, we could easily add a `tags` property that tap developers can fill-in with relevant metadata:\n\n```json\n{\n  \"metadata\" : {\n    \"selected\" : true,\n    \"tags\": {\n      \"some-other-metadata\" : \"whatever\"\n    }\n  },\n  \"breadcrumb\" : [\"properties\", \"some-field-name\"]\n}\n```\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nThere may be better ways to support the addition of extra metadata fields.",
      "state": "closed",
      "created_at": "2022-01-29T03:25:39.496Z",
      "updated_at": "2022-05-30T00:07:19.806Z",
      "closed_at": "2022-05-30T00:07:19.781Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/320",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/320",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/320/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/320/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#320",
        "relative": "#320",
        "full": "meltano/sdk#320"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    }
  ]
}
