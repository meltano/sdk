{
  "cookies": {
    "_cfuvid": "SbvnAjBd75LHOGqmPZNVNFdASW5y09b3aiDcdK6HatU-1747940873560-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:53.452667+00:00",
  "elapsed": 0.424504,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e9959ecc6ac4f-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:53 GMT",
    "ETag": "W/\"ba954f9d5b4175e0e816d20e68eb1022\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=2&per_page=20>; rel=\"prev\", <https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=3&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=SbvnAjBd75LHOGqmPZNVNFdASW5y09b3aiDcdK6HatU-1747940873560-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-37-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-b",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"212d196ef0d83ef146db6b40c839add6\",\"version\":\"1\"}",
    "x-next-page": "",
    "x-page": "3",
    "x-per-page": "20",
    "x-prev-page": "2",
    "x-request-id": "212d196ef0d83ef146db6b40c839add6",
    "x-runtime": "0.207368",
    "x-total": "45",
    "x-total-pages": "3"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/95/issues?page=3"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/95/issues?page=3",
  "_decoded_content": [
    {
      "id": 84893963,
      "iid": 93,
      "project_id": 22672923,
      "title": "Streamline complementary REST requests",
      "description": "There are at least two use cases for developers to make additional REST API calls beyond what is handled already by the SDK:\n\n1. During discovery - The tap may want to ping a REST API ahead of calls to `get_records()`.\n2. During data-append - The tap may need to supliment the core data with additional calls in the `post_process()` handler.\n\nFor both of these cases, we should establish a pattern that developers can implement with confidence.\n\nAs of today, the developer would likely implement calls against the `requests` library directly. The biggest downside of this approach is that those extra calls may have inconsistencies in regards to _authentication_ and _retry_ logic.",
      "state": "closed",
      "created_at": "2021-04-08T23:56:48.053Z",
      "updated_at": "2022-05-29T23:35:56.676Z",
      "closed_at": "2022-05-29T23:35:56.646Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "Office Hours::Discussed",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/93",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/93",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/93/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/93/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#93",
        "relative": "#93",
        "full": "meltano/sdk#93"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 536382,
      "relative_position": -3078
    },
    {
      "id": 84743319,
      "iid": 91,
      "project_id": 22672923,
      "title": "Compliance with Spec, as documented in new meltano.com Singer Spec docs",
      "description": "With https://gitlab.com/meltano/meltano/-/merge_requests/2083 now documenting the Singer Spec in an easier-to-digest fashion, let's apply that page as a test and checklist for SDK completeness.\n\n1. [x] Metadata\n    - We haven't invested much in `discoverable metadata`. We should declare these properties automatically when we can.\n    - If and when the SDK cannot automatically implement the full set of discoverable metadata attributes, we should provide easy-to-use controls for the developer to do so.\nbe sensitive in nature.\n1. [x] Stream selection (TODO, as documented in #7 and resolving in !121)\n    - Additionally, as related to the `metadata` topic above:\n      - [x] `inclusion` - Should default to `automatic` for replication keys and primary keys, `available` for all others.\n      - [x] `selected-by-default` - Should default to `true`\n          - [ ] Should be overridable so the developer can use `false` when the stream is known to be sensitive in nature\n1. [x] Add logging for metrics types:\n    - [x] `http_request_duration` (type: `timer`) - If personally find these messages overly verbose and I often wish I could mute them. Nevertheless, we should at least support emitting them.\n    - [x] `record_count` (type: `counter`) - Per the cadence of STATE messages, we can simultaneously emit counter metrics.\n\nDocumentation updates:\n\nOnce completed, the following documentation pages should also be updated:\n\n- [ ] `docs/implementation/catalog_metatadata.md`: https://sdk.meltano.com/en/latest/implementation/catalog_metadata.html\n- [x] `docs/implementation/metrics.md`\n- [x] `docs/implementation/catalog.md`: https://sdk.meltano.com/en/latest/implementation/cli.html#input-catalog-catalog",
      "state": "closed",
      "created_at": "2021-04-06T21:43:13.278Z",
      "updated_at": "2021-09-20T14:47:08.110Z",
      "closed_at": "2021-09-20T14:47:08.091Z",
      "closed_by": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "labels": [
        "Accepting Merge Requests",
        "CLI",
        "Configuration",
        "Extract",
        "Marketing::Blog Feature",
        "flow::Doing",
        "kind::Feature",
        "urgency::default",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2199288,
        "iid": 186,
        "group_id": 2524164,
        "title": "Fri: Sep 17, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-08-23T17:50:48.060Z",
        "updated_at": "2021-09-21T18:13:46.060Z",
        "due_date": "2021-09-17",
        "start_date": "2021-09-11",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/186"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 11,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/91",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 11,
        "completed_count": 9
      },
      "weight": 8,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/91",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/91/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/91/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#91",
        "relative": "#91",
        "full": "meltano/sdk#91"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 531549,
      "relative_position": -2052
    },
    {
      "id": 84668838,
      "iid": 2698,
      "project_id": 7603319,
      "title": "Ability to use relative path in plugin's `executable` property",
      "description": "As part of https://gitlab.com/meltano/singer-sdk/-/merge_requests/52, there is a need to provide a path to a plugin executable which is not available on PATH or within a meltano-managed virtual environment.\n\n## Scenario\n\nThe plugin's executable should reference a local script called `tap-mytest.sh` in the same directory as `meltano.yml` (i.e. `./tap-mytest.sh`).\n\n## Issue Description\n\n- Meltano is not able to locate the executable when specified using any of the following forms: `./tap-mytest.sh, `tap-mytest.sh`, or `$MELTANO_PROJECT_ROOT/tap-mytest.sh`.\n- Meltano can correctly locate the executable if specified as a fully-qualified path (i.e. `/path/to/source/tap-mytest/tap-mytest.sh`).\n- For portability, we would want to be able to reference a locally-available executable either by relative reference or using the `$MELTANO_PROJECT_ROOT` [environment variable](https://meltano.com/docs/configuration.html#expansion-in-setting-values), or both.\n- According to the docs [here](https://meltano.com/docs/configuration.html#expansion-in-setting-values), it appears that the environment variable is available in `config` section, but perhaps not also in the `executable` property.",
      "state": "closed",
      "created_at": "2021-04-05T23:35:40.019Z",
      "updated_at": "2021-04-13T15:39:32.266Z",
      "closed_at": "2021-04-13T15:39:31.931Z",
      "closed_by": {
        "id": 87854,
        "username": "DouweM",
        "public_email": "",
        "name": "Douwe Maan",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bbb752c75ae2744bddf1640d75edf9b6f7d4e5f4fbba4a4f0910961e6f0519b9?s=80&d=identicon",
        "web_url": "https://gitlab.com/DouweM"
      },
      "labels": [
        "Extract",
        "flow::To Do"
      ],
      "milestone": {
        "id": 1931841,
        "iid": 154,
        "group_id": 2524164,
        "title": "Fri: Apr 16, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-03-08T16:35:44.236Z",
        "updated_at": "2021-04-19T19:30:52.738Z",
        "due_date": "2021-04-17",
        "start_date": "2021-04-10",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/154"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2698",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2698",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2698/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2698/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": "https://gitlab.com/api/v4/projects/7603319/issues/2341"
      },
      "references": {
        "short": "#2698",
        "relative": "#2698",
        "full": "meltano/meltano#2698"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 528976,
      "relative_position": -1539
    },
    {
      "id": 82056187,
      "iid": 79,
      "project_id": 22672923,
      "title": "Test leakage in `test_cookiecutter.py`",
      "description": "The cookiecutter does not delete the temporary `.output` directory between test executions. In practice, this rarely creates a problem, and the workaround when  a problem occurs is to simply delete the temporary `.output`.",
      "state": "closed",
      "created_at": "2021-03-31T22:57:46.936Z",
      "updated_at": "2022-05-29T23:34:04.515Z",
      "closed_at": "2022-05-29T23:34:04.497Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/79",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/79",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/79/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/79/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#79",
        "relative": "#79",
        "full": "meltano/sdk#79"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 521591,
      "relative_position": -1026
    },
    {
      "id": 81745216,
      "iid": 62,
      "project_id": 22672923,
      "title": "add support for non sorted streams",
      "description": "The default behavior of the singer sdk is that the stream should have their data sorted based on the replication key in ascending order meaning that the replication key value of the last item received should be saved as the state. The state of a \nstream is actually updated after each record received but does not take into account if the data is sorted or not.\n\nThat said i believe we should add a way to save the state of a stream by taking the maximum replication key value of all the records received from a page.\n\nBelow you can find attached a patch of a simple implementation i carried out to handle this. Although it does not take into account a tap failure/restart.\n[0001-add-support-for-non-sorted-streams.patch](/uploads/45c4deffa23d3792873c1894af5bdebe/0001-add-support-for-non-sorted-streams.patch).\nThe implementation adds a method to the Stream class which can be overrided to compare the current state value with the current record being pushed and return the new value of the state.\nBelow is how i used it in my case:\n\n    def maximum(self, state: dict, last_record: dict):\n        current_value = state.get(self.replication_key, None)\n        new_value = last_record.get(self.replication_key, None)\n\n        if current_value and new_value:\n            current_datetime = pendulum.parse(current_value)\n            new_datetime = pendulum.parse(new_value)\n            return current_value if current_datetime >= new_datetime else new_value\n\n        return new_value if new_value else current_value\n\nI hope this helps. :)",
      "state": "closed",
      "created_at": "2021-03-26T19:27:39.956Z",
      "updated_at": "2021-04-23T12:05:46.329Z",
      "closed_at": "2021-04-23T12:05:46.157Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Extract",
        "flow::Doing"
      ],
      "milestone": {
        "id": 1943872,
        "iid": 155,
        "group_id": 2524164,
        "title": "Fri: Apr 23, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-03-15T16:24:26.086Z",
        "updated_at": "2021-04-26T15:48:44.941Z",
        "due_date": "2021-04-24",
        "start_date": "2021-04-17",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/155"
      },
      "assignees": [],
      "author": {
        "id": 8447031,
        "username": "egi-gjevori",
        "public_email": "",
        "name": "egi-gjevori",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b4903682639e52e96f0dcca63d6d74723a9c6136c76e07ce736d7a55a4ddfbf5?s=80&d=identicon",
        "web_url": "https://gitlab.com/egi-gjevori"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 18,
      "merge_requests_count": 1,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/62",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/62",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/62/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/62/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#62",
        "relative": "#62",
        "full": "meltano/sdk#62"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 512739,
      "relative_position": 0
    }
  ]
}
