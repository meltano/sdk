{
  "cookies": {
    "_cfuvid": "LqxQul1qhFfS40L5f5NLjkAulki1jGh2LTHLty7vYw0-1747940873054-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:52.987631+00:00",
  "elapsed": 0.556329,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e9955e8b946e7-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:53 GMT",
    "ETag": "W/\"fd430e5a9627888e3ab0043373b1419a\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=1&per_page=20>; rel=\"prev\", <https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=3&per_page=20>; rel=\"next\", <https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/95/issues?epic_iid=95&id=2524164&page=3&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=LqxQul1qhFfS40L5f5NLjkAulki1jGh2LTHLty7vYw0-1747940873054-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-55-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-b",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"c6fcc6de908f1bab33f1b50e548d7d81\",\"version\":\"1\"}",
    "x-next-page": "3",
    "x-page": "2",
    "x-per-page": "20",
    "x-prev-page": "1",
    "x-request-id": "c6fcc6de908f1bab33f1b50e548d7d81",
    "x-runtime": "0.342686",
    "x-total": "45",
    "x-total-pages": "3"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/95/issues?page=2"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/95/issues?page=2",
  "_decoded_content": [
    {
      "id": 92051023,
      "iid": 192,
      "project_id": 22672923,
      "title": "Support variant `object` types in tap SCHEMA",
      "description": "As described in https://gitlab.com/meltano/sdk/-/merge_requests/120\n\nPer discussions in this thread:\n\n1. We _do_ allow `variant` objects and we will merge MRs that allow this to \"just work\" in a tap.\n2. We _do not_ recommend that tap developers use this practice until it has broader compatibility with targets.\n3. We _do not_ have robust testing yet on the behavior of variant objects in regards to node selection.\n4. We expect #186 will introduce a `DATATYPE_FAILSAFE` capability (or similar) which will let targets advertise that they can accept these or similarly complex/ambiguous types.\n5. We expect #174  will allow inline schema detection, which will reduce the need for variant schemas in SDK-based taps.\n\n@edgarrmondragon summarizes it well:\n\n> If the target doesn't support that, I would consider it **a bug in the target** (or missing a `DATATYPE_FAILSAFE` feature) since most databases are able to either manipulate JSON stored in text columns, or even have special column types. Even for targets like CSVs, the loader should be able to stringify the JSON with the right escaping.\n\nRemaining todos:\n\n- [ ] Document the above best practices, recommendations, and considerations somewhere in sdk.meltano.com (low pri?)\n- [ ] Continue to expand test coverage, esp. node selection, for variant object types (low pri?)",
      "state": "closed",
      "created_at": "2021-08-16T16:37:48.198Z",
      "updated_at": "2022-05-29T23:49:51.291Z",
      "closed_at": "2022-05-29T23:49:51.272Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Community-Contributed MR",
        "flow::To Do",
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 17,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/192",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/192",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/192/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/192/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#192",
        "relative": "#192",
        "full": "meltano/sdk#192"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 858738,
      "relative_position": -15903
    },
    {
      "id": 90519923,
      "iid": 171,
      "project_id": 22672923,
      "title": "Allow Authenticator to mutate outgoing request",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\nSome APIs use a form of [digest authentication](https://en.wikipedia.org/wiki/Digest_access_authentication) where the URL, query parameters, body, API secrets and a [_nonce_](https://en.wikipedia.org/wiki/Cryptographic_nonce) are required to sign a request. An example of this sort of authentication is used by the [Bitso API](https://bitso.com/api_info?python#generating-api-keys).\n\nAt the moment, adding this auth method to a tap implies overriding `RESTStream.prepare_request` with an almost identical implementation, only adding the lines that pertain to the calculation of the right auth headers using the other request arguments.\n\nI propose instead, allowing authenticator class to mutate the outgoing request, giving it access to the raw, unprepared, request object so it can be \"signed\", e.g. headers updated appropriately.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\n1. The base `RESTStream.prepare_request` would then rarely need to be overridden even for idiosyncratic authentication mechanisms.\n2. Authentication is further decoupled from the client/stream implementation.\n3. Support other \"dynamic\" authentication methods that need access to the request.\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nMake the authenticator interface ` APIAuthenticatorBase` have an abstract method `authenticate_request(self, request: requests.Request)` and use this inside of `RESTStream.prepare_request`:\n\n```python\nclass RESTStream(Stream, metaclass=abc.ABCMeta):\n    def prepare_request(\n        self, context: Optional[dict], next_page_token: Optional[Any]\n    ) -> requests.PreparedRequest:\n        \"\"\"Prepare a request object.\n\n        If partitioning is supported, the `context` object will contain the partition\n        definitions. Pagination information can be parsed from `next_page_token` if\n        `next_page_token` is not None.\n        \"\"\"\n        http_method = self.rest_method\n        url: str = self.get_url(context)\n        params: dict = self.get_url_params(context, next_page_token)\n        request_data = self.prepare_request_payload(context, next_page_token)\n        headers = self.http_headers\n\n        request = requests.Request(\n            method=http_method,\n            url=url,\n            headers=headers,\n            params=params,\n            data=request_data,\n        )\n        # Mutate the request to include any auth headers, parameters, etc.\n        self.authenticator.authenticate_request(request)\n\n        prepared_request: requests.PreparedRequest = (\n            self.requests_session.prepare_request(request)\n        )\n        return prepared_request\n```\n\nFor the API that motivated this issue, the authenticator class would look like this:\n\n```python\n\"\"\"Bitso Authentication.\"\"\"\n\nimport hashlib\nimport hmac\nimport json\nimport time\nfrom urllib.parse import urlencode, urlparse\n\nfrom requests import Request\nfrom singer_sdk.authenticators import APIAuthenticatorBase\n\n\nclass BitsoAuthenticator(APIAuthenticatorBase):\n    \"\"\"Authenticator class for Bitso.\"\"\"\n\n    @classmethod\n    def create_for_stream(cls, stream) -> \"BitsoAuthenticator\":\n        \"\"\"Create the authenticator for the stream.\"\"\"\n        return cls(stream=stream)\n\n    def authenticate_request(self, request: Request) -> None:\n        \"\"\"Mutate outgoing request with authentication data.\n\n        See: https://bitso.com/api_info?python#creating-and-signing-requests\n        \"\"\"\n        bitso_key: str = self.config[\"key\"]\n        bitso_secret: str = self.config[\"secret\"]\n        nonce = str(int(round(time.time() * 1000)))\n\n        _, path = request.url.split(self.config[\"base_url\"])\n        message = nonce + request.method + path\n\n        if request.method.lower() == \"post\":\n            message += json.dumps(request.data)\n\n        if request.params:\n            message += \"?\" + urlencode(request.params)\n\n        signature = hmac.new(\n            bitso_secret.encode(\"utf-8\"),\n            message.encode(\"utf-8\"),\n            hashlib.sha256,\n        ).hexdigest()\n        auth_header = \"Bitso %s:%s:%s\" % (bitso_key, nonce, signature)\n\n        # Update request with Bitso auth\n        request.headers.update({\"Authorization\": auth_header})\n```\n\nOther authentication methods would require simpler `authenticate_request` implementations that perhaps only add a header, given a token.\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\n1. Arguably, overriding `prepare_request` is not too much of a burden.",
      "state": "closed",
      "created_at": "2021-07-19T20:05:11.046Z",
      "updated_at": "2022-05-29T23:46:51.058Z",
      "closed_at": "2022-05-29T23:46:51.039Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/171",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/171",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/171/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/171/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#171",
        "relative": "#171",
        "full": "meltano/sdk#171"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 971464,
      "relative_position": -17955
    },
    {
      "id": 87223411,
      "iid": 130,
      "project_id": 22672923,
      "title": "Handle `SIGTERM` messages to shut down gracefully",
      "description": "## Summary\n\nAs brought up in [this slack conversation](https://meltano.slack.com/archives/CQUDGG7U2/p1621212575038600?thread_ts=1621134078.037500&cid=CQUDGG7U2), we have an opportunity to handle [`SIGTERM` messages](https://linuxhandbook.com/sigterm-vs-sigkill/#:~:text=Though%20both%20of%20these%20signals,cannot%20be%20handled%20or%20blocked.) gracefully. \n\n## Proposed benefits\n\nThis could improve SDK-based taps' functionality when being told to shut down gracefully.\n\n## Proposal details\n\n- For any sorted incremental streams: we can flush the current stream and cancel syncing any other records.\n- For non-sorted streams and/or streams which do not support incremental refresh: we may choose to continue syncing until the stream sync completes (or until `SIGKILL` forces shutdown).\n- Avoid starting any other streams once the running streams are handled, as specified above.\n\n\n## Best reasons not to build\n\nNo downsides, no reason not to implement.",
      "state": "closed",
      "created_at": "2021-05-17T18:16:11.221Z",
      "updated_at": "2022-05-29T23:40:34.492Z",
      "closed_at": "2022-05-29T23:40:34.473Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "kind::Feature"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/130",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/130",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/130/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/130/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#130",
        "relative": "#130",
        "full": "meltano/sdk#130"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 609136,
      "relative_position": -13851
    },
    {
      "id": 86618094,
      "iid": 123,
      "project_id": 22672923,
      "title": "Decide best implementation for input catalog SCHEMA handling",
      "description": "Currently the SDK automatically handles selection (!26 and #105) via an input catalog. We also pass along the input catalog to the developer via the overloadable `Stream.apply_catalog()`, in case the developer wants to handle other overrides from the catalog input. We do not try to force apply schema from the catalog.\n\nIn theory at least, there are four ways a schema could be applied:\n\n1. **Cast data types**: if a property's json schema type is different from that provided in the catalog schema, we could cast it. \n    - Likely would cause failures any time a change occurs in the course of upstream system's lifecycle, as follows:\n        1. User runs discovery to create `catalog.json`.\n        2. User manually annotates `catalog.json` with `selected = true` on desired streams and properties.\n        3. User also specified `selected-by-default` according to whether they want new fields auto-included.\n        4. User stores their customized `catalog.json` to pass it to subsequent executions of the tap, as the `--catalog` input argument.\n        5. Some time in the future a data type changes in the upstream system.\n        6. Tap breaks and user can no longer use the catalog.json file until resolving the type issue.\n        7. When the type issue is \"fixed\" by setting to whatever the new type is, the target auto-applies the change anyway.\n    - Admittedly, many orchestrators such as Meltano make this easier by dynamically applying selection logic so they don't have to physically store the exact catalog.json file. Still, in those scenarios there's also not an expectation that we are passing a schema override.\n    - One place I have seen this being helpful is for database types which fail to detect their type and instead emit an empty type object. However, in this case, I think the better generic behavior is to ensure that we coalesce the type to `string` if it is otherwise not detectable.\n2. **Apply schema subtractions** as deselection logic: \n    - We could treat missing properties in the catalog schema as implicit 'deselection' of the columns, as if their `selected` property was set to false.\n    - Arguably, this behavior is better implemented by the user selecting only the properties desired, and then setting `selected-by-default` to `false` as described [here in the spec](https://meltano.com/docs/singer-spec.html#metadata).\n    - The downside of applying this logic is that we may inadvertently drop newly added properties the user would have preferred to auto-select (again, per the `selected-by-default` property).\n3. **Apply schema additions** to create empty properties:\n    - We could create an empty field if a property exists in the catalog's schema but that field is not known to the tap developer.\n4. **Print a warning message.**\n    - Rather than take any specific action to change behavior, we could simply print a warning if schema has changed between the input catalog and the discovered catalog.\n    - This is perhaps the simplest application and least failure-prone.\n4. **Apply stream renaming/remapping.**\n    - Since `stream` is generally sent as table name to the downstream target and `tap_stream_id` is an internal field intended to be used solely by the tap itself, the user should be able to override the name specified in `stream` without breaking the tap implementation.\n    - This scenario does have real-life application, for instance:\n        1. The target already has another table by the same name. For a table named `users`, the user may override `stream` as `users_v2` to avoid collision, leaving `tap_stream_id` to still point to the original value `users`.\n        1. The stream name is an illegal or nonsensical name in the target system. Real world example `dev-employee-table` was the stream name (dynamoDB source) and the Snowflake target wanted to name the table `table` in a schema called `employee`. The solution which worked was to override `stream` as `employees` within the catalog entry and leave `tap_stream_id` and the upstream `table-name` mapping property untouched.\n    - Technically this property does not belong to the `schema` property but it is part of the input catalog (and separate from `metadata`) so I am noting it here for completeness.",
      "state": "closed",
      "created_at": "2021-05-06T21:37:47.532Z",
      "updated_at": "2022-05-29T23:39:36.392Z",
      "closed_at": "2022-05-29T23:39:36.376Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/123",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/123",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/123/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/123/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#123",
        "relative": "#123",
        "full": "meltano/sdk#123"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 593264,
      "relative_position": -12825
    },
    {
      "id": 86072681,
      "iid": 119,
      "project_id": 22672923,
      "title": "Improve REST cookiecutter to fully implement the stream",
      "description": "Currently the cookiecutter examples leave a lot of code unwritten. As a developer goes through the SDK it is not necessarily obvious if/when they have everything fully working.\n\nCurrently developers may need to consult [`dev_guide.md`](https://gitlab.com/meltano/singer-sdk/-/blob/main/docs/dev_guide.md), [`reference`](https://gitlab.com/meltano/singer-sdk/-/blob/main/docs/reference.md), and [`code_sampes.md`](https://gitlab.com/meltano/singer-sdk/-/blob/main/docs/code_samples.md)\n\nWhile we probably won't completely remove the need for those documents, there's a lot better we can do to make sure 90% of scenarios are handled with SDK cookiecutter code directly.",
      "state": "closed",
      "created_at": "2021-04-27T19:12:49.174Z",
      "updated_at": "2021-04-28T17:48:24.142Z",
      "closed_at": "2021-04-28T17:48:24.007Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Extract",
        "flow::To Do"
      ],
      "milestone": {
        "id": 1955839,
        "iid": 156,
        "group_id": 2524164,
        "title": "Fri: Apr 30, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-03-22T14:46:26.125Z",
        "updated_at": "2021-05-03T16:50:41.147Z",
        "due_date": "2021-05-01",
        "start_date": "2021-04-24",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/156"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 0,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/119",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/119",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/119/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/119/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#119",
        "relative": "#119",
        "full": "meltano/sdk#119"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 573039,
      "relative_position": -11799
    },
    {
      "id": 85842860,
      "iid": 115,
      "project_id": 22672923,
      "title": "GraphQLStream doesn't support variables in query",
      "description": "I made my first tap with the SDK today, and it was so painless, only took a few hours. Thanks y'all! \n\nI built a tap for NewRelic which uses their GraphQL API. I'm new to GraphQL but I'm pretty sure I'm using it correctly here.\n\nI want to be able to use the query variables to inject parameters into this query as opposed to doing string replacements in python:\n\n```graphql\nquery ($accountId: Int!, $query: Nrql!) {\n  actor {\n    account(id: $accountId) {\n      nrql(query: $query) {\n        results\n      }\n    }\n  }\n}\n```\n\nThe problem is [GraphQLStream wraps `self.query` in `query { ... }`](https://gitlab.com/meltano/singer-sdk/-/blob/main/singer_sdk/streams/graphql.py#L26) so we can't write the GraphQL to accept arguments.\n\nAs a workaround, I just overrode the method and replaced it with the whole query:\n\n```python\n    def prepare_request_payload(\n        self, partition: Optional[dict], next_page_token: Optional[DateTimeType] = None\n    ) -> Optional[dict]:\n        res = super().prepare_request_payload(partition, next_page_token)\n        res[\"query\"] = self.query\n        return res\n```\n\nAlso somewhat related, the cookiecutter template generates code suggesting `self.graphql_query` but `GraphQLStream` expects it to be called `self.query`.",
      "state": "closed",
      "created_at": "2021-04-23T18:57:54.863Z",
      "updated_at": "2021-05-06T22:08:37.867Z",
      "closed_at": "2021-04-29T17:08:05.761Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Extract"
      ],
      "milestone": {
        "id": 1955839,
        "iid": 156,
        "group_id": 2524164,
        "title": "Fri: Apr 30, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-03-22T14:46:26.125Z",
        "updated_at": "2021-05-03T16:50:41.147Z",
        "due_date": "2021-05-01",
        "start_date": "2021-04-24",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/156"
      },
      "assignees": [],
      "author": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 10,
      "merge_requests_count": 1,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/115",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/115",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/115/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/115/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#115",
        "relative": "#115",
        "full": "meltano/sdk#115"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 577535,
      "relative_position": -12312
    },
    {
      "id": 85762045,
      "iid": 112,
      "project_id": 22672923,
      "title": "Updated meltano.yml in cookeicutter to match tutorial",
      "description": "As follow-on to the tutorial [here](https://gitlab.com/meltano/meltano/-/merge_requests/2107), we should update the meltano.yml with `capabilities` and `settings`.",
      "state": "closed",
      "created_at": "2021-04-22T17:14:17.095Z",
      "updated_at": "2021-04-23T13:45:56.002Z",
      "closed_at": "2021-04-23T13:45:55.893Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Extract"
      ],
      "milestone": {
        "id": 1943872,
        "iid": 155,
        "group_id": 2524164,
        "title": "Fri: Apr 23, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-03-15T16:24:26.086Z",
        "updated_at": "2021-04-26T15:48:44.941Z",
        "due_date": "2021-04-24",
        "start_date": "2021-04-17",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/155"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 0,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/112",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/112",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/112/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/112/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#112",
        "relative": "#112",
        "full": "meltano/sdk#112"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 565160,
      "relative_position": -10773
    },
    {
      "id": 85598431,
      "iid": 110,
      "project_id": 22672923,
      "title": "Support defining configuration and stream schemas using Pydantic",
      "description": "[Pydantic] is the most popular data validation and serialization library for Python at the moment. It is used by the new-ish and increasingly popular web framework [FastAPI] and by other frameworks wanting to support reliable data validation and serialization (like [odmantic] for MongoDB and [pydantic-sqlalchemy]).\n\nAlternatives include [mashumaro], [marshmallow] and [dataclasses-json]. All of these support only a subset of Pydantic's features (no validation, serialization but no deserialization).\n\nI propose leveraging Pydantic to allow the SDK user to define a plugin's configuration and inline stream schemas using a known, powerful and well-documented library. The implementation would look something like the following:\n\n```python\nfrom pydantic import BaseModel\n\nclass BaseSchema(BaseModel):\n    # Created by the SDK developers to support the specifics of Singer schemas\n\nclass TapTestConfig(BaseSchema):\n    # Plugin config created by the SDK user\n\nclass ExampleStreamSchema(BaseSchema):\n    # Stream schema created by the SDK user\n```\n\nNotes:\n\n- `BaseSchema` needs to extend pydantic to make sure schemas are Singer-compatible: https://pydantic-docs.helpmanual.io/usage/schema/#schema-customization\n- Initial discussion for pydantic use: https://gitlab.com/meltano/singer-sdk/-/issues/10#note_519595958\n\n[Pydantic]: https://github.com/samuelcolvin/pydantic/\n[FastAPI]: https://github.com/tiangolo/fastapi\n[odmantic]: https://github.com/art049/odmantic\n[pydantic-sqlalchemy]: https://github.com/tiangolo/pydantic-sqlalchemy\n[mashumaro]: https://github.com/Fatal1ty/mashumaro\n[marshmallow]: https://github.com/marshmallow-code/marshmallow\n[dataclasses-json]: https://github.com/lidatong/dataclasses-json",
      "state": "closed",
      "created_at": "2021-04-20T22:19:33.113Z",
      "updated_at": "2022-05-29T23:38:06.980Z",
      "closed_at": "2022-05-29T23:38:06.966Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "flow::To Do",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/110",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/110",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/110/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/110/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#110",
        "relative": "#110",
        "full": "meltano/sdk#110"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 558455,
      "relative_position": -10260
    },
    {
      "id": 85499689,
      "iid": 109,
      "project_id": 22672923,
      "title": "Ability to reference shared schemas in JSONSchema for stream",
      "description": "As of the Draft4 Spec, JSONSchema supports reusing schema components using the `$ref` keyword as outlined [here](https://json-schema.org/understanding-json-schema/structuring.html#reuse). Some APIs (like Stripe) have a number of objects that show up in the schema for more than one stream and I'd like to be able to structure my schemas like this:\n```\n.\nschemas   \n\u2502\n\u2514\u2500\u2500\u2500shared\n\u2502   \u2502   discount.schema.json\n\u2502   customers.schema.json\n\u2502   subscriptions.schema.json\n```\nwhere `customers.schema.json` and `subscriptions.schema.json` both have a property `discount` of type `object` and can reference `discount.schema.json` instead of specifying it's properties in both places:\n```json\n\"discount\": {\n  \"$ref\": \"shared/discount.schema.json\"\n}\n```\nWhile this sort of works, I have to specify the full path as `file:///full/path/to/schemas/shared/discount.schema.json` - just specifying the relative path throws `jsonschema.exceptions.RefResolutionError: unknown url type: 'shared/discount.schema.json'`.\n\nThe `jsonschema.RefResolver()` object supports a `base_uri` parameter that one could in theory use - setting it to `file:///full/path/to/schemas/` would tell jsonschema to look in that directory when attempting to resolve relative references. Is there a way to support this within the framework of the Singer SDK? I'd be happy to contribute if someone is able to point me in the right direction.",
      "state": "closed",
      "created_at": "2021-04-19T23:24:47.187Z",
      "updated_at": "2022-01-05T04:15:32.661Z",
      "closed_at": "2021-04-21T01:38:01.298Z",
      "closed_by": {
        "id": 6734025,
        "username": "prratek",
        "public_email": "",
        "name": "Prratek Ramchandani",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/7bd15bade15cb1500f7569175690efcc6c84efe376ece2811272adb3dae653f4?s=80&d=identicon",
        "web_url": "https://gitlab.com/prratek"
      },
      "labels": [],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 6734025,
        "username": "prratek",
        "public_email": "",
        "name": "Prratek Ramchandani",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/7bd15bade15cb1500f7569175690efcc6c84efe376ece2811272adb3dae653f4?s=80&d=identicon",
        "web_url": "https://gitlab.com/prratek"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/109",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/109",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/109/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/109/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#109",
        "relative": "#109",
        "full": "meltano/sdk#109"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 558390,
      "relative_position": -9747
    },
    {
      "id": 85332574,
      "iid": 108,
      "project_id": 22672923,
      "title": "Allow developers to explicitly declare \"unsupported streams\"",
      "description": "As came up in the [office hours session](https://www.youtube.com/watch?v=_wY4DrFIpxM&t=1550s) this week, it would be helpful if developers could expose which API endpoints they explicitly _have not_ covered yet in their implementation.\n\nAs Douwe mentioned in the video link, the Singer Spec does already support an \"unsupported\" flag for catalog metadata, and this could be applied if the developer wanted to expose to potential users (and also in SingerHub) which streams and covered by the tap and which streams are not covered.",
      "state": "closed",
      "created_at": "2021-04-16T18:30:23.297Z",
      "updated_at": "2022-05-29T23:37:51.856Z",
      "closed_at": "2022-05-29T23:37:51.840Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Community",
        "Extract",
        "kind::Feature"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/108",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/108",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/108/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/108/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#108",
        "relative": "#108",
        "full": "meltano/sdk#108"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 551249,
      "relative_position": -7695
    },
    {
      "id": 85328951,
      "iid": 107,
      "project_id": 22672923,
      "title": "Generate YAML for MeltanoHub",
      "description": "SDK plugins have the `--about --format=json` feature and the `--discover` feature to print their catalog. We think this can be useful for MeltanoHub users and we want to evaluate if there are other aspects of the tap which should be exposed in the MeltanoHub inventory.\n\n## `--about`\n\n- Currently generated outputs are described in #13.\n- [ ] We should identify any other attributes needed for MeltanoHub and add them if it makes sense to do so. For example, a human readable source name such as `Microsoft SQL Server` for `tap-mssql`.\n\n## `--discover` \n\nDiscovery can only be run in one of these two scenarios:\n\n1. The tap discovers its metadata _without_ connecting to source (for example by declaring a `PropertyList` or a json schema file directly).\n2. If credentials are required, the proposed `--demo` mode would allow users to get `--discover` data (and `RECORD` data) without creds. (See #30)\n\n## Other actions:\n\n- [ ] Since we don't want to have to pass in fake config to get `--discover` output, we should evaluate the CLI and ensure that settings validation is not required for `--discover`, assuming than information be returned without initializing a connection. (Perhaps in certain scenarios a warning is more appropriate than a hard failure.)",
      "state": "closed",
      "created_at": "2021-04-16T16:40:13.401Z",
      "updated_at": "2021-10-22T17:52:59.473Z",
      "closed_at": "2021-10-22T17:52:59.295Z",
      "closed_by": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "labels": [
        "Community",
        "flow::Triage",
        "kind::Feature"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/107",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/107",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/107/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/107/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#107",
        "relative": "#107",
        "full": "meltano/sdk#107"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 551130,
      "relative_position": -7182
    },
    {
      "id": 85275693,
      "iid": 106,
      "project_id": 22672923,
      "title": "Add settings 'write-back' capability (Singer SDK)",
      "description": "Related to similar issue for Meltano: https://gitlab.com/meltano/meltano/-/issues/2710\n\nSome tap and target implementations use a writeback method ([we think?](https://gitlab.com/meltano/meltano/-/issues/2710#note_659612129)) to store settings (such as auth tokens) back in the `config.json` file for future use.\n\nThere's currently no similar way for a tap developer using the SDK to write back settings for use in future invocations.\n\n## Wanted:\n\nFor this issue, we are currently gaging feedback and asking for developers to provide use cases if this is a blocker for them. If this affects you, please post to the comments.",
      "state": "closed",
      "created_at": "2021-04-15T21:08:05.739Z",
      "updated_at": "2022-05-29T23:37:37.108Z",
      "closed_at": "2022-05-29T23:37:37.093Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "flow::Triage"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/106",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/106",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/106/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/106/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#106",
        "relative": "#106",
        "full": "meltano/sdk#106"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 549720,
      "relative_position": -6669
    },
    {
      "id": 85274750,
      "iid": 105,
      "project_id": 22672923,
      "title": "SDK should not require non-selected streams to be included in the catalog",
      "description": "Currently if you pass a `catalog.json` to a tap created with Singer SDK, it will error if a stream is missing. I think if a stream is not included in the `catalog` it should automatically be ignored for that sync.\n\nRelevant line: https://gitlab.com/meltano/singer-sdk/-/blob/main/singer_sdk/streams/core.py#L382\n\nStacktrace\n\n```\nTraceback (most recent call last):\n  File \"/Users/hassansyyid/env/testing-taps/bin/tap-procore\", line 8, in <module>\n    sys.exit(cli())\n  File \"/Users/hassansyyid/env/testing-taps/lib/python3.7/site-packages/click/core.py\", line 829, in __call__\n    return self.main(*args, **kwargs)\n  File \"/Users/hassansyyid/env/testing-taps/lib/python3.7/site-packages/click/core.py\", line 782, in main\n    rv = self.invoke(ctx)\n  File \"/Users/hassansyyid/env/testing-taps/lib/python3.7/site-packages/click/core.py\", line 1066, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/Users/hassansyyid/env/testing-taps/lib/python3.7/site-packages/click/core.py\", line 610, in invoke\n    return callback(*args, **kwargs)\n  File \"/Users/hassansyyid/env/testing-taps/lib/python3.7/site-packages/singer_sdk/tap_base.py\", line 247, in cli\n    tap.sync_all()\n  File \"/Users/hassansyyid/env/testing-taps/lib/python3.7/site-packages/singer_sdk/tap_base.py\", line 178, in sync_all\n    for stream in self.streams.values():\n  File \"/Users/hassansyyid/env/testing-taps/lib/python3.7/site-packages/singer_sdk/tap_base.py\", line 64, in streams\n    stream.apply_catalog(self.input_catalog)\n  File \"/Users/hassansyyid/env/testing-taps/lib/python3.7/site-packages/singer_sdk/streams/core.py\", line 383, in apply_catalog\n    self.primary_keys = catalog_entry.key_properties\nAttributeError: 'NoneType' object has no attribute 'key_properties'\n```",
      "state": "closed",
      "created_at": "2021-04-15T20:38:34.867Z",
      "updated_at": "2021-06-16T21:16:40.060Z",
      "closed_at": "2021-05-03T21:15:00.420Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "flow::To Do"
      ],
      "milestone": {
        "id": 2005519,
        "iid": 160,
        "group_id": 2524164,
        "title": "Fri: May 7, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-04-19T21:44:30.810Z",
        "updated_at": "2021-05-10T16:21:30.691Z",
        "due_date": "2021-05-08",
        "start_date": "2021-05-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/160"
      },
      "assignees": [],
      "author": {
        "id": 8178925,
        "username": "hsyyid",
        "public_email": "",
        "name": "Hassan Syyid",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8178925/avatar.png",
        "web_url": "https://gitlab.com/hsyyid"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/105",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/105",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/105/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/105/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#105",
        "relative": "#105",
        "full": "meltano/sdk#105"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 554217,
      "relative_position": -8208
    },
    {
      "id": 85274430,
      "iid": 104,
      "project_id": 22672923,
      "title": "Improved SDK release flow",
      "description": "The improved release flow should allow merging to main directly (instead of merging to development branch), while reducing manual input and not requiring actions on a local development machine.\n\nTwo manual pipelines will be needed:\n\n1. Version bump and Changelog:\n    - Auto-update changelog, merging any unreleased changes into a section for the appropriate version number.\n    - Pipeline should take all changes and commit back to main branch with the commit message `Release vX.Y.Z`.\n2. Publish\n    - Pipeline creates and pushes a release tag like `vX.Y.Z` using the output value from `poetry version --short`\n    - Pipeline runs `poetry --build publish` to push to PyPi\n\n--------------\n\n**Update:** Limited bandwidth and the fact that this is blocking releases suggests we break into phases. MVP is to move publish step into a tag-based flow instead of handling automatically on `main` branch.\n\nSDK Release Flow:\n\n1. Manual steps:\n    - Ready to release when:\n        - Version is bumped\n        - Changelog is flushed with the appropriate version number\n        - CI pipeline status is green\n2. Release step:\n    - Cut a tag named `vX.Y.Z`, which must match the release version\n4. Automated CD pipeline:\n    - In response to new tag creation, these steps are performed automatically in Gitlab pipelines:\n        - Abort if tag `vX.Y.Z` does not match output from `poetry version --short`\n        - Publish to PyPi\n        - Create a Gitlab 'Release' from the specified tag\n3. Post-release steps (git flow):\n    1. Copy-paste just the latest updates from `CHANGELOG.md` into the 'Releases' view in Gitlab.\n4. Post-release steps (announcements):\n    1. Post announcement to Meltano slack: #announcements, cross-post (share) to #sdk.\n    2. Copy-paste with minor contextual edits to Singer slack (with link to original Meltano slack).\n    3. Blog post (optional but recommended).\n    4. Tweet the blog post or the slack announcement link.\n\n----------------\n\n**Update (2):** MVP as described is now released in !66. This resolves the condition where docs and other updates were being withheld from `main` in order to not prematurely kick off a release.\n\nAlso, this is now available as an option:\n\n- [x] Any successful build can be turned into a prerelease by kicking off the manual `pypi_prerelease` job in the completed pipeline.\n\n----------------\n\n**Update (3):** Adding here a few non-git-related tasks as well, to document in the Meltano manual:\n\n- [ ] Procedure for announcing to Slack\n- [ ] Tweet announcing release",
      "state": "closed",
      "created_at": "2021-04-15T20:28:39.721Z",
      "updated_at": "2021-05-14T16:56:34.810Z",
      "closed_at": "2021-05-14T16:56:34.744Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Extract",
        "flow::Triage"
      ],
      "milestone": {
        "id": 2005520,
        "iid": 161,
        "group_id": 2524164,
        "title": "Fri: May 14, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-04-19T21:45:08.174Z",
        "updated_at": "2021-05-17T19:51:00.797Z",
        "due_date": "2021-05-15",
        "start_date": "2021-05-08",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/161"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 0,
      "merge_requests_count": 2,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/104",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 3,
        "completed_count": 1
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/104",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/104/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/104/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#104",
        "relative": "#104",
        "full": "meltano/sdk#104"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 549678,
      "relative_position": -6156
    },
    {
      "id": 85261998,
      "iid": 103,
      "project_id": 22672923,
      "title": "Import singer-tools to SDK, resolving any version conflicts",
      "description": "## Background\n\n1. singer-tools has helpful tools, like `singer-infer-schema`\n2. That package doesn't get a lot of updates, has several known bugs, and has conflicting version with more recently built versions\n3. Developers of the SDK are likely to want these tools (or similar) and may have difficulty getting them to work with the SDK due to version conflicts.\n\nRe slack conversation here: https://meltano.slack.com/archives/CFG3C3C66/p1618501051356400?thread_ts=1618494607.353700&cid=CFG3C3C66\n\n## Suggested\n\nWe can possibly import (some of) the tools into our repo, since they are also under Apache 2.0, and iterate from there.",
      "state": "closed",
      "created_at": "2021-04-15T15:58:36.880Z",
      "updated_at": "2022-05-29T23:37:15.029Z",
      "closed_at": "2022-05-29T23:37:15.012Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "flow::Triage"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/103",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/103",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/103/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/103/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#103",
        "relative": "#103",
        "full": "meltano/sdk#103"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 554292,
      "relative_position": -9234
    },
    {
      "id": 85210827,
      "iid": 102,
      "project_id": 22672923,
      "title": "Virtual environments conflicting when running in combination with Meltano",
      "description": "When developing in poetry and testing in combination with meltano, a developer may experience failures due to conflicts in the virtual environment settings.\n\nAs troubleshooted in this thread with Prratek Ramchandani: https://meltano.slack.com/archives/C01PKLU5D1R/p1618441696080500?thread_ts=1618427418.069800&cid=C01PKLU5D1R",
      "state": "closed",
      "created_at": "2021-04-14T23:11:49.226Z",
      "updated_at": "2021-04-19T19:24:07.031Z",
      "closed_at": "2021-04-19T19:24:06.817Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Extract",
        "kind::Bug"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 0,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/102",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/102",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/102/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/102/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#102",
        "relative": "#102",
        "full": "meltano/sdk#102"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 547284,
      "relative_position": -5643
    },
    {
      "id": 85200624,
      "iid": 100,
      "project_id": 22672923,
      "title": "Allow developers to flag PII in the catalog",
      "description": "Many sources have PII which can be flagged in the catalog if we have a convention to do so.\n\nDownstream, this can be surfaced to a user who is interrogating the catalog, and it can potentially also be flagged for obfuscation within Meltano (most likely0 or downstream by the target (less likely).",
      "state": "closed",
      "created_at": "2021-04-14T18:26:49.597Z",
      "updated_at": "2022-05-29T23:36:52.725Z",
      "closed_at": "2022-05-29T23:36:52.705Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "Security"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/100",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/100",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/100/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/100/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#100",
        "relative": "#100",
        "full": "meltano/sdk#100"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 546683,
      "relative_position": -5130
    },
    {
      "id": 85134386,
      "iid": 98,
      "project_id": 22672923,
      "title": "Support and monitor: VS Code adding native Poetry support in the Python extension",
      "description": "As of last week (week ending April 9, 2021), VS Code released the internal preview of native Poetry support in VS Code. Not all of our developers use VS Code, but many do. I'm noting here the upcoming changes so we can monitor those, update our docs if needed, and to provide any other support as needed.\n\nKnown changes (after the pending insiders updates go live for all users):\n\n- VS Code will begin auto discovering poetry environments.\n- VS Code _may_ select the interpreter automatically.\n- VS Code will automatically use the poetry environment as defined.\n- New shells in VS Code will start with the poetry environment already activated.\n- Pytest tests are automatically detected and shown in the 'Tests' navigation frame (allows point-and-click execution of tests).\n- Other formatters and linters referenced as developer dependencies can be run automatically from the poetry virtual environment. They do not have to be individually installed by developers.\n\n\nUnknown:\n\n- Does VS Code automatically run `poetry install`?\n- Does VS Code require a reload after changing the interpreter.\n- Does VS Code detect based on `pyproject.toml`, or does the developer need to have already run `poetry install` before the environment will be detected?\n\n\n\nMore info:\n\n- https://github.com/microsoft/vscode-python/issues/8372#issuecomment-816988208\n\nApril 9, 2020:\n\n> Hi everyone, we now support Poetry in the Insiders build of the extension. You can use the command Python: Switch to Insiders Weekly Channel to install the latest Insiders build. Do give it a try and let us know how it works for you \ud83d\ude42\n\n> [In response to my inquiry:] Nope, you do not need to configure anything. We'll roll this out in the stable marketplace build soon.",
      "state": "closed",
      "created_at": "2021-04-13T18:56:14.394Z",
      "updated_at": "2021-05-17T16:06:15.782Z",
      "closed_at": "2021-05-17T16:05:59.703Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Community",
        "Documentation",
        "Extract",
        "flow::Blocked"
      ],
      "milestone": {
        "id": 2005520,
        "iid": 161,
        "group_id": 2524164,
        "title": "Fri: May 14, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-04-19T21:45:08.174Z",
        "updated_at": "2021-05-17T19:51:00.797Z",
        "due_date": "2021-05-15",
        "start_date": "2021-05-08",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/161"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/98",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/98",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/98/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/98/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#98",
        "relative": "#98",
        "full": "meltano/sdk#98"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 544437,
      "relative_position": -4104
    },
    {
      "id": 85125363,
      "iid": 97,
      "project_id": 22672923,
      "title": "add support for hierarchical streams",
      "description": "In a similar vein to #20 and #22 there are cases where an upstream endpoint has a 1:many relationship to streams in a tap (rather than the simple 1:1) case.\n\nA real-world example can be found in [tap-tableau-wrangler](https://github.com/tailsdotcom/tails-tableau-wrangler), where Workbook files are fetched from Tableau Server and are introspected to extract child entities (Datasource, Connection, Relation and Table Reference objects). In this case only 1 endpoint is used - `get_workbook`, however multiple entities are extracted (mapping to individual singer Streams, hence 1:many). Specifically, I cannot extract a child Datasource without first downloading its parent Workbook. To solve this, I created a shim `Service` class that downloads changed Workbooks and presents an interface to access flattened lists of child entities. This is not ideal as it means i) a long initialisation step while the `Service` class collects Workbooks and extracts child objects, ii) poor memory performance from storage of long lists of dicts/records in-memory and iii) poor fault-tolerance as bookmarking is only done once _all_ upstream Workbooks are downloaded during initialisation (as the download effectively happens outside the Singer context, in the Service class). I think this case could be handled 'natively' in the Singer SDK!\n\nMy current implementation effectively produces the following message stream:\n\n```json\n{\"type\": \"SCHEMA\", \"stream\": \"workbook\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n{\"type\": \"RECORD\", \"stream\": \"workbook\", \"record\": {\"id\": 1, \"name\": \"First Workbook\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook\", \"record\": {\"id\": 2, \"name\": \"Second Workbook\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook\", \"record\": {\"id\": 3, \"name\": \"Third Workbook\"}}\n{\"type\": \"SCHEMA\", \"stream\": \"workbook_connection\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 1, \"name\": \"First Workbook First Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 2, \"name\": \"First Workbook Second Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 3, \"name\": \"First Workbook Third Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 4, \"name\": \"Second Workbook First Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 5, \"name\": \"Third Workbook First Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 6, \"name\": \"Third Workbook Second Connection\"}}\n{\"type\": \"STATE\", \"value\": {\"workbook\": 3}}\n```\n\nHere we see the flattening in action - all `workbook` records are emitted, then all `workbook_connection` records and so on.\nIf we successfully implement hierarchical streams, I would expect the output to be:\n\n```json\n{\"type\": \"SCHEMA\", \"stream\": \"workbook\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n{\"type\": \"RECORD\", \"stream\": \"workbook\", \"record\": {\"id\": 1, \"name\": \"First Workbook\"}}\n{\"type\": \"SCHEMA\", \"stream\": \"workbook_connection\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 1, \"name\": \"First Workbook First Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 2, \"name\": \"First Workbook Second Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 3, \"name\": \"First Workbook Third Connection\"}}\n\n{\"type\": \"SCHEMA\", \"stream\": \"workbook\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n{\"type\": \"RECORD\", \"stream\": \"workbook\", \"record\": {\"id\": 2, \"name\": \"Second Workbook\"}}\n{\"type\": \"SCHEMA\", \"stream\": \"workbook_connection\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 4, \"name\": \"Second Workbook First Connection\"}}\n\n{\"type\": \"SCHEMA\", \"stream\": \"workbook\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n{\"type\": \"RECORD\", \"stream\": \"workbook\", \"record\": {\"id\": 3, \"name\": \"Third Workbook\"}}\n{\"type\": \"SCHEMA\", \"stream\": \"workbook_connection\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 5, \"name\": \"Third Workbook First Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 6, \"name\": \"Third Workbook Second Connection\"}}\n\n{\"type\": \"STATE\", \"value\": {\"workbook\": 3}}\n```\n(blank lines are added for readability)\n\nFrom the example output above, it is clear that the volume of ~~STATE~~ SCHEMA messages is dramatically increased, being a multiple of the total number of parent records. This assumes that targets expect homogeneous blocks of RECORD messages until the next SCHEMA message. If this assumption is false (i.e. targets can consume a mix of RECORD messages from different streams, so long as SCHEMA messages were sent before the first occurrence of each RECORD stream and ordering of messages in the same stream is maintained), the below output would be far more efficient:\n\n```json\n{\"type\": \"SCHEMA\", \"stream\": \"workbook\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n\n{\"type\": \"RECORD\", \"stream\": \"workbook\", \"record\": {\"id\": 1, \"name\": \"First Workbook\"}}\n\n{\"type\": \"SCHEMA\", \"stream\": \"workbook_connection\", \"key_properties\": [\"id\"], \"schema\": {\"required\": [\"id\"], \"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}}}\n\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 1, \"name\": \"First Workbook First Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 2, \"name\": \"First Workbook Second Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 3, \"name\": \"First Workbook Third Connection\"}}\n\n{\"type\": \"RECORD\", \"stream\": \"workbook\", \"record\": {\"id\": 2, \"name\": \"Second Workbook\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 4, \"name\": \"Second Workbook First Connection\"}}\n\n{\"type\": \"RECORD\", \"stream\": \"workbook\", \"record\": {\"id\": 3, \"name\": \"Third Workbook\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 5, \"name\": \"Third Workbook First Connection\"}}\n{\"type\": \"RECORD\", \"stream\": \"workbook_connection\", \"record\": {\"id\": 6, \"name\": \"Third Workbook Second Connection\"}}\n\n{\"type\": \"STATE\", \"value\": {\"workbook\": 3}}\n```\n(blank lines are added for readability)\n\ni.e. a nested loop.\n\nTo achieve this, we would need to i) add a `children` attribute to the base `Stream` class that will contain a list of child `Stream` classes, ii) update the `Stream.sync()` called by the `Tap` class to iterate over child `Stream`s for each response from `.get_records()` _passing context from the parent stream as input_ and iii) support a tuple yielded by get records of format (record, parent_context) by parents to be consumed by children. This would allow a child Stream to receive context from the parent instance effectively implementing our nested loop \ud83c\udf89\n\nFor example:\n\n```python\nclass WorkbookConnection(Stream):\n\n    name = 'workbook_connection'\n    schema_filepath = SCHEMAS_DIR / 'workbook_connection.json'\n\n    def get_records(self, workbook_xml):\n        for record in self.extract_workbook_connection_records(workbook_xml):\n            yield record\n\nclass Workbook(Stream):\n\n    name = 'workbook'\n    primary_keys = ['id']\n    replication_key = 'updated_at'\n    schema_filepath = SCHEMAS_DIR / 'workbook.json'\n    children = [WorkbookConnection]\n\n    def get_records(self, *args, **kwargs):\n        bookmark = self.get_stream_state().get('replication_key')\n        for workbook_xml in self.get_new_workbooks(bookmark):\n            wb_record = self.extract_workbook_record(workbook_xml)\n            # This Stream has children, so second tuple value should be passed to them.\n            yield (wb_record, workbook_xml)\n\n```\n\n**Foreseeable Challenges**\n- Discovery - how do we discover child streams? How do we support stream and stream attribute selection?\n- Instantiation - how are child streams instantiated (this is currently done as part of discovery in the Tap)\n\n**How is this different to Partitioning?**\n\nFor partitioned restful endpoints (e.g. `/groups/{id}/epics/{secondary_id}/issues` where child resources are accessible directly so long as a parent ID is known) this can be solved with the `partition` feature from #22. This effectively still a 1:1 mapping of endpoint to stream, provided you have the parent ID (which is what the partitioning feature provides).",
      "state": "closed",
      "created_at": "2021-04-13T15:44:53.961Z",
      "updated_at": "2021-05-20T20:08:58.586Z",
      "closed_at": "2021-05-20T20:08:58.562Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Extract",
        "flow::Doing",
        "kind::Feature"
      ],
      "milestone": {
        "id": 2005521,
        "iid": 162,
        "group_id": 2524164,
        "title": "Fri: May 21, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-04-19T21:45:24.108Z",
        "updated_at": "2021-05-24T16:29:46.063Z",
        "due_date": "2021-05-22",
        "start_date": "2021-05-15",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/162"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 16,
      "merge_requests_count": 1,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/97",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/97",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/97/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/97/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#97",
        "relative": "#97",
        "full": "meltano/sdk#97"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 544696,
      "relative_position": -4617
    },
    {
      "id": 84899933,
      "iid": 94,
      "project_id": 22672923,
      "title": "Bug in state handling for timestamp bookmark",
      "description": "As raised in slack [here](https://meltano.slack.com/archives/C01PKLU5D1R/p1617922518009900), there is a bug in the bookmark handling for timestamps.",
      "state": "closed",
      "created_at": "2021-04-09T04:09:56.973Z",
      "updated_at": "2021-04-19T16:05:48.306Z",
      "closed_at": "2021-04-09T20:20:19.433Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Extract",
        "flow::Doing"
      ],
      "milestone": {
        "id": 1905065,
        "iid": 153,
        "group_id": 2524164,
        "title": "Fri: Apr 9, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-02-22T16:18:44.960Z",
        "updated_at": "2021-04-12T14:19:59.626Z",
        "due_date": "2021-04-10",
        "start_date": "2021-04-03",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/153"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/94",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/94",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/94/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/94/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#94",
        "relative": "#94",
        "full": "meltano/sdk#94"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 536523,
      "relative_position": -3591
    }
  ]
}
