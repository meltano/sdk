{
  "cookies": {
    "_cfuvid": "4CRkaqs1QEcMrPn0Kld51xYAinditSXF9CJae7VEIiY-1747940876930-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:56.851047+00:00",
  "elapsed": 0.462341,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e996eccf0e3b6-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:56 GMT",
    "ETag": "W/\"4c17354e562709f38bdd3ec2f7a00481\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/143/issues?epic_iid=143&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/143/issues?epic_iid=143&id=2524164&page=1&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=4CRkaqs1QEcMrPn0Kld51xYAinditSXF9CJae7VEIiY-1747940876930-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-37-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-b",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"ee49bcd5441b60e3957bba3680489e25\",\"version\":\"1\"}",
    "x-next-page": "",
    "x-page": "1",
    "x-per-page": "20",
    "x-prev-page": "",
    "x-request-id": "ee49bcd5441b60e3957bba3680489e25",
    "x-runtime": "0.237659",
    "x-total": "9",
    "x-total-pages": "1"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/143/issues"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/143/issues",
  "_decoded_content": [
    {
      "id": 107156810,
      "iid": 3434,
      "project_id": 7603319,
      "title": "Reduce build times in CI with pip, docker, or venv-level caching",
      "description": "Even if users have not changed any Meltano plugins' pip_urls, they generally will still need to install everything again on each CI builds. That may only take 3 minutes or it could take up to 10 minutes or more, but this is time spent waiting and not actually running the interesting aspects of the project. \n\n## Goal\n\nIf we only change one SQL file (for instance), and dbt only takes 30 seconds to run and detect that we have a mispelled column name, can a user find this out faster (say, <4 minutes) without waiting for non-related build tasks?\n\n## Challenge\n\nSometimes plugins change and when plugins do change, we'll want to rebuild the docker image or other CI environment that the code is running in.\n\n## Some possible options\n\n**Option 1: CI level pip caching**\n\nAs shared by @edgarrmondragon and as documented in this SO answer: [Using a pip cache directory in docker builds](https://stackoverflow.com/a/58021389/5535114)\n\n**Option 2: Docker-level build caching**\n\n_For cases where `meltano.yml` has not changed and all project changes are external to the `meltano.yml` file._\n\nThe Dockerfile can add `meltano.yml` _first_ and separate from the rest of the project additions, with the goal of not busting the cache if no plugins have changed. Then, running `meltano install` before the rest of the assets are added to the project _should_ be able to access the cached layer which contains the prior result of `meltano install`.\n\nNotes:\n\n- This approach doesn't really help if the `meltano.yml` has some changes, but helps a lot for use cases like SQL file changes and changes to other project source code.\n\n**Option 3: Two-stage Docker builds**\n\nSimilar to the above, but breaking the docker build into two phases. The first (partial/intermediate) image contains _just_ the `meltano.yml` build result, copying in that file and then building the image. The second (full) image adds the remainder of project resources. This second build can _also_ run `meltano install` but that is optional. Even if it does run again, meltano is smart enough to reuse caching on the second execution, so build times will be much shorter.\n\nNotes:\n\n - In CI, the build logic may opt to skip the first build, especially if the file has not changed.\n - The first build step may also optionally be added as a manual step, or a manual trigger may be connected to force a full rebuild.",
      "state": "closed",
      "created_at": "2022-04-25T18:39:39.260Z",
      "updated_at": "2022-05-30T13:32:01.409Z",
      "closed_at": "2022-05-30T13:32:01.387Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3434",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3434",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3434/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3434/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3434",
        "relative": "#3434",
        "full": "meltano/meltano#3434"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 143,
      "epic": {
        "id": 503341,
        "iid": 143,
        "title": "CI/CD for Meltano Projects",
        "url": "/groups/meltano/-/epics/143",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1315768,
      "relative_position": -3078
    },
    {
      "id": 106870075,
      "iid": 3422,
      "project_id": 7603319,
      "title": "Distinction between service fabric and the core data project artifacts",
      "description": "As we start doing more on CI/CD best practices, I wanted to highlight a distinction I was making in my head but which was not documented.\n\nJust by nature of storage these days being cheap/free and compute being relatively expensive, it is not feasible to run the same tests on service fabric (aka always on compute) versus on the data schemas, data artifacts, and data transformations.\n\n## List of core data project artifacts:\n\n- Tables created during EL testing.\n- Tables and views built by the transformations.\n- Logs and other file-based artifacts produced during the build process.\n- Static website artifacts, such as the results of `dbt docs generate`.\n- Test results and test artifacts, such as those generated by `dbt:test`.\n\n## Listing of service fabric elements:\n\n- The Superset container that hosts reports and dashboards.\n- The Airflow container that hosts the DAG.\n- The Meltano UI container that hosts the interactive Meltano UI experience.\n\n## Why the framing matters\n\nAs we focus on DevOps and CI/CD best practices, we want _every_ CI build to have rich testable artifacts. However, not every build can have its own Airflow instance, its own Superset environment, and its own indefinitely available Meltano UI interface.\n\nService fabric elements likely have an `n` between 2 and 10 within a given week, at least one per `main` and `develop`/`test` branch or similar.\n\nCore data project artifacts have an `n` of likely hundreds per week. (One per git commit pushed to source control.)",
      "state": "closed",
      "created_at": "2022-04-19T23:24:41.757Z",
      "updated_at": "2022-05-30T13:30:43.620Z",
      "closed_at": "2022-05-30T13:30:43.611Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion"
      ],
      "milestone": null,
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3422",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3422",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3422/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3422/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3422",
        "relative": "#3422",
        "full": "meltano/meltano#3422"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 143,
      "epic": {
        "id": 503341,
        "iid": 143,
        "title": "CI/CD for Meltano Projects",
        "url": "/groups/meltano/-/epics/143",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1305617,
      "relative_position": -513
    },
    {
      "id": 106867662,
      "iid": 3421,
      "project_id": 7603319,
      "title": "CI/DevOps Best practices for Meltano projects",
      "description": "On the way to a \"diff-only\" CI cycle (#3410+), I thought it would be helpful to show what a standard CI flow might look like.\n\nUnlike that mentioned in #3410, everything below is possible using only capabilities that exist in Meltano today. There's a lot of \"optional\" functionality and some project-specific preferences involved here, which I think should be expected. I think it is nevertheless helpful to come up with an opinionated approach and strategy for the CI/DevOps lifecycle - while also keeping the understanding that each user and company will adapt this guidance according to their own preferences.\n\n## DataOps Principles\n\n- All build artifacts should be disposable.\n- Breaking changes must be detected during CI.\n- Prioritize completeness of tests over speed of execution.\n- Prioritize fast failure of CI when feasible.\n- Allow EL to be included or excluded from tests, per the user and project preferences.\n- Zero manual deployment steps.\n- Prioritize testing the data movement, transformation, and application.\n- Service fabric testing would be addressed separately, as per #3422. Testing of service is ignored here because of the requirement for always-on compute and some manual user interaction. \n\n## On each CI build (non-`main` branch)\n\n### Step 1 - EL Builds run with Mappers applied\n\n- CI pipeline can run all EL pipelines, using a `cicd` Meltano environment.\n- Skipped/disabled if creds are not available or if project settings have disabled this feature.\n- Optionally, stream maps are applied on the `cicd` Meltano environment to (1) reduce the volume of data and/or (2) obfuscate sensitive data.\n\n### Step 2a - Transform Builds run (fast fail, schema only)\n\n- CI pipeline triggers `dbt run` using a `cicd` Meltano environment.\n- CI pipeline uses `prod` source data.\n- If build artifacts from `main` branch or a recent `prod` execution are available, dbt uses the `defer` feature. Otherwise a full run is performed.\n- dbt is configured to _either_ run with `limit 0` or with `materialize=view` on all tables. This makes the step fail much faster in cases where there is an error in column name mismatches, SQL syntax errors, or any other compile-type failure.\n\n### Step 2b - Transform Builds run (with data)\n\n- Same as 2a except runs with actual data.\n- Can run in parallel with 2a, but presumably can also abort early if 2a fails. (2a's role is 'fast failure', likely will complete in 2 minutes while this 'with data' version may take 20-30 minutes to complete.)\n- After executing `dbt:run`, Meltano also invokes `dbt:test`\n- `dbt docs generate` is executed and the results are made available either via static web host (prefered) or via CI artifacts.\n\n### Step 3 - Profiling and additional validation (optional)\n\n- Optionally, additional validation and comparisons can be run against the transform results. These have to be defined and created by the Meltano user, optionally using an external tool like Great Expectations.\n\n### Step 4 - BI and Reporting Builds run\n\n- If the BI tool supports it, generate the BI reports and other artifacts using the results of the transform builds.\n- This can run in parallel to Step 3, since neither depends on the other and both types of failures are valuable.\n- Optionally, the BI artifacts can be pushed to one or more BI servers, if applicable and if possible without affecting prod resources.\n\n## On `main` branch\n\nIF enabled by the user or project, the CI pipeline auto-deploys commits to `main` as updates to production. This uses the same process as above, except targeting the `prod` Meltano environment instead of the `cicd` environment.\n\n\nNote: Any existing production jobs may optionally reference the `main` branch directly. For instance, if the user is using dbt Cloud as a complement to Meltano, they likely would point dbt Cloud \"production\" jobs and schedules to the `main` branch of their project.\n\n## On `development` branch\n\nProjects which want to have a slower deployment cycle in production (once per week, for instance, instead of multiple times per day) may use a `development` or `develop` branch as their default branch for PRs. Using the same method as the `main`->`prod` deployment, this branch deploys to a `staging` or `beta` environment on each new merged commit.\n\nIf using a `development` branch, then `main` updates can often be a simple fast-forward to `development` on whatever deployment cadence the team prefers. The exception would be in cases of hot-fixes, which would target `main` directly and get automatically deployed as soon as the PR is merged to `main`.\n\n## Future Topics Currently Out of Scope\n\n### \"Slim\" CI Builds (Aka Diff-Only Builds)\n\nThis approach doesn't try to be \"slim\" as of yet, which is the diff-only approach. That approach is documented here for any readers interested: #3410.\n\n### Reusable CI yaml assets\n\nPresumably this CI process could be created once and then copy-pasted across disparate Meltano projects, only adapting for the environment name and certain optional implementation choices as noted.\n\nIn future iterations, the CI design could further be refined into reusable GitHub Actions.\n\n### Service Fabric Testing\n\nNot that this proposal focuses on the core data artifacts which can be represented in file and table artifacts. \n\nService fabric testing is a separate matter and is discussed here: #3422",
      "state": "closed",
      "created_at": "2022-04-19T22:39:51.321Z",
      "updated_at": "2022-05-30T13:30:37.320Z",
      "closed_at": "2022-05-30T13:30:37.307Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Office Hours::Discussed"
      ],
      "milestone": null,
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3421",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3421",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3421/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3421/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3421",
        "relative": "#3421",
        "full": "meltano/meltano#3421"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 143,
      "epic": {
        "id": 503341,
        "iid": 143,
        "title": "CI/CD for Meltano Projects",
        "url": "/groups/meltano/-/epics/143",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1305618,
      "relative_position": -1026
    },
    {
      "id": 106794024,
      "iid": 3412,
      "project_id": 7603319,
      "title": "How to talk about data vs config environments in Meltano?",
      "description": "Related to https://gitlab.com/meltano/meltano/-/issues/3397#note_913065285.\n\nThere are lots of different versions of environments that make up the data development workflow, CI, deployment, etc. and depending on the plugin they might be different. Having a good way to talk about each \"environment profiles\" will make it way clearer for us to talk about solutions and to share them with users. \"A data development environment for Singer\".\n\nThe naming and framing is open to change but having a way to talk about it will help.\n\n> Thinking about environments in Meltano is getting pretty confusing and complex - we have [meltano environments](https://docs.meltano.com/concepts/environments) feature, development dbt/Snowflake environments, Singer/Snowflake environments, CI config and Snowflake environments for dbt and Singer, staging UAT environments, etc. :sweat_smile: I've been starting to think about them in terms of \"environment profiles\" (naming can definitely change): `Plugin vs Usage vs Context`\n> \n> Plugin:\n> \n> * Singer\n> * dbt\n> * Airflow\n> * Superset\n> \n> Usage:\n> \n> * Development\n> * CI testing\n> \n> Context:\n> \n> * Data\n> * Config\n> \n> Each combination has different environment requirements. An environment for Singer plugins used for Development in the context of Data will probably be solved in a different way than the dbt plugin used for CI testing in the context of Data.\n\ncc @tayloramurphy",
      "state": "closed",
      "created_at": "2022-04-18T19:56:36.203Z",
      "updated_at": "2022-05-30T13:29:37.336Z",
      "closed_at": "2022-05-30T13:29:37.317Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [
        {
          "id": 8668050,
          "username": "pnadolny13",
          "public_email": "",
          "name": "Pat Nadolny",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
          "web_url": "https://gitlab.com/pnadolny13"
        }
      ],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3412",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3412",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3412/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3412/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3412",
        "relative": "#3412",
        "full": "meltano/meltano#3412"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 143,
      "epic": {
        "id": 503341,
        "iid": 143,
        "title": "CI/CD for Meltano Projects",
        "url": "/groups/meltano/-/epics/143",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1371413,
      "relative_position": -4104
    },
    {
      "id": 106786614,
      "iid": 3410,
      "project_id": 7603319,
      "title": "Meltano 'diff only' builds, aka \"Slim CI\"",
      "description": "This issue is logged in follow up to the office hours session from last week (2022-04-13).\n\nWas noted in that thread several great ideas and I wanted to add a framing for those which I thought might be helpful.\n\nFundamentally, the below approach offers a single execution path with four input variables:\n\n1. Have any EL streams changed? (`boolean`)\n2. If yes, which ones? (`array`, `all`, or `none`)\n3. Have any Transforms changed? (`boolean`)\n4. If yes, which ones? (`array`, `all`, or `none`)\n\n## Overall goal for \"Slim CI\"\n\nThe overall goal with Slim CI builds would be to run _only_ the minimum but to still test _all_ of the changed aspects.\n\n## Three main scenarios (for ELT)\n\nIf we focus on ELT, there are really just three scenarios we need to handle.\n\n### Scenario 1: Changed EL\n\nIf EL has changed, then regardless of if \"T\" has changed, we still want to test EL and also T.\n\nIdeally, in this scenario we want to test (aka rerun) just the changed EL streams and no the streams that still are identical with `main` branch.\n\nIdeally, in this scenario we _also_ want to build any dependent models in dbt that consume any of the changed EL stream definitions. To do this, we need to be able to detect links between EL streams and dbt transforms (models).\n\n### Scenario 2: No changes to EL; Changes only in \"T\"\n\nIf Transforms have changed, either the dbt plugin definition or a file in the dbt project, but EL has _not_ changed, then we can reuse the `RAW_DB` artifacts from prod or from a prior build.\n\nIn this scenario, ideally we start with just the changed models, building those models that have changed, plus any dependent models.\n\n### Scenario 3: No changes to EL or T\n\nIn this scenario, we would ideally be able to detect that no substantive changes were made to EL (Singer tap and target definitions) nor to T (dbt models). An example of this scenario is when the only thing changed in the repo is its `README.md`.\n\n## Why this model\n\nMy goal in this framing is to have a single framing for EL-inclusive and EL-exclusive tests. Assuming some repeatable parameterization in the dbt project, there's lots of prior art on how to do diff-only dbt transforms. This is unfortunately not the case for EL+T projects.\n\nSummarized decision tree:\n\n- Step 1: Identify and test any changed EL streams.\n  - If none, skip to Step 2.\n  - If not none:\n    - Add the streams to a list of EL jobs that need to be run, ideally superimposed on top of an existing prod database snapshot, such as could be created with Snowflake's no-copy cloning.\n    - Detect downstream transforms which directly consume one or more changed streams. Add those to the list of \"modified\" models in step 2.\n- Step 2: Identify and test any changed Transforms.\n  - If models are changed, add those to an internal list.\n  - If Step 1 surfaced affected models, add those to our list of modified models.\n  - Rebuild everything in the combined list, along with downstream dependencies.\n  - If the entire project definition may have changed (changes to the adapter or no prior builds available), just run everything and ignore the list.\n  - If no models have changed (and nothing upstream), skip builds.\n\n\n## Challenges\n\nSome things we have to solve for:\n\n- Linking source tables (EL streams) with their representation in dbt so we can detect the downstream affected transforms in dbt.\n  - @pnadolny13 has prior art which does this in his granular/exploded Airflow POC. The convention relies on specific naming conventions which we'd need to promote to users.\n- Defining what \"changed\" means in terms of EL streams, and then implementing a change detection logic.\n- Defining what \"changed\" means for transforms, and then implementing a change detection logic. (Several good methods already exist, including the possibility of piggy-backing on `dbt`'s `defer` capability.\n- Defining how to superimpose a build on top of another.\n  - For EL:\n    - One option is to create a new database as a zero-copy clone in Snowflake. Since this is a metadata-only operation for Snowflake, it has virtually zero cost, and no performance penalty. \n  - For Transforms:\n    - We might be able to use the `dbt` \"defer\" option, but this may or may not pick up changes we want to detect from any changed EL jobs upstream.\n\nCc @tayloramurphy for your thoughts",
      "state": "closed",
      "created_at": "2022-04-18T17:10:54.541Z",
      "updated_at": "2022-05-30T13:29:24.690Z",
      "closed_at": "2022-05-30T13:29:24.669Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "Office Hours::Discussed",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351603,
        "iid": 212,
        "group_id": 2524164,
        "title": "Q4-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:40:00.762Z",
        "updated_at": "2021-11-29T21:40:00.762Z",
        "due_date": "2022-12-31",
        "start_date": "2022-10-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/212"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3410",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3410",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3410/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3410/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3410",
        "relative": "#3410",
        "full": "meltano/meltano#3410"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 143,
      "epic": {
        "id": 503341,
        "iid": 143,
        "title": "CI/CD for Meltano Projects",
        "url": "/groups/meltano/-/epics/143",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1299577,
      "relative_position": -1539
    },
    {
      "id": 106641250,
      "iid": 3397,
      "project_id": 7603319,
      "title": "Meltano development workflows",
      "description": "As per [Office Hours 13 Apr 2022](https://www.youtube.com/watch?v=sK_1ykhyqQg), there is some discussion around possible development flows for adding a new extractor and then modelling extracted data in dbt within a Meltano Project. It would be useful to outline the specific flow(s) we would like to support, as it has an impact on the Meltano features prioritised and the overall user experience.\n\n## Example flow\n\nFor a Project using multiple extractors, a Snowflake warehouse and loader, dbt and superset, the workflow for i) adding a new extractor and ii) updating existing dbt models with the new data might be as follows:\n\n1. User creates a new git branch for their feature:\n\n    `git checkout -b my-new-feature-branch`\n\n1. User adds new extractor (loader assumed to exist)\n\n    `meltano add extractor tap-gitlab`\n\n1. User configures extractor:\n\n    `meltano config ...`\n\n1. User runs extractor locally to test it works, and to populate personal warehouse environment with data:\n\n    `meltano --environment=dev run tap-gitlab target-snowflake`\n\n    This could potentially take a _long_ time. Especially for database taps \ud83e\udd14\n\n1. User creates schedule for new extractor (or updates custom dag-generator file):\n\n    `meltano schedule gitlab-to-snowflake tap-gitlab target-snowflake @daily`\n\n1. User runs Airflow locally, to ensure dag-generator creates correct schedule.\n\n\n> Note: At this stage the EL part of the workflow is complete. The user would move to working on `dbt` modelling, which is what we focused on in Office Hours.\n\n7. User adds dbt sources for new 'raw' data arriving from EL.\n\n   As of now, only the users personal raw schemas have data (assuming the user ran `meltano run` locally and waited for an EL to happen).\n\n1. User adds staging models to transform raw data, as per dbts [suggested project structure](https://discourse.getdbt.com/t/how-we-structure-our-dbt-projects/355).\n\n    These staging models only accesses the raw data sources created in the previous step, so can be run without issues.\n\n1. User adds/updates fact/dimension/report models and tests referencing the new staging models.\n\n    At this point the User is mixing the new staging models (that only exist in that users development schemas in Snowflake) with existing fact/dimension/report models form the wider dbt project (which update on a schedule in prod schemas). These models can only be run and tested using:\n\n    i) running just the changed model using `dbt run -s state:modified+ --defer --state path/to/prod/artifacts` with a prod state file (as recommended in the [Best Practices section of the dbt docs](https://docs.getdbt.com/docs/guides/best-practices#run-only-modified-models-to-test-changes-slim-ci))\n    \n    ii) a clone of production data into the users development schemas\n\n> Note: As of now, Superset dashboards are only modifiable via the UI, so work in the Meltano Project is done.\n\n10. User commits to their branch:\n\n    ```bash\n    git add .\n    git commit -m \"added tap-gitlab and updated contribution reports\"\n    ```\n\n1. User raises merge request against the `staging` branch.\n\n    Long-lived prod-like staging environment is used to test changes end-to-end before promotion to `production`.\n\n1. Scheduled end-to-end run in `staging` completes, data is inspected and validated.\n\n1. User raises merge request from staging to main/production branch, is approved and merged.\n\n1. Scheduled production run populates new facts/dimensions/reports.\n\n1. User begins work in Superset.\n\n1. Superset Dashboards updated. User profits!\n\nThis flow makes some significant assumptions:\n- The User has both the access and the time to run an initial EL using their local machine (to populate data for downstream dbt modelling and testing). This can be mitigated with `start_date` filters on the tap, where available.\n- The User has access to a production state file, to use `--defer`, or has tooling and processes to manage a fresh clone of production schemas and tables into their personal dev environment during dbt development. Clones are relatively cheap in Snowflake, but not so in other warehouses like Redshift and Bigquery. This is harder to mitigate \ud83e\udd14\n- The User only has 1 in-flight change in their personal environment at a time (or self-manages conflicts between multiple model change sets). This can be mitigated with branch-based Snowflake environments in stead of user-based ones.\n- The `staging` environment can be merged to prod/main regularly. As the number of contributors to a project grows, and therefore the number of simultaneous changes in the long-lived staging environment increases, managing the release process from `staging` to `prod` may become a bottle-neck. This could be mitigated with branch-based staging environments.\n- Superset in the `staging` environment is similar enough in prod to be able to test changes to existing dashboards, before making the same changes in prod. This is just a Superset limitation. It is likely dashboard changes will be made directly in prod, using built-in versioning/draft mechanisms.\n\nOutstanding questions:\n- What exactly runs in CI when the user raises their MR?\n\n    Ideally just the change-set (new el and changed dbt models), and maybe `meltano invoke airflow` to test the dag generation works. CI would presumably not include a full Airflow or Superset deployment - just container-local invocations for testing?",
      "state": "closed",
      "created_at": "2022-04-14T12:41:51.120Z",
      "updated_at": "2022-05-30T13:28:01.030Z",
      "closed_at": "2022-05-30T13:28:01.019Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion"
      ],
      "milestone": null,
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 11,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3397",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3397",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3397/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3397/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3397",
        "relative": "#3397",
        "full": "meltano/meltano#3397"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 143,
      "epic": {
        "id": 503341,
        "iid": 143,
        "title": "CI/CD for Meltano Projects",
        "url": "/groups/meltano/-/epics/143",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1305613,
      "relative_position": 0
    },
    {
      "id": 103858908,
      "iid": 3295,
      "project_id": 7603319,
      "title": "How to best support users running Meltano via GitHub Actions",
      "description": "Brooklyn Data has created and [shared in slack](https://meltano.slack.com/archives/C01E3MUUB3J/p1646084670268699) a very cool [Cookiecutter template](https://github.com/brooklyn-data/meltano-on-github-actions) for running Meltano via GitHub Actions. I followed up with a logged issue [here](https://github.com/brooklyn-data/meltano-on-github-actions/issues/2) to ask if a hosted Marketplace Action might make sense or be viable.\n\nThere may be other ways we can support this - and certainly we've seen success on our side with this approach so would be good to promote and support if we can.\n\nCc @edgarrmondragon, @pnadolny13, @tayloramurphy",
      "state": "closed",
      "created_at": "2022-02-28T22:39:18.642Z",
      "updated_at": "2022-05-30T10:23:47.108Z",
      "closed_at": "2022-05-30T10:23:47.088Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3295",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3295",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3295/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3295/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3295",
        "relative": "#3295",
        "full": "meltano/meltano#3295"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 143,
      "epic": {
        "id": 503341,
        "iid": 143,
        "title": "CI/CD for Meltano Projects",
        "url": "/groups/meltano/-/epics/143",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1155460,
      "relative_position": -2565
    },
    {
      "id": 96680914,
      "iid": 3041,
      "project_id": 7603319,
      "title": "Meltano \"run all\" or \"build all\" command",
      "description": "In our efforts to become more devops friendly with #2869 (environments), https://gitlab.com/meltano/meltano/-/issues/2301 (`meltano run`) and #2924 (more robust \"pipelines\"), I realized there's an unspoken user story here I want to better articulate:\n\n> As a Meltano user working on project with an `n` number of taps, where `n` can grow large, I want a streamlined way to \"build\" the full environment using the latest project definitions. I want to be able to control for side effects and lingering state by running a full new build at times when I need to retest the end-to-end project. This might happen once a week, once for every CI build, and/or perhaps once before any sizeable MR is submitted for final review.\n\nThis would be functionally equivalent to launching `n` terminals locally, running all `n` taps in a separate terminal, and then running `meltano invoke dbt:run && meltano invoke dbt:test` after all have completed.\n\nFor local testing, I assume any failure is indicative of a faulty project definition and I would resolve failures with a code change before restarting part or all of the project.\n\nIn the generic python world, this would be similar to running `tox` as the \"build and test everything\" command. If I get a lint error, I go resolve it and either rerun all of `tox` or (more likely) I rerun just the lint job, confirm it is fixed, and then rerun `tox`. Similarly, we are not trying to account for other reasons of failures, retries, etc.\n\n## Desired output\n\nThe goal is to confirm our project can build itself and is therefor valid in three dimensions: \n\n1. it compiles and runs to completion\n2. it passes any declared test conditions\n3. it generates a build artifact (database, tables, and files in our case) which can be subject to additional manual inspection and testing\n\n## Implementation already in scope\n\nThe simplest iteration and the one we originally aligned behind was `meltano run` invoked with any `n` number of steps:\n\n(Note: please don't read too much into non-finalized syntax choices, this is just for explanatory purposes:)\n\n```sh\nmeltano run --environment=aj_test tap-gitlab tap-slack tap-shopify tap-google-analytics \\\ntarget-snowflake dbt:test-sources dbt:run dbt:test-all\n```\n\nAs discussed in the `meltano run` issue, we would let Meltano figure out how to parallelize the work, and we would throw an error if something is sequenced in a way we cannot DAG-ify - as in the noted examples of: a target coming sequentially before any named taps, and a `dbt:run` command placed in between a tap and target.\n\nThe long-term vision here would be to eventually reduce the number of things that need to be declared at command line each time, perhaps by encoding them into a named pipeline or environment config, but at least a base level implementation of \"build all\" functional requirements can be encoded into that `meltano run` syntax as shown in the above example.",
      "state": "closed",
      "created_at": "2021-11-03T17:42:12.258Z",
      "updated_at": "2022-05-30T09:52:45.130Z",
      "closed_at": "2022-05-30T09:52:45.108Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3041",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3041",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3041/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3041/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3041",
        "relative": "#3041",
        "full": "meltano/meltano#3041"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 143,
      "epic": {
        "id": 503341,
        "iid": 143,
        "title": "CI/CD for Meltano Projects",
        "url": "/groups/meltano/-/epics/143",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 921006,
      "relative_position": -3591
    },
    {
      "id": 93649221,
      "iid": 2936,
      "project_id": 7603319,
      "title": "Create a GitHub Action for Meltano ELT",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\n\nGitHub Actions are a CI/CD offering with capabilities similar to those of GitLab CI, except that they can be published to the [a marketplace](https://docs.github.com/en/actions/creating-actions/publishing-actions-in-github-marketplace) where they get more visibility and users can add them to their projects with one click.\n\nThis action would be useful for developers that are first trying out Meltano, or don't need a full Kubernetes/cloud deployment with an orchestrator, metrics UIs, etc.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nGive users that want to try out Meltano for ELT a way that is quick and easy.\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\n- A [composite action](https://docs.github.com/en/actions/creating-actions/creating-a-composite-action) is probably easier but we can consider a [docker action](https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action) too.\n  Either way, the action would install the latest or some configurable Meltano version for the user and any other dependencies, and also run `meltano install`.\n- Inputs to the job could be: `tap`, `target`, `job_id`, `transform` and `log_level` to compose a command like\n\n  ```shell\n  meltano --log-level={log_level} elt {tap} {target} --job_id={job_id} --transform={transform}\n  ```\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nThis only solves ELT and very basic orchestration needs. No fancy UI for jobs and retries are manual.",
      "state": "closed",
      "created_at": "2021-09-13T20:12:51.635Z",
      "updated_at": "2022-05-30T09:39:54.523Z",
      "closed_at": "2022-05-30T09:39:54.492Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Deployment",
        "kind::Feature",
        "valuestream::Ecosystem"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2936",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 1,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2936",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2936/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2936/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2936",
        "relative": "#2936",
        "full": "meltano/meltano#2936"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 143,
      "epic": {
        "id": 503341,
        "iid": 143,
        "title": "CI/CD for Meltano Projects",
        "url": "/groups/meltano/-/epics/143",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 825418,
      "relative_position": -2052
    }
  ]
}
