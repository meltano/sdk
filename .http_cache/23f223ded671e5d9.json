{
  "cookies": {
    "_cfuvid": "vF37bEXvspLEqNcCZ3Q0i20OoR.bZUlzBCl0Z.o8GMI-1747940820794-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:00.723367+00:00",
  "elapsed": 0.616299,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e980eebb7b20e-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:00 GMT",
    "ETag": "W/\"01022d90bf73f49d568ad58d45dd3d65\"",
    "Link": "<https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=4&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"prev\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=6&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"next\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=1&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"first\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=10&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=vF37bEXvspLEqNcCZ3Q0i20OoR.bZUlzBCl0Z.o8GMI-1747940820794-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-27-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-d",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"138a30a5f2a969349fc104cfabe8ad4c\",\"version\":\"1\"}",
    "x-next-page": "6",
    "x-page": "5",
    "x-per-page": "20",
    "x-prev-page": "4",
    "x-request-id": "138a30a5f2a969349fc104cfabe8ad4c",
    "x-runtime": "0.317082",
    "x-total": "200",
    "x-total-pages": "10"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?order_by=updated_at&page=5&scope=all&sort=asc&updated_after=2022-01-01T00%3A00%3A00Z"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?order_by=updated_at&page=5&scope=all&sort=asc&updated_after=2022-01-01T00%3A00%3A00Z",
  "_decoded_content": [
    {
      "id": 85016516,
      "iid": 95,
      "project_id": 22672923,
      "title": "CLI improvements (autocomplete,  typed options)",
      "description": "As I was trying to add shell autocompletion for a tap built with the SDK, I was able to do so following [the click documentation][click-autocomplete]. However, it felt like an unnecessarily complicated process and something the SDK should offer to plugin developers for free. Then I came across [Typer], a library for building CLIs, built on top of `click` and extending it with a friendlier API and other perks. I was able to subclass `singer_sdk.tap_base.Tap` to use the library without any changes to the already working tap code (except for the super class).\n\nI found some immediate benefits by using Typer.\n\n### End user\n\n- Easy to install completion for common shells (Bash, Zsh, Fish, Powershell)\n- More descriptive `--help` command with typed options, including enums. For example `--format [plain|json]  [default: plain]`\n\n### Plugin developer:\n\n- Automatic markdown documentation for your plugin\n\n### SDK developer:\n\n- Use type annotations to declare option types\n- Less code repetition (e.g. CLI Option decorator for `--catalog` and a function argument `catalog`)\n\nAt the moment, the particular tap is not public but I plan to do the same to [tap-confluence], and I can also start a MR if this is something you think the SDK should have.\n\n[click-autocomplete]: https://click.palletsprojects.com/en/7.x/bashcomplete/\n[Typer]: https://typer.tiangolo.com\n[tap-confluence]: https://github.com/edgarrmondragon/tap-confluence/",
      "state": "closed",
      "created_at": "2021-04-12T06:34:44.584Z",
      "updated_at": "2022-05-29T23:36:11.417Z",
      "closed_at": "2022-05-29T23:36:11.400Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 1,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/95",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/95",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/95/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/95/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#95",
        "relative": "#95",
        "full": "meltano/sdk#95"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 123,
      "epic": {
        "id": 338495,
        "iid": 123,
        "title": "Improve CLI User Experience",
        "url": "/groups/meltano/-/epics/123",
        "group_id": 2524164,
        "human_readable_end_date": "Dec 31, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 85200624,
      "iid": 100,
      "project_id": 22672923,
      "title": "Allow developers to flag PII in the catalog",
      "description": "Many sources have PII which can be flagged in the catalog if we have a convention to do so.\n\nDownstream, this can be surfaced to a user who is interrogating the catalog, and it can potentially also be flagged for obfuscation within Meltano (most likely0 or downstream by the target (less likely).",
      "state": "closed",
      "created_at": "2021-04-14T18:26:49.597Z",
      "updated_at": "2022-05-29T23:36:52.725Z",
      "closed_at": "2022-05-29T23:36:52.705Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "Security"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/100",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/100",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/100/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/100/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#100",
        "relative": "#100",
        "full": "meltano/sdk#100"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 85261998,
      "iid": 103,
      "project_id": 22672923,
      "title": "Import singer-tools to SDK, resolving any version conflicts",
      "description": "## Background\n\n1. singer-tools has helpful tools, like `singer-infer-schema`\n2. That package doesn't get a lot of updates, has several known bugs, and has conflicting version with more recently built versions\n3. Developers of the SDK are likely to want these tools (or similar) and may have difficulty getting them to work with the SDK due to version conflicts.\n\nRe slack conversation here: https://meltano.slack.com/archives/CFG3C3C66/p1618501051356400?thread_ts=1618494607.353700&cid=CFG3C3C66\n\n## Suggested\n\nWe can possibly import (some of) the tools into our repo, since they are also under Apache 2.0, and iterate from there.",
      "state": "closed",
      "created_at": "2021-04-15T15:58:36.880Z",
      "updated_at": "2022-05-29T23:37:15.029Z",
      "closed_at": "2022-05-29T23:37:15.012Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "flow::Triage"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/103",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/103",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/103/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/103/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#103",
        "relative": "#103",
        "full": "meltano/sdk#103"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 85275693,
      "iid": 106,
      "project_id": 22672923,
      "title": "Add settings 'write-back' capability (Singer SDK)",
      "description": "Related to similar issue for Meltano: https://gitlab.com/meltano/meltano/-/issues/2710\n\nSome tap and target implementations use a writeback method ([we think?](https://gitlab.com/meltano/meltano/-/issues/2710#note_659612129)) to store settings (such as auth tokens) back in the `config.json` file for future use.\n\nThere's currently no similar way for a tap developer using the SDK to write back settings for use in future invocations.\n\n## Wanted:\n\nFor this issue, we are currently gaging feedback and asking for developers to provide use cases if this is a blocker for them. If this affects you, please post to the comments.",
      "state": "closed",
      "created_at": "2021-04-15T21:08:05.739Z",
      "updated_at": "2022-05-29T23:37:37.108Z",
      "closed_at": "2022-05-29T23:37:37.093Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "flow::Triage"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/106",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/106",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/106/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/106/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#106",
        "relative": "#106",
        "full": "meltano/sdk#106"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 85332574,
      "iid": 108,
      "project_id": 22672923,
      "title": "Allow developers to explicitly declare \"unsupported streams\"",
      "description": "As came up in the [office hours session](https://www.youtube.com/watch?v=_wY4DrFIpxM&t=1550s) this week, it would be helpful if developers could expose which API endpoints they explicitly _have not_ covered yet in their implementation.\n\nAs Douwe mentioned in the video link, the Singer Spec does already support an \"unsupported\" flag for catalog metadata, and this could be applied if the developer wanted to expose to potential users (and also in SingerHub) which streams and covered by the tap and which streams are not covered.",
      "state": "closed",
      "created_at": "2021-04-16T18:30:23.297Z",
      "updated_at": "2022-05-29T23:37:51.856Z",
      "closed_at": "2022-05-29T23:37:51.840Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Community",
        "Extract",
        "kind::Feature"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/108",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/108",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/108/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/108/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#108",
        "relative": "#108",
        "full": "meltano/sdk#108"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 85598431,
      "iid": 110,
      "project_id": 22672923,
      "title": "Support defining configuration and stream schemas using Pydantic",
      "description": "[Pydantic] is the most popular data validation and serialization library for Python at the moment. It is used by the new-ish and increasingly popular web framework [FastAPI] and by other frameworks wanting to support reliable data validation and serialization (like [odmantic] for MongoDB and [pydantic-sqlalchemy]).\n\nAlternatives include [mashumaro], [marshmallow] and [dataclasses-json]. All of these support only a subset of Pydantic's features (no validation, serialization but no deserialization).\n\nI propose leveraging Pydantic to allow the SDK user to define a plugin's configuration and inline stream schemas using a known, powerful and well-documented library. The implementation would look something like the following:\n\n```python\nfrom pydantic import BaseModel\n\nclass BaseSchema(BaseModel):\n    # Created by the SDK developers to support the specifics of Singer schemas\n\nclass TapTestConfig(BaseSchema):\n    # Plugin config created by the SDK user\n\nclass ExampleStreamSchema(BaseSchema):\n    # Stream schema created by the SDK user\n```\n\nNotes:\n\n- `BaseSchema` needs to extend pydantic to make sure schemas are Singer-compatible: https://pydantic-docs.helpmanual.io/usage/schema/#schema-customization\n- Initial discussion for pydantic use: https://gitlab.com/meltano/singer-sdk/-/issues/10#note_519595958\n\n[Pydantic]: https://github.com/samuelcolvin/pydantic/\n[FastAPI]: https://github.com/tiangolo/fastapi\n[odmantic]: https://github.com/art049/odmantic\n[pydantic-sqlalchemy]: https://github.com/tiangolo/pydantic-sqlalchemy\n[mashumaro]: https://github.com/Fatal1ty/mashumaro\n[marshmallow]: https://github.com/marshmallow-code/marshmallow\n[dataclasses-json]: https://github.com/lidatong/dataclasses-json",
      "state": "closed",
      "created_at": "2021-04-20T22:19:33.113Z",
      "updated_at": "2022-05-29T23:38:06.980Z",
      "closed_at": "2022-05-29T23:38:06.966Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "flow::To Do",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/110",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/110",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/110/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/110/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#110",
        "relative": "#110",
        "full": "meltano/sdk#110"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 85981695,
      "iid": 117,
      "project_id": 22672923,
      "title": "add --setup method to taps and targets",
      "description": "Many taps and targets require setup steps to be performed before pipelines will run successfully. This typically includes:\n\n- Configuring databases to decode binlogs (e.g. MySQL and Postgres)\n- Configuring intermediate storage for targets (e.g. S3 for Snowflake and Redshift)\n- Checking connectivity (esp. VPC/Security Groups and non-AWS equivalents)\n- Checking user permissions\n\nToday these steps can generally be found in documentation and readme's, and are performed either manually or in other automation frameworks (terraform, permifrost etc.). It can be difficult managing 10's of databases (as a monolith becomes microservices) across multiple environments (staging and production), as well as being a barrier to easy on-boarding for new users. I can also see 'structured setup' being useful for auto-generating documentation in SingerHub.\n\nIt would be great to have two facilities via a `--setup` method:\n\n- Run setup steps interactively (asking for input and credentials as needed)\n- Check the setup status of a tap or target (e.g. is bin-log replication enabled? have snowflake stages been created?)",
      "state": "closed",
      "created_at": "2021-04-26T20:09:21.224Z",
      "updated_at": "2022-05-29T23:38:58.967Z",
      "closed_at": "2022-05-29T23:38:58.951Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "kind::Feature"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/117",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/117",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/117/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/117/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#117",
        "relative": "#117",
        "full": "meltano/sdk#117"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 86616264,
      "iid": 122,
      "project_id": 22672923,
      "title": "Follow-up from `sdk.meltano.com` website launch",
      "description": "We should create a proper website where people can read the docs without having to parse through repo paths.\n\nRelates to #15\n\nTodo:\n\nGet the site up:\n\n* [x] Publish to standalone site: https://meltano-sdk.readthedocs.io/ (!96)\n* [x] Add docs maintenance instructions to `CONTRIBUTING.md` (!96)\n* [x] Create `sdk.meltano.com` subdomain (https://gitlab.com/meltano/singer-sdk/-/issues/138)\n\nConfigure versioning and pre-release docs:\n\n* [x] Enable docs for pull requests (may require recreating the webhook)\n* [ ] Establish a process for the version bump. (The version string for RTD is tracked now in `docs/conf.py`.)\n* [ ] Define and test the `stable` vs `latest` tags in RTD. (We might need to link these to specific branches or branch naming patterns.)\n\nClean up / tidy documentation pages:\n\n* [ ] Now that the \"Reference\" section is being auto-generated via docstrings, it's worth a quick pass to clean up docstrings.\n* [ ] Make sure `reference.html` fully covers content from `reference_old.md` and then delete the old page.\n* [ ] There are some which were copy-pasted from another part of the code and still have stale descriptions.\n* [ ] We should note in docstrings, or with some other automated connection to the `@final` decorator, which methods are intended to be overloaded and which should not be.\n* [ ] We need to fix some pre-formatted docstrings. Docstrings have up-til-now been written expecting markdown rendering, whereas Sphinx expects ReStructureText. Example of faulty rending is the code sample here: https://sdk.meltano.com/en/latest/classes/singer_sdk.authenticators.OAuthAuthenticator.html#singer_sdk.authenticators.OAuthAuthenticator.oauth_request_body\n\nPutting it all together:\n- [x] Link to sdk.meltano.com from meltano.com and hub.meltano.com so that it gets indexed in Google\n- [x] Add link to https://gitlab.com/meltano/singer-sdk description (currently says \"See meltano#2401\")",
      "state": "closed",
      "created_at": "2021-05-06T20:40:06.004Z",
      "updated_at": "2022-05-29T23:39:28.760Z",
      "closed_at": "2022-05-29T23:39:28.743Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Community",
        "Documentation",
        "flow::Doing",
        "kind::Bug",
        "urgency::high",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 8,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/122",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 13,
        "completed_count": 6
      },
      "weight": 8,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/122",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/122/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/122/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#122",
        "relative": "#122",
        "full": "meltano/sdk#122"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 96,
      "epic": {
        "id": 240357,
        "iid": 96,
        "title": "SDK Development (Parent Epic)",
        "url": "/groups/meltano/-/epics/96",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 86618094,
      "iid": 123,
      "project_id": 22672923,
      "title": "Decide best implementation for input catalog SCHEMA handling",
      "description": "Currently the SDK automatically handles selection (!26 and #105) via an input catalog. We also pass along the input catalog to the developer via the overloadable `Stream.apply_catalog()`, in case the developer wants to handle other overrides from the catalog input. We do not try to force apply schema from the catalog.\n\nIn theory at least, there are four ways a schema could be applied:\n\n1. **Cast data types**: if a property's json schema type is different from that provided in the catalog schema, we could cast it. \n    - Likely would cause failures any time a change occurs in the course of upstream system's lifecycle, as follows:\n        1. User runs discovery to create `catalog.json`.\n        2. User manually annotates `catalog.json` with `selected = true` on desired streams and properties.\n        3. User also specified `selected-by-default` according to whether they want new fields auto-included.\n        4. User stores their customized `catalog.json` to pass it to subsequent executions of the tap, as the `--catalog` input argument.\n        5. Some time in the future a data type changes in the upstream system.\n        6. Tap breaks and user can no longer use the catalog.json file until resolving the type issue.\n        7. When the type issue is \"fixed\" by setting to whatever the new type is, the target auto-applies the change anyway.\n    - Admittedly, many orchestrators such as Meltano make this easier by dynamically applying selection logic so they don't have to physically store the exact catalog.json file. Still, in those scenarios there's also not an expectation that we are passing a schema override.\n    - One place I have seen this being helpful is for database types which fail to detect their type and instead emit an empty type object. However, in this case, I think the better generic behavior is to ensure that we coalesce the type to `string` if it is otherwise not detectable.\n2. **Apply schema subtractions** as deselection logic: \n    - We could treat missing properties in the catalog schema as implicit 'deselection' of the columns, as if their `selected` property was set to false.\n    - Arguably, this behavior is better implemented by the user selecting only the properties desired, and then setting `selected-by-default` to `false` as described [here in the spec](https://meltano.com/docs/singer-spec.html#metadata).\n    - The downside of applying this logic is that we may inadvertently drop newly added properties the user would have preferred to auto-select (again, per the `selected-by-default` property).\n3. **Apply schema additions** to create empty properties:\n    - We could create an empty field if a property exists in the catalog's schema but that field is not known to the tap developer.\n4. **Print a warning message.**\n    - Rather than take any specific action to change behavior, we could simply print a warning if schema has changed between the input catalog and the discovered catalog.\n    - This is perhaps the simplest application and least failure-prone.\n4. **Apply stream renaming/remapping.**\n    - Since `stream` is generally sent as table name to the downstream target and `tap_stream_id` is an internal field intended to be used solely by the tap itself, the user should be able to override the name specified in `stream` without breaking the tap implementation.\n    - This scenario does have real-life application, for instance:\n        1. The target already has another table by the same name. For a table named `users`, the user may override `stream` as `users_v2` to avoid collision, leaving `tap_stream_id` to still point to the original value `users`.\n        1. The stream name is an illegal or nonsensical name in the target system. Real world example `dev-employee-table` was the stream name (dynamoDB source) and the Snowflake target wanted to name the table `table` in a schema called `employee`. The solution which worked was to override `stream` as `employees` within the catalog entry and leave `tap_stream_id` and the upstream `table-name` mapping property untouched.\n    - Technically this property does not belong to the `schema` property but it is part of the input catalog (and separate from `metadata`) so I am noting it here for completeness.",
      "state": "closed",
      "created_at": "2021-05-06T21:37:47.532Z",
      "updated_at": "2022-05-29T23:39:36.392Z",
      "closed_at": "2022-05-29T23:39:36.376Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/123",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/123",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/123/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/123/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#123",
        "relative": "#123",
        "full": "meltano/sdk#123"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 86618908,
      "iid": 124,
      "project_id": 22672923,
      "title": "Provide access to last-seen record in `get_next_page_token()`",
      "description": "As @rabidaudio points out [here](https://gitlab.com/meltano/singer-sdk/-/issues/115#note_563148595):\n\n> Another thing I was thinking was it might be convenient for `get_next_page_token` to receive the latest row, as in this case and other taps I've written the next query starts from the timestamp of the last returned value, as opposed to the number of records or fixed amounts of paging.\n\nAnd (after some hesitancy :sweat_smile:) I replied:\n\n> ... I think your intuition is good here. I have [another tap implementation](https://github.com/singer-io/tap-github/issues/111#issue-866772661-permalink) I was working on recently we have a `since` pagination method that takes the integer `id` of the last record... In both cases, we do need a value from the `previous_record` in order to orchestrate the pagination loop.\n\nI've thought about this more, and I think the approach of passing the last-seen record's data is preferable to requiring the developer to stash the latest pagination data on each record's parsing, as @rabidaudio's [implementation](https://github.com/fixdauto/tap-newrelic/blob/main/tap_newrelic/streams.py#L102) needed to do.\n\nWe could add `latest_record` or `last_seen_record` into `get_next_page_token`, with an implementation like:\n\n```\n    def get_next_page_token(self, response, previous_token, last_record: Optional[dict]):\n        if not last_record:\n            return None\n\n        return { \"since\": last_record[\"id\"] }\n```\n\nWith this implementation, we can optionally also auto-detect if zero records are returned within a page that there is no subsequent page. Otherwise, the developer needs to provide logic for when to stop looping.\n\nAlso, we probably want `last_record` to be `None` if there have been no records emitted since the last pagination.\n\n------------------------\n\n## Updates (Jun 7, 2021):\n\n- I'm inclined to include this in an upcoming release. It will be a breaking change so it should be ideally grouped with other major and/or breaking changes.\n- My preference would be for `last_seen_record` to be `None` in the case of a fully empty page (meaning no records at all returned in the page). However, this makes naming the argument more difficult, since that behavior would not be obvious from the existing naming ideas we've logged.",
      "state": "closed",
      "created_at": "2021-05-06T22:08:36.909Z",
      "updated_at": "2022-05-29T23:39:43.492Z",
      "closed_at": "2022-05-29T23:39:43.468Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/124",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/124",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/124/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/124/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#124",
        "relative": "#124",
        "full": "meltano/sdk#124"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 87107865,
      "iid": 129,
      "project_id": 22672923,
      "title": "CI/CD Publish-to-poetry job shows failure even when the publish succeeds",
      "description": "During publish to PyPi, the job fails even though the publish was successful.\n\nAt first I thought this was an interim issue but it's been consistent and should be researched.\n\nhttps://gitlab.com/meltano/singer-sdk/-/jobs/1263678773\n\nFailure message is `release-cli not found`:\n\n![image](/uploads/6de14d51167c5a07d2d093bb39db05a9/image.png)",
      "state": "closed",
      "created_at": "2021-05-14T19:17:14.939Z",
      "updated_at": "2022-05-29T23:40:26.602Z",
      "closed_at": "2022-05-29T23:40:26.569Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "flow::To Do",
        "kind::Bug",
        "urgency::low",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2252673,
        "iid": 193,
        "group_id": 2524164,
        "title": "Internal WIP",
        "description": "",
        "state": "active",
        "created_at": "2021-09-27T19:02:31.281Z",
        "updated_at": "2021-09-28T18:29:26.781Z",
        "due_date": null,
        "start_date": null,
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/193"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/129",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 2,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/129",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/129/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/129/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#129",
        "relative": "#129",
        "full": "meltano/sdk#129"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 87223411,
      "iid": 130,
      "project_id": 22672923,
      "title": "Handle `SIGTERM` messages to shut down gracefully",
      "description": "## Summary\n\nAs brought up in [this slack conversation](https://meltano.slack.com/archives/CQUDGG7U2/p1621212575038600?thread_ts=1621134078.037500&cid=CQUDGG7U2), we have an opportunity to handle [`SIGTERM` messages](https://linuxhandbook.com/sigterm-vs-sigkill/#:~:text=Though%20both%20of%20these%20signals,cannot%20be%20handled%20or%20blocked.) gracefully. \n\n## Proposed benefits\n\nThis could improve SDK-based taps' functionality when being told to shut down gracefully.\n\n## Proposal details\n\n- For any sorted incremental streams: we can flush the current stream and cancel syncing any other records.\n- For non-sorted streams and/or streams which do not support incremental refresh: we may choose to continue syncing until the stream sync completes (or until `SIGKILL` forces shutdown).\n- Avoid starting any other streams once the running streams are handled, as specified above.\n\n\n## Best reasons not to build\n\nNo downsides, no reason not to implement.",
      "state": "closed",
      "created_at": "2021-05-17T18:16:11.221Z",
      "updated_at": "2022-05-29T23:40:34.492Z",
      "closed_at": "2022-05-29T23:40:34.473Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "kind::Feature"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/130",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/130",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/130/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/130/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#130",
        "relative": "#130",
        "full": "meltano/sdk#130"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 87767557,
      "iid": 134,
      "project_id": 22672923,
      "title": "Error Handling",
      "description": "Following up on our Office hours today. Not sure if we want this to be Target only or not your call @aaronsteers \n\nError Handling especially with SaaS style targets gets pretty interesting. Here's errors you'll hit at some point (one's that I can think about off the top of my head there's tons more, everything you can imagine when you run this stuff at scale)\n\nConnection issues\n1. For HTTP requests: 500 Requests, timeouts in everyway you can imagine (hopefully your libraries have sane defaults for connection timeouts, read timeouts, targets will need to change these at timmes) \"Server Busy\", \"Internal Error\", etc\n1. Data Issues for HTTP you'll get response codes all over the place depending on the api but generally something like 406, 403, 404, 400, etc. \"User already exists\", \"Name is invalid (over char limit)\", \"Unknown Error occured\", \"Cannot disable user due to them having xyz permissions\"\n\n\nEach of these errors needs to be handled slightly different. Some a simple retry with exponential backoff fixes your problem. \n\nData issues are something you can't get away from, and for a lot of SaaS apis (lots are not http based by the way, see Active Directory, and more) you'll get data errors that are masked as things like 500 errors. \n\nFunctionality that's probably needed:\n1.  Error handling strategy for \"hard\" or \"soft\" errors. One record failing out of 1000 should still output something to stderr / stdout , and the target process should return a response code of something different than 0, but it's no where near as critical as all 1000 records failing which would need a response code of 1. \n1. Configuration for changing thresholds by users of targets. Everyone has different use cases. Thresholds could be percentage based, hard coded number of rows like >10 rows is a \"hard\" failure\n1. Retry logic\n\nSome of this \"maybe all?\" could be handling by a dead letter queue of some sort.\n\n\nUse cases that I know about today:\n- https://github.com/AutoIDM/tap-googleads/pull/19/files\n- https://github.com/MeltanoLabs/tap-github/issues/16\n- https://gitlab.com/meltano/sdk/-/issues/282",
      "state": "closed",
      "created_at": "2021-05-26T17:40:34.565Z",
      "updated_at": "2022-05-29T23:41:04.202Z",
      "closed_at": "2022-05-29T23:41:04.186Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "Load",
        "flow::Triage",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 12,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/134",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/134",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/134/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/134/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#134",
        "relative": "#134",
        "full": "meltano/sdk#134"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 87768033,
      "iid": 135,
      "project_id": 22672923,
      "title": "Target sink - optimization strategies for when to flush batches",
      "description": "While draining or flushing a collection of target sinks, priority could be given to a number of different values:\n\n1. Drain often for benefit of:\n    1. reduced memory pressure by flushing stored records\n    2. reduced latency, at least for earlier-emitted record(s)\n    3. more frequent checkpoints, aka increased frequency of STATE messages emitted\n2. Drain less often for benefit of:\n    1. Fewer overall batches\n    2. Efficiency of bulk loading records at high scale\n    3. Lower costs on destination platforms which may charged or metered per batch\n        - for instance Snowflake charges less when running 1 minute out of every 15 versus running intermittently for all 15 minutes.\n3. Other factors to consider:\n    1. defining 'full' for each sink\n        - Each sink should report when it is full, either by writing custom `is_full()` logic or else by specifying a max record count.\n    1. controlling max per-record latency\n        - We may want to provide a max per-record latency threshold - for instance, prioritizing a batch to be loaded if contains one ore more record in queue for over 120 minutes.\n    2. draining multiple sinks when one is triggered ('toppling')\n        - When one sink is being drained, we may want to opportunistically drain all others at the same time. This could have benefits for metering and platform costs.\n        - For instance, it is cheaper in the Snowflake case to flush all at once and have fewer minutes of each hour running batches.\n        - Draining all sinks also allows us to flush the stored state message(s).\n    3. memory pressure\n        - If memory pressure is detected, this might force the flush of one or more streams\n\nOur strategy for this (broadly) should probably be to have at least two layers:\n\n- The developer provides some default logic or prioritization strategy that is tuned to work well for the destination system.\n- The user may optionally have some ability to override at runtime using config options.",
      "state": "closed",
      "created_at": "2021-05-26T17:53:40.698Z",
      "updated_at": "2022-05-29T23:41:11.720Z",
      "closed_at": "2022-05-29T23:41:11.666Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Load",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/135",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/135",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/135/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/135/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#135",
        "relative": "#135",
        "full": "meltano/sdk#135"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 108,
      "epic": {
        "id": 302158,
        "iid": 108,
        "title": "Expanded Target Functionality in the SDK",
        "url": "/groups/meltano/-/epics/108",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>2278</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 87879017,
      "iid": 136,
      "project_id": 22672923,
      "title": "Enable generation of the YAML file required for the Hub",
      "description": "It should be as simple as possible for people using the SDK to build a tap or target to connect it to the Hub. The metadata for a given connector should be stored with the connector itself where possible, including the logo. We can definitely iterate on this though!",
      "state": "closed",
      "created_at": "2021-05-28T14:43:05.629Z",
      "updated_at": "2022-05-29T23:41:18.877Z",
      "closed_at": "2022-05-29T23:41:18.860Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "flow::Triage",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/136",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 8,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/136",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/136/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/136/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#136",
        "relative": "#136",
        "full": "meltano/sdk#136"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 88472612,
      "iid": 144,
      "project_id": 22672923,
      "title": "Make database name and schema name available to the stream mapping config",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\nAdd the ability to the stream mapping config to access the name of the table's schema or database name.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\nThis would enable the case where I need to add a column to a table that provides the schema that the table is housed within. In my case the schema name has important meaning and will act as part of a composite primary key in the table loaded into the warehouse.\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\nI would assume that this would be achievable through some sort of specific syntax that accesses some of the metadata of the stream.\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\nNothing comes to mind because the stream mapping feature should be able to overcome most negatives.",
      "state": "closed",
      "created_at": "2021-06-09T16:42:28.651Z",
      "updated_at": "2022-05-29T23:42:18.034Z",
      "closed_at": "2022-05-29T23:42:18.015Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 8784356,
        "username": "jlloyd3",
        "public_email": "",
        "name": "Josh Lloyd",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8784356/avatar.png",
        "web_url": "https://gitlab.com/jlloyd3"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/144",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/144",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/144/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/144/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#144",
        "relative": "#144",
        "full": "meltano/sdk#144"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 88946404,
      "iid": 148,
      "project_id": 22672923,
      "title": "Type hints in JSON Schema for blobs/clobs, etc.",
      "description": "As came up on demo day today, we should invest in hints and conventions for taps to inform targets about special data types.\n\nPossibly use `type=string` and `format=sql-type:<clob/blob>`\n\n\"There is a bias toward networking-related formats in the JSON Schema specification, most likely due to its heritage in web technologies. However, custom formats may also be used, as long as the parties exchanging the JSON documents also exchange information about the custom format types. A JSON Schema validator will ignore any format type that it does not understand.\"\n\nhttps://json-schema.org/understanding-json-schema/reference/string.html?highlight=date%20time#format",
      "state": "closed",
      "created_at": "2021-06-18T17:03:42.698Z",
      "updated_at": "2022-05-29T23:42:49.540Z",
      "closed_at": "2022-05-29T23:42:49.524Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "flow::Triage",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/148",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/148",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/148/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/148/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#148",
        "relative": "#148",
        "full": "meltano/sdk#148"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 89192787,
      "iid": 150,
      "project_id": 22672923,
      "title": "Link from docs to source code",
      "description": "Auto-generated SDK docs don't yet link to the source code.\n\nIn theory we can add that with this Sphinx extension: \n\nhttps://www.sphinx-doc.org/en/master/usage/extensions/linkcode.html",
      "state": "closed",
      "created_at": "2021-06-23T19:18:49.199Z",
      "updated_at": "2022-05-29T23:43:09.373Z",
      "closed_at": "2022-05-29T23:43:09.359Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Documentation",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/150",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/150",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/150/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/150/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#150",
        "relative": "#150",
        "full": "meltano/sdk#150"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 89858198,
      "iid": 162,
      "project_id": 22672923,
      "title": "Spec proposal for duplicate-proof incremental replication",
      "description": "As part of the Singer spec, and also as a best practice to avoid records being skipped, taps are implemented with a `greater-than-or-equal-to` comparison against the replication key value.\n\nThe \"or equal to\" part of the comparison is confusing to new users but the reason for it is important: to ensure record \"ties\" are never omitted from the final target.\n\n## Existing mitigations\n\nThe current solution for this problem is (1) use primary key upserts on the target side, which will naturally solve the duplication problem or (2) use a solution like dbt to remove duplicates downstream.\n\n## Proposed improvement\n\n1. Continue, as today, to use \"greater than or equal to\" logic.\n2. Add to the STATE dictionary a new `record_hashes_seen` property (or similar) as a list of record hashes having the same value as the max replication key value.\n    - As we parse each record during a stream, assuming its value is equal to the max replication key (which will be true for _every_ record if the stream is sorted), then we can store a hash of the record into STATE along with the max replication key value.\n3. Next time through the sync, if the hash of a record exactly matches a hash in the set of `record_hashes_seen`, we can omit that record and not send it downstream.\n4. Any other ties by replication_key_value will be emitted downstream to the target, assuming their hash has _not_ yet been seen/sent.\n5. When writing out STATE messages, only the latest \"ties\" need to be included in the `record_hashes_seen`. This would not be a cumulative list of all records, only the latest ties by replication key.\n\n\nSince the SDK entirely handles the State implementation for SDK-based taps, we have an opportunity to build this as a more robust solution across all taps using the SDK.\n\n## Best reasons not to build\n\nThe reasons _not_ to build this are (1) performance, (2) complexity, and (3) scalability.\n\nThe complexity argument can be mitigated by the fact that these are all aspects managed entirely in the SDK, so developers and users can in general completely ignore these internal state treatments.\n\nRegarding performance, the hashing of a record should be able to be performed very quickly, and then it is just a matter of tuning the caching and variable comparison logic. This should be tunable to reach satisfactory performance, but if not, we could also mitigate by enabling as an optional setting, such as `dedupe_incremental_streams` (bool), or similar.\n\nRegarding scalability, this solution should scale fine assuming a small number \"ties\" by replication key value. If the number of ties is in the thousands or larger, however, this could have adverse affects on the stability of STATE messages. An option to disable the behavior via settings (as described in the previous paragraph, could prove useful for this as well. That said, presumably the larger the number of ties (within reason), the higher the value of this deduplication capability.\n\n## Regarding adherance to Singer Spec\n\nTo my knowledge, this implementation would still adhere to the spec since (1) the STATE behavior is entirely up to the tap to control, (2) we still accomplish `>=` logic for replication keys, (3) we still guarantee that every record will be sent _at least once_.",
      "state": "closed",
      "created_at": "2021-07-06T18:51:05.117Z",
      "updated_at": "2022-05-29T23:45:04.043Z",
      "closed_at": "2022-05-29T23:45:04.025Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/162",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/162",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/162/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/162/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#162",
        "relative": "#162",
        "full": "meltano/sdk#162"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 88,
      "epic": {
        "id": 213760,
        "iid": 88,
        "title": "Evolution of the Singer protocol",
        "url": "/groups/meltano/-/epics/88",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 90038813,
      "iid": 167,
      "project_id": 22672923,
      "title": "New silent parent stream or \"MultiStream\" class proposal for taps",
      "description": "There are two recently uncovered use cases for a \"MultiStream\" Stream class in the Tap SDK, which reads data serially from a source containing multiple streams and schemas:\n\n1. Binlogs - Database logs will be system- or database-wide and the most efficient way to parse them is to read from beginning to end and emit whatever (qualified) stream records are found.\n2. \"Replay\" capability - For a proposed \"--replay\" capability, we may want to need to read a similar string of data containing multiple streams' data, and then emit each.\n\nFor either scenario (binlogs being the more common and timely), we'd want to deserialize lines of text into \"records\" where we don't know in advance which stream the line would apply to.\n\n## Proposal\n\nA new \"MultiStream\" class could read in data from any number of streams, qualify whether they should be emitted, and then either (a) emit the record downstream directly or (b) delegate to another stream object which is custom to that stream type.",
      "state": "closed",
      "created_at": "2021-07-09T17:56:40.069Z",
      "updated_at": "2022-05-29T23:45:54.551Z",
      "closed_at": "2022-05-29T23:45:54.532Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Needs Refinement",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/167",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/167",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/167/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/167/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#167",
        "relative": "#167",
        "full": "meltano/sdk#167"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    }
  ]
}
