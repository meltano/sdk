{
  "cookies": {
    "_cfuvid": "Gej0NipbRWYfyd0YYUVcdX1I1Xp0DAVo258xSod5PwE-1747940859052-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:38.945748+00:00",
  "elapsed": 0.570966,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e98fe58671f76-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:39 GMT",
    "ETag": "W/\"21a8c32e10250bc3c7c2c233fc0ff651\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/117/issues?epic_iid=117&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/117/issues?epic_iid=117&id=2524164&page=1&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=Gej0NipbRWYfyd0YYUVcdX1I1Xp0DAVo258xSod5PwE-1747940859052-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-41-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-c",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"5c8b1ef27c4bdbd6d4fb68bf7a69b108\",\"version\":\"1\"}",
    "x-next-page": "",
    "x-page": "1",
    "x-per-page": "20",
    "x-prev-page": "",
    "x-request-id": "5c8b1ef27c4bdbd6d4fb68bf7a69b108",
    "x-runtime": "0.359597",
    "x-total": "14",
    "x-total-pages": "1"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/117/issues"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/117/issues",
  "_decoded_content": [
    {
      "id": 105223064,
      "iid": 3342,
      "project_id": 7603319,
      "title": "Allow remote full refresh or backfill trigger from UI or command line.",
      "description": "### Problem to solve\nWe have a setup where production credentials are not always immediately accessible to a developer or user running a local meltano setup. This means that using the `--full-refresh` command line option isn't available in the same way for resyncing historic data for an integration (because the right credentials aren't available in their environment).\n\nAdditionally, running in the local terminal relies on a continued connection from the local environment which might not always be feasible with a large integration - with long sync times.\n\nAs a user I don't think it should require the credentials for the tap itself to be able to trigger a resync as a user. Ideally this would be in the UI, but being able to trigger a sync (or reset the state bookmark) from the command line - and then allow the remote scheduler to pick up the work of actually doing the sync - would also work.\n\n### Target audience\nUsers or analysts who have an interest in the data coming through meltano but might not have access to all the credentials to be able to use run `--full-refresh` locally (or have an environment appropriate for that).\n\nThis came up in a conversation with @kgpayne who will have potentially more context :smile: .\n\n### Further details\nThis is a relatively standard feature on meltano competitors:\n- Fivetran: https://www.fivetran.com/blog/table-resync\n- Pipelinewise: https://transferwise.github.io/pipelinewise/user_guide/resync.html\n\n### Proposal\nSuggest the following user flow:\n1. User clicks button on runs command line option.\n2. There is a warning which says something like: \"Warning: you are about to reset the state bookmark for X pipeline. This will mean that new data may not be loaded until the resync is completed and this action cannot be undone.\"\n3. The new automated load then restarts the sync as though no bookmark was present.\n\n### What does success look like, and how can we measure that?\nUsers can trigger a resync in a non-production environment with as few permissions and credentials as required.",
      "state": "closed",
      "created_at": "2022-03-21T17:45:02.058Z",
      "updated_at": "2022-05-30T10:29:25.823Z",
      "closed_at": "2022-05-30T10:29:25.806Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 516571,
        "username": "alanmcruickshank",
        "public_email": "",
        "name": "Alan Cruickshank",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/76b4c66dd4e23716cc3b8568a7d12a5e209b82cf51f218322167ada52c06038d?s=80&d=identicon",
        "web_url": "https://gitlab.com/alanmcruickshank"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3342",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3342",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3342/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3342/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3342",
        "relative": "#3342",
        "full": "meltano/meltano#3342"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1201152,
      "relative_position": -11286
    },
    {
      "id": 102962370,
      "iid": 3284,
      "project_id": 7603319,
      "title": "Bookmarks are not cleared after successful job",
      "description": "Creating this as a placeholder since we didn't get to the bottom of it in Slack.\n\n### What is the current *bug* behavior?\n\nWhen state keys are cleared using `singer.clear_bookmark`, it appears that the deletion is not persisted in the `job.payload` written by Meltano after the job completes. This can result in subsequent jobs receiving stale state from previous runs.\n\nFor example, see this tap-mysql Singer-spec conformance bug, which triggers the offending behavior: https://github.com/transferwise/pipelinewise-tap-mysql/issues/91\n\n(Discussed in Slack here: https://meltano.slack.com/archives/C01TCRBBJD7/p1645204077095659)\n\nI've only observed this in my 0.69 instance, I've yet to test this behavior with a newer version.\n\n### What is the expected *correct* behavior?\nRunning `singer.clear_bookmark` should result in the key being omitted from the `job.payload`.\n\n\n### Steps to reproduce\nOne repro is to run the `tap-mysql` in FULL_TABLE mode, with a table that has auto-incrementing PK. Note the stray `max_pk_values` key.\n\n\n### Relevant logs and/or screenshots\n\n\n\n### Possible fixes\n\n\n\n### Further regression test\n\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team",
      "state": "closed",
      "created_at": "2022-02-24T01:26:16.489Z",
      "updated_at": "2022-04-15T23:24:34.977Z",
      "closed_at": "2022-04-15T23:24:34.951Z",
      "closed_by": {
        "id": 783565,
        "username": "paul.tiplady",
        "public_email": "",
        "name": "Paul Tiplady",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/783565/avatar.png",
        "web_url": "https://gitlab.com/paul.tiplady"
      },
      "labels": [
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 783565,
        "username": "paul.tiplady",
        "public_email": "",
        "name": "Paul Tiplady",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/783565/avatar.png",
        "web_url": "https://gitlab.com/paul.tiplady"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3284",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3284",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3284/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3284/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3284",
        "relative": "#3284",
        "full": "meltano/meltano#3284"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1149211,
      "relative_position": -10773
    },
    {
      "id": 102652783,
      "iid": 3255,
      "project_id": 7603319,
      "title": "Add `container_spec` for extractors and loaders",
      "description": "Following from the original issue #2205+, I'm logging an issue to bring `container_spec` to extractors and loaders, which would allow for containerized and/or non-python taps and targets. \n\nWe don't have a huge number of use cases right now for containerized taps and targets, except perhaps running them in isolated and/or \"right sized\" ECS/EKS tasks as is being explored in #3228+. If others have use cases or feel this should be higher priority, please sound off in comments below.\n\nThanks!\n\nCc @edgarrmondragon, @pandemicsyn, @kgpayne, @tayloramurphy",
      "state": "closed",
      "created_at": "2022-02-17T23:25:57.967Z",
      "updated_at": "2022-05-30T10:18:50.798Z",
      "closed_at": "2022-05-30T10:18:50.781Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Extract",
        "Load",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3255",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3255",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3255/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3255/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3255",
        "relative": "#3255",
        "full": "meltano/meltano#3255"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1139879,
      "relative_position": -10260
    },
    {
      "id": 97265670,
      "iid": 3056,
      "project_id": 7603319,
      "title": "If we ever want to support non-Singer connectors",
      "description": "We don't like to name competitors, hence the silly title. But I've given some thought to this and wanted to provide a place for others to discuss as well if folks are interested.\n\n## Step 1: Docker support\n\nWe've already got this in plan, and I think the implementation is is pretty straightforward. In addition to native invocation options, we'd add an optional `docker: ...` block to any plugin definition (including taps and targets) in order to invoke via docker instead of invoke via the native/local CLI command.\n\n## Step 2: Airbyte wrapper classes as sibling to our Singer wrapper classes\n\nThe fundamental paradigms in the Airbyte spec (as I understand them at least) is pretty anbalagous to the Singer spec. The Airbyte implementation classes may even be able to be implemented as a subclass of the Singer ones.\n\n## Optional Spike (A): Can we create a mapper that translates Airbyte STDOUT to Singer jsonl, inline?\n\nSimilar to our stream maps inline mapper, this would be an adaptive mapper that translated the messages themselves. My understanding is that Airbyte already does this in the reverse with their Singer wrapper so I don't see any technical why the reverse would not be possible.\n\n## Optional Spike (B): Can we create a standard Dockerfile wrapper that converts connectors to Singer versions? \n\nIf yes to Spike A, this becomes a lot easier - since then we only need to deal with passing the appropriate config.\n\n## Important takeaways architecturally\n\nI actually _do not_ think there's much value in wrapping Airbyte at this time, and I think we're very close to having a much more dynamic and powerful spec (with BATCH, --about, and tons of other features), arguably a superior development experience with the SDK, and tons more connectors vs Airbyte.\n\nThat said, the main reason I wanted to write this up is to show that architecturally speaking, almost nothing changes aside from the already planned Docker support. Even `meltano.yml` _already_ uses the generic terms `extractors` and `loaders` so we could easily add a `protocol: <singer|airbyte>` entry to extractor and loader definitions which defaults to `singer` but can also be `airbyte`. \n\nThe other reason I wanted to write this up is to show that a heterogenous implementation may be realistic _if_ we find value enough to build it. Because Airbyte spec borrows _so much_ from Airbyte, the two have more in common than different. `meltano elt` and `meltano run` would be virtually unchanged if we did chose to adopt Airbyte down the road.\n\n\n<!-- Labels to add for triaging -->",
      "state": "opened",
      "created_at": "2021-11-04T00:13:02.826Z",
      "updated_at": "2022-03-03T16:11:03.108Z",
      "closed_at": null,
      "closed_by": null,
      "labels": [
        "kind::Non-Product",
        "valuestream::Ecosystem"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 0,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": true,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3056",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3056",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3056/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3056/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3056",
        "relative": "#3056",
        "full": "meltano/meltano#3056"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 922418,
      "relative_position": -7182
    },
    {
      "id": 96312998,
      "iid": 3029,
      "project_id": 7603319,
      "title": "Add schema validation to config files",
      "description": "### Problem to solve\nToday, config is loaded from YAML into a `dict` and passed directly to the `Canonical` class to create an object representation. This approach is naive - no validation is done on the input YAML file. This is even more important to add after #2456 as 'subfiles' support a subset of config that is definable in `meltano.yml` (i.e. they have different schemas).\n\n\n### Target audience\nAnyone using the Meltano.\n\n\n### Further details\nThis is somewhat related to #2985 and #2177 - on refactoring the way we handle and represent config internally.\n\n\n### Proposal\n- define schemas for each config type\n- check the shape of config dictionaries against their expected schema on load and dump\n\n\n### What does success look like, and how can we measure that?\nInvalid config manifests as config load errors, rather than either 'unexpected parameter' errors or silent ignores of added config in unexpected places.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_",
      "state": "closed",
      "created_at": "2021-10-28T09:58:07.608Z",
      "updated_at": "2022-05-30T09:51:18.162Z",
      "closed_at": "2022-05-30T09:51:18.142Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3029",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3029",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3029/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3029/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3029",
        "relative": "#3029",
        "full": "meltano/meltano#3029"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 908497,
      "relative_position": -6669
    },
    {
      "id": 96248063,
      "iid": 3026,
      "project_id": 7603319,
      "title": "Support experimental releases",
      "description": "There have been two recent needs for supporting long-lived meltano releases containing experimental features:\n\n- To test major changes, such as meltano&116 \n- To test and develop features for the [Singer Working Group](https://github.com/MeltanoLabs/Singer-Working-Group) e.g. #2364 \n\nIn the latter case, there was a general sentiment during the 2nd Singer Working Group session that the Spec exists to codify tried-and-tested patterns, rather than necessarily to formally sanction specific patters or behaviours. This isn't a hard and fast rule per say, but it makes sense that the group would prefer to see real world examples of delivered value before committing to altering the Singer specification.\n\nThis need for experimentation straddles the entire Meltano stack:\n\n- Meltano itself (e.g. composable pipelines)\n- Taps/Targets (possibly via the SDK)\n- The Singer Spec (possibly via the PPW fork of `singer-python`, or a new one of our own)",
      "state": "closed",
      "created_at": "2021-10-27T12:28:23.884Z",
      "updated_at": "2022-05-30T09:50:55.518Z",
      "closed_at": "2022-05-30T09:50:55.501Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Risk",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2252673,
        "iid": 193,
        "group_id": 2524164,
        "title": "Internal WIP",
        "description": "",
        "state": "active",
        "created_at": "2021-09-27T19:02:31.281Z",
        "updated_at": "2021-09-28T18:29:26.781Z",
        "due_date": null,
        "start_date": null,
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/193"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3026",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3026",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3026/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3026/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3026",
        "relative": "#3026",
        "full": "meltano/meltano#3026"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 906150,
      "relative_position": -6156
    },
    {
      "id": 94305014,
      "iid": 2954,
      "project_id": 7603319,
      "title": "500 error while adding extractor where extractor already exists",
      "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\nReceiving 500 Internal Server Error when adding existing extractors or loaders.\n\n\n\n### What is the expected *correct* behavior?\nReturn HTTP success code with response data\n```json\n{\n    \"name\": \"tap-bigquery\",\n    \"pip_url\": \"tap-bigquery\",\n    \"variant\": \"anelendata\"\n}\n```\n\n\n### Steps to reproduce\nAdd any extractors or loaders sending POST request on `/api/v1/pugins/add` and data\n```json\n{\n  \"pluginType\": \"extractors\",\n  \"name\": \"tap-bigquery\"\n}\n```\nRepeat above process to get the error\n\n\n### Relevant logs and/or screenshots\n![Screenshot_2021-09-26_at_08.11.53](/uploads/bf641583b80cbb91337bdc320015dfe4/Screenshot_2021-09-26_at_08.11.53.png)\n\n\n### Possible fixes\nhttps://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/project_add_service.py#L41\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team",
      "state": "closed",
      "created_at": "2021-09-26T02:50:20.866Z",
      "updated_at": "2022-05-30T09:42:17.598Z",
      "closed_at": "2022-05-30T09:42:17.577Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "API",
        "flow::Triage",
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 6830996,
        "username": "sumit-sampang-rai",
        "public_email": "",
        "name": "Sumit Rai",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/6830996/avatar.png",
        "web_url": "https://gitlab.com/sumit-sampang-rai"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2954",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2954",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2954/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2954/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2954",
        "relative": "#2954",
        "full": "meltano/meltano#2954"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 847226,
      "relative_position": -5130
    },
    {
      "id": 94268171,
      "iid": 2951,
      "project_id": 7603319,
      "title": "Gitlab Pipelines intermittent error; Connection Failed",
      "description": "The CI/CD Pipelines for the `meltano/meltano` project fail intermittently with `Connection Failed` when retrieving `deb` packages form the `debian.org` domain.\n\nExamples:\n\n- https://gitlab.com/meltano/meltano/-/jobs/1620019473\n- https://gitlab.com/meltano/meltano/-/jobs/1620002407\n\nIf this is not resolved upstream (by Gitlab or Debian), we should consider pinning to a specific Debian release of `python:3.6` in Docker and mirroring the relevant system packages we depend on using [GitLab Package Registry](https://docs.gitlab.com/ee/user/packages/package_registry/).",
      "state": "closed",
      "created_at": "2021-09-24T16:57:11.253Z",
      "updated_at": "2021-09-29T18:44:25.510Z",
      "closed_at": "2021-09-28T22:06:11.862Z",
      "closed_by": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "labels": [
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": null,
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 0,
      "merge_requests_count": 1,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2951",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2951",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2951/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2951/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2951",
        "relative": "#2951",
        "full": "meltano/meltano#2951"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 845177,
      "relative_position": -4617
    },
    {
      "id": 92696255,
      "iid": 2907,
      "project_id": 7603319,
      "title": "Refresh catalog on every invoke (fresh_catalog: true))",
      "description": "I want to have Meltano build a new catalog every run when running `meltano invoke tap-oracle`\n\nA key at the SingerPlugin level probably makes sense, maybe call it `fresh_catalog` default to false? \n\nMore specific than #2850 as #2627 didn't solve what I'm after. What I really want is a way to manage and watch my catalog change over time (#2677 / #2805 ), but this issue will be an incremental improvement over where I\"m at today. \n\nToday I delete the catalog and cache key from `.meltano/run/tap-name/*`",
      "state": "closed",
      "created_at": "2021-08-27T12:26:32.387Z",
      "updated_at": "2022-05-30T09:36:15.632Z",
      "closed_at": "2022-05-30T09:36:15.609Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2907",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2907",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2907/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2907/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2907",
        "relative": "#2907",
        "full": "meltano/meltano#2907"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 971479,
      "relative_position": -8721
    },
    {
      "id": 85979293,
      "iid": 2727,
      "project_id": 7603319,
      "title": "Improve ELT performance by running multiple tap processes in parallel (\"Melturbo\")",
      "description": "For integrations with large numbers of streams (e.g. monolithic application databases) it is often advantageous to break the integration up into multiple Meltano pipelines. Today, this is supported (using tap inheritance and selection criteria) but very manual. In an ideal world, Meltano would be able to use a combination of context collected in discovery, context from previous pipeline runs (e.g. records transferred) and hints/overrides provided by end-users in config to optimise the 'sharding' of pipelines. Like the turbocharger on a Diesel engine, this is in aid of eke out every bit of available performance, and may also serve as a way of parallelising taps and targets that do not implement multithreading.\n\n**Discovery Context**:\n\n- Availability of Primary Keys (large FULL_TABLE replications in their own pipelines)\n- Data Volume (count of records)\n- Data Velocity (records per hour, if a `created_at` field is available)\n\n**Run-history Context**:\n\n- Avg. time taken for Stream sync\n- Records per Stream sync (could be many more than records per hour above for e.g. weekly schedules)\n\n**Hint/Override Context**:\n\n- Composable Table/Stream groups (we have several pipelines that collect subsets of tables that correspond to a 'domain' in our monolith)\n- Custom grouping rules (e.g. all FULL_TABLE replication Streams under 10k rows in one pipeline)\n\nInitially I would expect to have to run a `melatno optimise extractor <extractor-name>` command. In future, it would be amazing to delegate optimisation to Meltano in some sort of 'auto-pilot' mode, where optimisation happens unsupervised as run history is accumulated and in response to up-stream changes (changes in data volumes, velocities and as new tables are added).",
      "state": "closed",
      "created_at": "2021-04-26T19:13:52.002Z",
      "updated_at": "2022-05-30T07:12:39.991Z",
      "closed_at": "2022-05-30T07:12:39.972Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Performance",
        "flow::Triage",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 8,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2727",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2727",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2727/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2727/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2727",
        "relative": "#2727",
        "full": "meltano/meltano#2727"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 971373,
      "relative_position": -8208
    },
    {
      "id": 85275614,
      "iid": 2710,
      "project_id": 7603319,
      "title": "Add 'write-back' capability to tap and target settings",
      "description": "Some tap and target implementations ([we think?](https://gitlab.com/meltano/meltano/-/issues/2710#note_659612129)) use a writeback method to store settings (such as auth tokens) back in the `config.json` file for future use. Because Meltano dynamically generates the `config.json` equivalents at runtime, there's currently no way for a tap developer to write back settings for use in future invocations.\n\nRelated SDK issue: https://gitlab.com/meltano/singer-sdk/-/issues/106\n\n\n## Wanted:\n\nFor this issue, we are currently gaging feedback and asking for developers and users to provide use cases if this is a blocker for them. If this affects you, please post to the comments.",
      "state": "closed",
      "created_at": "2021-04-15T21:04:53.381Z",
      "updated_at": "2022-05-30T07:10:33.837Z",
      "closed_at": "2022-05-30T07:10:33.821Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "Load",
        "Office Hours::Discussed",
        "Orchestrate",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 10,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2710",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2710",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2710/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2710/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2710",
        "relative": "#2710",
        "full": "meltano/meltano#2710"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1001688,
      "relative_position": -9234
    },
    {
      "id": 78456143,
      "iid": 2556,
      "project_id": 7603319,
      "title": "Don't select streams and fields with `selected-by-default: false` metadata by default",
      "description": "The default value of an extractor's [`select` extra](https://meltano.com/docs/plugins.html#select-extra) is currently `['*.*']`, which means \"select all streams and all fields\", even though some streams and fields may have the [`selected-by-default` metadata](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#metadata) (\"Indicates if a node in the schema should be replicated if a user has not expressed any opinion on whether or not to replicate it.\") set to `false` and should therefore _not_ be selected by default, when the user hasn't explicitly overridden the selection rules.\n\nMeltano can't currently distinguish between the default `*.*` value, and a user-provided `*.*` value coming from `meltano.yml`, so in both cases it'll just select all streams that show up in the catalog as `inclusion: available`. To support `selected-by-default` properly, Meltano would need to have an alternative to `*` that doesn't mean \"all available\", but \"all selected-by-default\".\n\nExisting users who did not override the selection rules and rely on the default would be surprised if the meaning of \"default\" suddenly changes from \"all available\" to \"all selected-by-default\" though.\n\nIf we change the default, we will need to clearly document this and guide users through updating their selection rules.",
      "state": "closed",
      "created_at": "2021-02-04T21:12:53.320Z",
      "updated_at": "2022-05-30T06:51:52.406Z",
      "closed_at": "2022-05-30T06:51:52.387Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Extract",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 87854,
        "username": "DouweM",
        "public_email": "",
        "name": "Douwe Maan",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bbb752c75ae2744bddf1640d75edf9b6f7d4e5f4fbba4a4f0910961e6f0519b9?s=80&d=identicon",
        "web_url": "https://gitlab.com/DouweM"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2556",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2556",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2556/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2556/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2556",
        "relative": "#2556",
        "full": "meltano/meltano#2556"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1028001,
      "relative_position": -9747
    },
    {
      "id": 74938674,
      "iid": 2459,
      "project_id": 7603319,
      "title": "Publish Meltano core as an importable Python library",
      "description": "### Problem to solve\nThe functionality of Meltano in being able to wire together Singer taps and targets, track their state, and expose metrics about their execution is highly valuable. There are use cases where it would be helpful to be able to leverage those capabilities without also depending on the orchestration and UI functionality that is present in the Meltano project as it currently exists. As the core functionality is already encapsulated in its own module within the project it is worth exploring what is involved in extracting and publishing that portion of Meltano as a standalone library.\n\nMy initial use case is for being able to wrap Meltano's capabilities in a plugin for the Dagster data orchestration framework, though I'm sure there are many other elements of the broader data management ecosystem which could benefit.\n\n### Target audience\nData engineers and builders of other data ecosystem tooling.\n\n### Further details\nMy immediate goal is to be able to build a Dagster plugin that allows for executing extract and load workflows as part of a broader pipeline definition. The broader goal is to allow other tools to be able to easily add robust extract and load functionality without having to reinvent the wheel.\n\n### Proposal\nThere are a couple of ways that we can attack this.\n\nOne option is to extract the core as a separate project and then add it as a dependency to this Meltano project. That enforces clean interface definitions between the two projects and separates contributions between the core library and the UI/UX elements of the project.\n\nAnother option is to use something like the Pants build tool to treat this repository as a monorepo with multiple package builds. This eliminates the step of extracting the code to a separate repository and adding additional steps to the development workflow. It also ensures that new functionality can be added and tested across the core/UI/API/CLI boundaries with atomicity.\n\n### What does success look like, and how can we measure that?\nSuccess would be measured by the ability for other projects to leverage the robust integration, execution, and state tracking of Meltano EL pipelines without having to adopt the UI/CLI interfaces and the additional dependencies that they require.\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_",
      "state": "closed",
      "created_at": "2020-11-24T22:01:14.396Z",
      "updated_at": "2022-05-30T06:39:59.356Z",
      "closed_at": "2022-05-30T06:39:59.336Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Architecture Decision",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 199793,
        "username": "blarghmatey",
        "public_email": "tmacey@boundlessnotions.com",
        "name": "Tobias Macey",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/066db7898caa8153700ca3fbf1fa1367f2328038b8c40cdab4a40bcf495d2243?s=80&d=identicon",
        "web_url": "https://gitlab.com/blarghmatey"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 4,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2459",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2459",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2459/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2459/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2459",
        "relative": "#2459",
        "full": "meltano/meltano#2459"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 938965,
      "relative_position": -7695
    },
    {
      "id": 19849135,
      "iid": 565,
      "project_id": 7603319,
      "title": "explore \"projects\" conceptual architecture (repos vs. subdirectories)",
      "description": "Following up on conversation in CEO Sync 2019-04-08 conversation, there are some concerns that we might be making it more challenging for users to leverage Meltano with the current multi-project architecture\n\nmeltano ui scoping -- where should this be running from?\nright now it is detecting all the .meltano.yml files from wherever it is run\nis there a risk that we are taking too much control of the computer\nwhy is this scary?\nyou can still run meltano ui from the project level\nthe user might not be able to understand this -- why doesn't this work in a sub-directory\nConcern about multiple repos versus branches\n\n* [ ] Should we: update installation instructions to recommend the user create a \"meltano\" directory to organize their projects\n* [ ] When you call `meltano init`, should we initialize it as a git repo?",
      "state": "closed",
      "created_at": "2019-04-08T15:52:56.833Z",
      "updated_at": "2021-09-03T18:21:23.282Z",
      "closed_at": "2021-09-03T18:21:23.268Z",
      "closed_by": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "labels": [
        "Architecture Decision",
        "flow::To Do"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 3601799,
        "username": "dmor",
        "public_email": "",
        "name": "Danielle Morrill",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/3601799/avatar.png",
        "web_url": "https://gitlab.com/dmor"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/565",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/565",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/565/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/565/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#565",
        "relative": "#565",
        "full": "meltano/meltano#565"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 117,
      "epic": {
        "id": 331278,
        "iid": 117,
        "title": "Pillar 2: Make Meltano the best Data Integration (ELT) tool on the market",
        "url": "/groups/meltano/-/epics/117",
        "group_id": 2524164,
        "human_readable_timestamp": "<strong>1482</strong> days elapsed"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 17204,
      "relative_position": -2565
    }
  ]
}
