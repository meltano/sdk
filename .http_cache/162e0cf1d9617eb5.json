{
  "cookies": {
    "_cfuvid": ".QX5uMPhE6DcgOUOje7RPpvinWD11MH5NTTXxYX3bqA-1747940867738-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:47.638899+00:00",
  "elapsed": 3.252796,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e9923df041f76-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:47 GMT",
    "ETag": "W/\"d9db8cc1767765439e6991df49f76f1d\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/92/issues?epic_iid=92&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/92/issues?epic_iid=92&id=2524164&page=1&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=.QX5uMPhE6DcgOUOje7RPpvinWD11MH5NTTXxYX3bqA-1747940867738-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-37-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-b",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"40ca2ac2646b4412399fa24e428c86fa\",\"version\":\"1\"}",
    "x-next-page": "",
    "x-page": "1",
    "x-per-page": "20",
    "x-prev-page": "",
    "x-request-id": "40ca2ac2646b4412399fa24e428c86fa",
    "x-runtime": "2.001691",
    "x-total": "3",
    "x-total-pages": "1"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/92/issues"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/92/issues",
  "_decoded_content": [
    {
      "id": 107041742,
      "iid": 245,
      "project_id": 25921808,
      "title": "Gitpod-like plugin for Meltano users",
      "description": "After we add support for Utility plugins (https://gitlab.com/meltano/hub/-/issues/202), it would be interesting to explore something like https://www.gitpod.io/ as a Meltano Plugin.\n\nOne challenge we face when running Meltano remotely in a containerized production or test environment is that we can't easily modify code and commit it back to the repo. And for this reason `meltano ui` actually runs in read-only mode within containers.\n\nTo solve for the use case of wanting to remotely modify the project and still participate in the CI/CD flow, what about a Gitpod-esque service \"plugin\" which could host an interface similar to Gitlab's \"Visual IDE\" and GitHub's `GitHub.dev` online IDE?\n\ncc @pandemicsyn, @tayloramurphy\n\nUser Stories this would address:\n\n- Ability to edit the project in the cloud.\n- If running on the same container as `Meltano UI`, allow user an interface to view edits made in the Web UI: reviewing, tweaking, commit, and push the result back to the repo.\n- Allow a means of creating branches, switching branches, and pushing updates back to the main repo.\n\nIf a viable open source option is available as a service plugin, and especially if this could be combined with a `meltano ui` interface running on the same container, this opens up a bunch of use cases that just aren't possible today.",
      "state": "closed",
      "created_at": "2022-04-22T16:33:31.189Z",
      "updated_at": "2022-05-29T21:32:53.141Z",
      "closed_at": "2022-05-29T21:32:53.123Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 11,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/hub/-/issues/245",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/25921808/issues/245",
        "notes": "https://gitlab.com/api/v4/projects/25921808/issues/245/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/25921808/issues/245/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/25921808",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#245",
        "relative": "#245",
        "full": "meltano/hub#245"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 92,
      "epic": {
        "id": 235155,
        "iid": 92,
        "title": "Git Provider Integrations",
        "url": "/groups/meltano/-/epics/92",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1315092,
      "relative_position": -1026
    },
    {
      "id": 97653775,
      "iid": 3074,
      "project_id": 7603319,
      "title": "Provide an artifact in Git for exclude/include snapshots",
      "description": "Would be great if Meltano could generate a git diff-able artifact that cataloged the included/excluded streams and properties for a given project. This could be analogous to `meltano select ... --list --all` output but perhaps with `--format=yaml` or `--outfile=/<project_dir>/extractors/<tapname>.yml` to support machine readability.\n\nThis came up in a Slack conversation here: https://meltano.slack.com/archives/CFG3C3D1Q/p1637360361066900?thread_ts=1637113317.057200&cid=CFG3C3D1Q\n\nI proposed in this thread that the output of `meltano select ... --list --all > outfile.txt` could be used as a git artifact, and I opened this issue to explore this idea in more detail and hopefully identify some best practices.\n\nProviding some method to store this metadata would help teams better understand the data they are generating and/or capturing, and would give security and compliance teams an artifact for review and discussion with the business stakeholders.\n\nAnother use would be to detect and document upstream schema drift over time.\n\ncc @tayloramurphy, @afolson, @DouweM, @kgpayne, @edgarrmondragon",
      "state": "closed",
      "created_at": "2021-11-19T22:27:07.081Z",
      "updated_at": "2022-05-30T09:56:37.699Z",
      "closed_at": "2022-05-30T09:56:37.678Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3074",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3074",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3074/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3074/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3074",
        "relative": "#3074",
        "full": "meltano/meltano#3074"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 92,
      "epic": {
        "id": 235155,
        "iid": 92,
        "title": "Git Provider Integrations",
        "url": "/groups/meltano/-/epics/92",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 951645,
      "relative_position": -513
    },
    {
      "id": 81956864,
      "iid": 2685,
      "project_id": 7603319,
      "title": "Make project management in Meltano \"git aware\"",
      "description": "Documenting here some ideas as discussed in Meltano-for-Meltano deployment discussion between @aaronsteers and @tayloramurphy.\n\n------\n\n\nEspecially when inside a container, it could be extremely helpful if meltano were made git aware. Without this awareness, the Meltano deployment story is extremely difficult for a typical data developer to implement.\n\nA three phase approach to this:\n1. The docker container has a bootloader script that pulls the project from Git as a first step.\n2. Meltano natively is able to push and pull prior to certain commands.\n3. The Meltano UI is able to push and pull to git, and will prompt you if you have \"uncommitted changes\".\n\n## Simplify the git workflow for Data Professionals out of the box\n\n- When launching the `meltano/meltano` docker image, the image will detect the repo URL, credentials, and default branch. Assuming no other project as been mapped, it will download the project repo at launch time.\n    - When needed, `meltano install` will also be run automatically after the project is cloned.\n- Unless otherwise specified, we can assume 2 branches on every project repo: `main` (or `master`) and `development`. Projects start on the `development` branch by default, creating it from `main` if it does not yet exist.\n    - Optionally, a user name or environment name can be appended in the branch name: `development/aj` or `development/web-ui`.\n- Meltano will default to \"auto-commit mode\" for users not familiar with git, or for environments where we do not have direct interactivity with the developer. Within this mode of operation:\n    - Commits and pushes are triggered automatically against the development branch if files are changed by a `meltano` CLI command.\n    - Pulls are triggered automatically before running `meltano elt` and before modifications to the project.\n    - The repo is automatically in \"read only mode\" whenever on `main`. In this mode, `meltano` CLI commands will fail (or prompt for a branch change) if they would modify `meltano.yml`.\n\n## Support for advanced scenarios as teams and requirements evolve\n\nThe above would be a default experience for new teams. For advanced teams and for highly tuned environments:\n\n- Auto-commit mode can be disabled.\n- The list of protected / read-only branches can be expanded beyond just `main`.\n- Specific branches can be checked out.\n- The native `git` executable still works within the repo as usual, since git operations performed by `meltano` also are using the same standard `git` operations.\n- Each container can have customized environment variables specifying which set of branches it expects to be run against, or any other constraints such as forcing read-only mode.\n\n\nIn these examples, `meltano project` is similar in behavior to comparable `git` commands, except that additional behaviors and constraints are applied as make sense for meltano projects specifically.\n\n```bash\nmeltano project pull     # Pulls from the repo. URL and creds are in env vars or meltano.yml\nmeltano project commit   # Check branch rules; commit and push if safe, otherwise throw error.\n                        # A default commit message will be provided if none given.\nmeltano project checkout <BRANCH> # Switches between branches\n```\n\n## A sample Deployment Story\n\nA possible kubernetes workflow would then be:\n\n**Project initialization:**\n\n1. Developer creates copies from our new project template, or pushes the output of meltano init.\n1. Developer creates and auth token in Gitlab/Github if they don't have one already.\n1. Developer maps their project git URL and auth token into environment variables for docker-compose, kubernetes, or similar.\n\n**Project deployment:**\n\n1. Containers starts up.\n2. Some command is passed to the container `meltano install/init/elt`.\n3. Meltano detects from env vars the git settings.\n4. Meltano pulls the latest.\n5. The original command is run (probably either `meltano ui` or `meltano elt`).\n6. Whenever `meltano.yml` or other files are changed, meltano attempts to commit and push back.\n\n## Streamlined deployment story:\n\n- With proper env var config, the stock `meltano/meltano` docker image can be run directly from ECS, Kubernetes, or docker-compose, and only requires env vars for git project initialization.\n- The project running in the container does not need to be set in read-only mode, but instead can default to auto-commit mode (unless or until the user sets it otherwise).\n- After finding the repo from git, the image can also auto-install all the components it needs.\n- As needed to decrease initialization and install time, eventually we still expect users to create their own Dockerfiles.\n\n\n## Web UI opportunity down the road:\n\n- If `meltano ui` is executed without a defined project, the Web UI could wait at a project initialization screen, asking a user to input project details and then initialize from user input.",
      "state": "closed",
      "created_at": "2021-03-30T20:07:07.689Z",
      "updated_at": "2022-05-30T07:07:34.026Z",
      "closed_at": "2022-05-30T07:07:34.005Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Docker",
        "Exploration",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 10,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/2685",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/2685",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/2685/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/2685/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#2685",
        "relative": "#2685",
        "full": "meltano/meltano#2685"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 92,
      "epic": {
        "id": 235155,
        "iid": 92,
        "title": "Git Provider Integrations",
        "url": "/groups/meltano/-/epics/92",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 518626,
      "relative_position": 0
    }
  ]
}
