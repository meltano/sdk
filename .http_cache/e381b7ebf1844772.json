{
  "cookies": {
    "_cfuvid": "VDi8XUy2ttfMgjHpHs33_arb7WnCTy.z2_.IcHggKbM-1747940888716-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:08:08.640154+00:00",
  "elapsed": 0.495096,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e99b83d855cc2-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:08:08 GMT",
    "ETag": "W/\"1299c7079fb95d53bc958ead7826af71\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/140/issues?epic_iid=140&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/140/issues?epic_iid=140&id=2524164&page=1&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=VDi8XUy2ttfMgjHpHs33_arb7WnCTy.z2_.IcHggKbM-1747940888716-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-01-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-b",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"01d95daecd55ea7f95beeebf510c806d\",\"version\":\"1\"}",
    "x-next-page": "",
    "x-page": "1",
    "x-per-page": "20",
    "x-prev-page": "",
    "x-request-id": "01d95daecd55ea7f95beeebf510c806d",
    "x-runtime": "0.202128",
    "x-total": "8",
    "x-total-pages": "1"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/140/issues"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/140/issues",
  "_decoded_content": [
    {
      "id": 109120009,
      "iid": 3528,
      "project_id": 7603319,
      "title": "Mapper plugin install's via `meltano install` are skipped when mapping's are present",
      "description": "Reported via slack: https://meltano.slack.com/archives/C013EKWA2Q1/p1653466616087819\n\nUser reported and @edgarrmondragon confirmed that mappers are being skipped and are not installed. We're supposed to install the actual mapper plugin but skip installing the mappings, and it appears that at the moment we're skipping both:\n\n```\n# with mapping\nmeltano@latest install\n2022-05-25T16:03:07.689809Z [info     ] Environment 'dev' is active\nInstalling 7 plugins...\nSkipped installing mapper 'meltano-map-transformer'...\nInstalling mapper 'meltano-map-transformer'...\nSkipped installing mapper 'meltano-map-transformer'...\nInstalling utility 'sqlfluff'...\nInstalling transformer 'dbt-bigquery'...\nInstalling loader 'target-sqlite'...\nInstalling loader 'target-bigquery'...\nInstalling extractor 'tap-pocket'...\nInstalled transformer 'dbt-bigquery'\nInstalled utility 'sqlfluff'\nInstalled loader 'target-sqlite'\nInstalled loader 'target-bigquery'\nInstalled extractor 'tap-pocket'\nInstalled 5/7 plugins\nSkipped installing 2/7 plugins\n\n# without mappings\nmeltano@latest install\n2022-05-25T16:05:41.783121Z [info     ] Environment 'dev' is active\nInstalling 6 plugins...\nInstalling mapper 'meltano-map-transformer'...\nInstalling utility 'sqlfluff'...\nInstalling transformer 'dbt-bigquery'...\nInstalling loader 'target-sqlite'...\nInstalling loader 'target-bigquery'...\nInstalling extractor 'tap-pocket'...\nInstalled transformer 'dbt-bigquery'\nInstalled utility 'sqlfluff'\nInstalled loader 'target-sqlite'\nInstalled loader 'target-bigquery'\nInstalled mapper 'meltano-map-transformer'\nInstalled extractor 'tap-pocket'\nInstalled 6/6 plugins\n```\n\nSince we dedupe plugin install's now we could potentially ditch the \"skipping\" logic completely.",
      "state": "closed",
      "created_at": "2022-05-25T17:28:18.803Z",
      "updated_at": "2022-05-30T13:41:44.748Z",
      "closed_at": "2022-05-30T13:41:44.726Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3528",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3528",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3528/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3528/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3528",
        "relative": "#3528",
        "full": "meltano/meltano#3528"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 140,
      "epic": {
        "id": 455594,
        "iid": 140,
        "title": "Stream Maps Refinement and Enhancement",
        "url": "/groups/meltano/-/epics/140",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1390719,
      "relative_position": -17955
    },
    {
      "id": 105911806,
      "iid": 3369,
      "project_id": 7603319,
      "title": "Enable meltano run to write-out to a file",
      "description": "@vischous indicated in https://gitlab.com/meltano/meltano/-/issues/3362+ that \n\n`meltano run tap-activedirectory adhex-2-uuid > out` \n\ndoesn't work as expected.",
      "state": "closed",
      "created_at": "2022-04-01T20:50:02.690Z",
      "updated_at": "2022-05-30T13:24:51.389Z",
      "closed_at": "2022-05-30T13:24:51.368Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 10,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3369",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3369",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3369/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3369/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3369",
        "relative": "#3369",
        "full": "meltano/meltano#3369"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 140,
      "epic": {
        "id": 455594,
        "iid": 140,
        "title": "Stream Maps Refinement and Enhancement",
        "url": "/groups/meltano/-/epics/140",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1242918,
      "relative_position": -17442
    },
    {
      "id": 105785282,
      "iid": 3362,
      "project_id": 7603319,
      "title": "Debugging mappers",
      "description": "Problem is I'm running a mapper `meltano run tap-activedirectory adhex-2-uuid target-postgres` everything runs successfully, but the data doesn't map the way I want it to in target-postgres.\n\nThings I'd like to be able to do:\n1. Run `meltano run tap-activedirectory adhex-2-uuid > out` , but this doesn't work for me \n1. Run `cat out | meltano invoke adhex-2-uuid` but this doesn't work as the plugin isn't detected \n1. Output config data used by `adhex-2-uuid`\n\nmeltano.yml excerpt \n```yml\n  mappers:\n  - name: meltano-map-transformer\n    variant: meltano\n    pip_url: git+ssh://git@gitlab.com/autoidm/transform-activedirectory.git\n    executable: meltano-map-transform\n    mappings:\n    - name: adhex-2-uuid\n      config:\n        stream_maps:\n          \"space\": {\n            \"guid\": \"uuid(objectguid)\"\n          }\n```\n\n\nMaybe there's better ways to debug this that I don't know about?",
      "state": "closed",
      "created_at": "2022-03-30T21:43:48.774Z",
      "updated_at": "2022-04-01T20:50:03.104Z",
      "closed_at": "2022-04-01T19:43:18.391Z",
      "closed_by": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "labels": [
        "User Support",
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351598,
        "iid": 208,
        "group_id": 2524164,
        "title": "April 2022",
        "description": "",
        "state": "closed",
        "created_at": "2021-11-29T21:38:06.797Z",
        "updated_at": "2022-05-02T14:53:27.097Z",
        "due_date": "2022-04-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/208"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3362",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3362",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3362/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3362/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3362",
        "relative": "#3362",
        "full": "meltano/meltano#3362"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 140,
      "epic": {
        "id": 455594,
        "iid": 140,
        "title": "Stream Maps Refinement and Enhancement",
        "url": "/groups/meltano/-/epics/140",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1242489,
      "relative_position": -16416
    },
    {
      "id": 105710071,
      "iid": 3357,
      "project_id": 7603319,
      "title": "Mappers with custom names",
      "description": "I know this usage isn't documented here https://docs.meltano.com/concepts/plugins#mappers , but based on my use of Meltano thus far having different names for Extractors and Loaders hasn't been any consequence in the past.  `transform-activedirectory` is a fork of https://github.com/MeltanoLabs/meltano-map-transform , with the only difference being that I am pointing to a custom SDK implementation due to https://gitlab.com/meltano/sdk/-/issues/355. \n\nmeltano.yml\n```yaml\n  mappers:\n  - name: activedirectory-transformer\n    pip_url: git+ssh://git@gitlab.com/autoidm/transform-activedirectory.git\n    executable: meltano-map-transform\n    mappings:\n    - name: adhex-2-uuid\n      config:\n        stream_maps:\n          \"space\": {\n            \"guid\": \"uuid(objectguid)\"\n          }\n```\n\n\n\n\n\nMapper 'mapper-activedirectory' is not known to Meltano\n\nCustom mapper doesn't work\nLogs\n```\nPS C:\\code\\bamboohr2ad> meltano --log-level=debug install\n2022-03-29T19:18:14.047257Z [debug    ] Creating engine <meltano.core.project.Project object at 0x000000B6955FABB0>@sqlite:///C:\\code\\bamboohr2ad/.meltano/meltano.db\n2022-03-29T19:18:14.328268Z [debug    ] Starting new HTTPS connection (1): discovery.meltano.com:443\n2022-03-29T19:18:14.429270Z [debug    ] https://discovery.meltano.com:443 \"GET /discovery.yml?project_id=b48f8a89-62e6-44b3-aaf5-5aafc1a0f0be HTTP/1.1\" 200 22844\n2022-03-29T19:18:14.500270Z [debug    ] Encoding detection: ascii is most likely the one.\n2022-03-29T19:18:15.927249Z [debug    ] Mapper 'mapper-activedirectory' is not known to Meltano\nTraceback (most recent call last):\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\utils\\__init__.py\", line 300, in find_named\n    return next(x for x in xs if x[\"name\"] == name)\nStopIteration\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\plugin_discovery_service.py\", line 247, in find_definition\n    return find_named(self.get_plugins_of_type(plugin_type), plugin_name)\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\utils\\__init__.py\", line 302, in find_named\n    raise NotFound(name, obj_type) from stop\nmeltano.core.utils.NotFound: mapper-activedirectory was not found.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\cli\\__init__.py\", line 47, in main\n    cli(obj={\"project\": None})\n  File \"C:\\Python39\\lib\\site-packages\\click\\core.py\", line 829, in __call__\n    return self.main(*args, **kwargs)\n  File \"C:\\Python39\\lib\\site-packages\\click\\core.py\", line 782, in main\n    rv = self.invoke(ctx)\n  File \"C:\\Python39\\lib\\site-packages\\click\\core.py\", line 1259, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"C:\\Python39\\lib\\site-packages\\click\\core.py\", line 1066, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"C:\\Python39\\lib\\site-packages\\click\\core.py\", line 610, in invoke\n    return callback(*args, **kwargs)\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\cli\\params.py\", line 23, in decorate\n    return func(*args, **kwargs)\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\cli\\params.py\", line 56, in decorate\n    func(project, *args, **kwargs)\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\cli\\install.py\", line 45, in install\n    plugins = list(plugins_service.plugins())\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\project_plugins_service.py\", line 285, in plugins\n    for _, plugins in self.plugins_by_type(ensure_parent=ensure_parent).items()\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\project_plugins_service.py\", line 267, in plugins_by_type\n    return {\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\project_plugins_service.py\", line 268, in <dictcomp>\n    plugin_type: self.get_plugins_of_type(\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\project_plugins_service.py\", line 254, in get_plugins_of_type\n    self.ensure_parent(plugin)\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\project_plugins_service.py\", line 377, in ensure_parent\n    plugin.parent = self.get_parent(plugin)\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\project_plugins_service.py\", line 360, in get_parent\n    return self.discovery_service.get_base_plugin(plugin)\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\plugin_discovery_service.py\", line 270, in get_base_plugin\n    plugin = project_plugin.custom_definition or self.find_definition(\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\core\\plugin_discovery_service.py\", line 249, in find_definition\n    raise PluginNotFoundError(PluginRef(plugin_type, plugin_name)) from err\nmeltano.core.plugin.error.PluginNotFoundError: Mapper 'mapper-activedirectory' is not known to Meltano\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"C:\\Python39\\lib\\site-packages\\meltano\\cli\\__init__.py\", line 55, in main\n    raise CliError(str(err)) from err\nmeltano.cli.utils.CliError: Mapper 'mapper-activedirectory' is not known to Meltano\nMapper 'mapper-activedirectory' is not known to Meltano\n\nThe above exception was the direct cause of the following exception:\n```\n\n\nTo make this work I had to do this\n\n```yaml\n  mappers:\n  - name: meltano-map-transformer\n    variant: meltano\n    pip_url: git+ssh://git@gitlab.com/autoidm/transform-activedirectory.git\n    executable: meltano-map-transform\n    mappings:\n    - name: adhex-2-uuid\n      config:\n        stream_maps:\n          \"space\": {\n            \"guid\": \"uuid(objectguid)\"\n          }\n```\n\nWhich is fairly hacky :shrug:",
      "state": "closed",
      "created_at": "2022-03-29T20:37:38.107Z",
      "updated_at": "2022-04-05T13:58:26.211Z",
      "closed_at": "2022-04-05T12:38:52.955Z",
      "closed_by": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "labels": [
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351598,
        "iid": 208,
        "group_id": 2524164,
        "title": "April 2022",
        "description": "",
        "state": "closed",
        "created_at": "2021-11-29T21:38:06.797Z",
        "updated_at": "2022-05-02T14:53:27.097Z",
        "due_date": "2022-04-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/208"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 9,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3357",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 2,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3357",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3357/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3357/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3357",
        "relative": "#3357",
        "full": "meltano/meltano#3357"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 140,
      "epic": {
        "id": 455594,
        "iid": 140,
        "title": "Stream Maps Refinement and Enhancement",
        "url": "/groups/meltano/-/epics/140",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1242490,
      "relative_position": -16929
    },
    {
      "id": 104060443,
      "iid": 3310,
      "project_id": 7603319,
      "title": "Meltano Mappers and Mappings Discussion Issue",
      "description": "After a deep discussion with @aaronsteers and @pandemicsyn we've landed on several decisions. \n\n### User Experience\n\nStarting from the user experience. We want to support users invoking mappers as they would a normal plugin. This means:\n\n`meltano invoke <mapper>` should work and accept data from the STDIN and push data to STDOUT\n\n`meltano run tap-gitlab <mapper> target-snowflake` - this is invoking the plugin in between the tap and target. \n\nThis is different than what is currently implemented - right now you reference a particular mapping name and not the mapper itself. \n\nWe also aim to support locally-scoped mappings for extractors and loaders. These would not be able to be referenced via `meltano run` directly - only via the extractor. \n\n### YAML Spec for Inheritance-based Mappings\n\nWhere we want to end up for the `mappers` spec\n\n```yaml\n# meltano.yml\nmappers:\n- name: transform-field\n  namespace: pipelinewise_transform_field\n  pip_url: pipelinewise-transform-field\n  executable: transform-field    \n- name: hide-gitlab-secrets\n  inherit_from: transform-field\n  config:\n    transformations:\n      - field_id: \"author_email\"\n        tap_stream_name: \"commits\"\n        type: \"MASK-HIDDEN\"\n      - field_id: \"committer_email\"\n        tap_stream_name: \"commits\"\n        type: \"MASK-HIDDEN\"\n- name: null-created-at\n  inherit_from: transform-field\n  config:\n    transformations:\n      - field_id: \"created_at\"\n        tap_stream_name: \"accounts\"\n        type: \"SET-NULL\"\n```\n\nA user could run `meltano invoke hide-gitlab-secrets` and the appropriate config would be passed to the mapper. A user could also do `meltano invoke tap-gitlab | meltano invoke hide-gitlab-secrets` and that should work.\n\n\n### Local Scoping\n\nTo implement locally scoped mappers users would have two options. If the tap is based on the SDK and supports the `stream-maps` capability, users would have to set the configuration in the normal `config` key. _Users can do this today already with SDK-based taps and targets_.\n\n```yaml\n- name: tap-github\n  capabilities:\n    - stream-maps\n  config:\n    stream_maps:\n        - field_id: \"created_at\"\n          tap_stream_name: \"accounts\"\n          type: \"SET-NULL\"  \n```\n\nThis would not be referencable on the command line and would assumed to be \"always on\".\n\nFor connectors that do not support the `stream-maps` capability, we would (re-)introduce the `mappings` key as a plugin extra for extractors and loaders. \n\nProposed spec\n\n```yaml\nextractors:\n- name: tap-gitlab\n  mappings:\n    - name: gitlab-null       # locally unique name of the mapping\n      active: false           # new boolean key for whether a mapping is active or not\n      mapper: null-created-at # the mapper plugin to use\n      config:                 # The config that is passed to the mapper\n        transformations:\n          - field_id: \"created_at\"\n            tap_stream_name: \"accounts\"\n            type: \"SET-NULL\"\n\n\n```\n\nThere is an open question on how we would want to merge the config from this. Our options are to keep the default (which we believe is 1 level deep), replace the `config` block entirely, or do a deep merge. The challenge with the 1 level deep merge is that in the above example, the entire `transformations` value would be overwritten. \n\n\nBehind the scenes, when a `mapper` is referenced, the data from the tap is sent to the mapper before being sent to any other target. \n\nQuestion: Is there a limit to the number of mappings and/or mappers when they are locally scoped?\n\nKey points when referencing a mapper:\n\n* Users could not reference a mapping defined at the extractor or loader level either in the meltano invoke or the meltano run commands. We could separately discuss if we want to overload the colon syntax to invoke a specific mapper via `meltano invoke <tap>:<mapping_name>`\n* the `mappings` key is incompatible with the `stream-maps` capability, at least for this proposed implementation (this makes sense as `stream-maps` is a capability _of the tap_ while mappings are config for a separate mapper plugin)\n\n\n### How does this work with environments?\n\nA key behavior we would want to support is turning mappings on and off depending on the environment. This is accomplished via the `active` key. Environments would be used to override that configuration. Users would not be able to activate a mapper from the command line in `meltano run` (except via the environment).\n\n```yaml\nenvironments:\n  - name: prod\n    config:\n      plugins:\n        extractors:\n        - name: tap-gitlab\n          mappings:\n            - name: gitlab-null\n              active: true\n            - name: sw-region-only\n              config:\n                transformations: ...          \n        mappers:\n        - name: null-created-at\n          config:\n            transformations:\n              ...\n```\n\nOverwriting the `active` key is new behavior as currently it's only scoped to `config`.\n\nThere's also the consideration of priority order. \n\nIf a user overrides configuration of a mapper at the environment level, that would take precedence when the mapper is invoked either via run or invoke (this is expected and standard with environments).\n\nIf a user overrides configuration of a mapper that is also referenced as a mapping for an extractor, we would expect no configuration changes to affect the extractor. Said another way, the configuration of a plugin in an environment should not affect the configuration of another plugin in the same environment. \nSaid a third time - the locally scoped mapping configuration for an extractor should be determined based on the configuration outside the context of the environment before applying the environment configuration. \n\nThis should avoid the situation of updating global configuration for a plugin in two places (mapper vs extractor).\n\n\n```yaml\n# meltano.yml\nmappers:\n- name: transform-field\n  namespace: pipelinewise_transform_field\n  pip_url: pipelinewise-transform-field\n  executable: transform-field    \n- name: hide-gitlab-secrets\n  inherit_from: transform-field\n  config:\n    transformations:\n      - field_id: \"author_email\"\n        tap_stream_name: \"commits\"\n        type: \"MASK-HIDDEN\"\nextractors:\n- name: tap-gitlab\n  mappings:\n    - name: gitlab-secrets       # locally unique name of the mapping\n      active: false           # new boolean key for whether a mapping is active or not\n      mapper: hide-gitlab-secrets # the mapper plugin to use\n      config:                 # The config that is passed to the mapper\n        transformations:\n          - field_id: \"created_at\"\n            tap_stream_name: \"accounts\"\n            type: \"SET-NULL\"\n\nenvironments:\n  - name: prod\n    config:\n      plugins:\n        extractors:\n        - name: tap-gitlab\n          mappings:\n            - name: gitlab-secrets\n              active: true\n        mappers:\n        - name: hide-gitlab-secrets\n          config:\n            transformations:\n              - field_id: \"committer_email\"\n                tap_stream_name: \"commits\"\n                type: \"MASK-HIDDEN\"\n```\n\nWith the above `meltano.yml` if we do `meltano --environment=prod run tap-gitlab target-snowflake` The expected config is based on the `gitlab-secrets` mapping coming from the environment. The `hide-gitlab-secrets` config defined in the environment would _only_ apply if the the user did `meltano --environment=prod run tap-gitlab hide-gitlab-secrets target-snowflake` or they did `meltano --environment=prod invoke hide-gitlab-secrets`.\n\n\n### Summarize Remaining Questions:\n\n1. How deep do we want to merge configuration? As a first pass I'm ok with keeping the current default behavior and having a separate discussion to adjust it.\n\n1. Is there a limit to the number of mappings a user can have when they're locally scoped?\n\n1. Is the environment behavior agreed upon and expected?\n\n1. Do we want to overload the colon so that specific mappings could be referencing only within `meltano invoke <tap>:<mapping_name>`?",
      "state": "closed",
      "created_at": "2022-03-03T19:04:19.343Z",
      "updated_at": "2022-05-30T10:25:27.908Z",
      "closed_at": "2022-05-30T10:25:27.891Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "Needs Refinement",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351599,
        "iid": 209,
        "group_id": 2524164,
        "title": "May 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:38:23.665Z",
        "updated_at": "2021-11-29T21:38:23.665Z",
        "due_date": "2022-05-31",
        "start_date": "2022-05-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/209"
      },
      "assignees": [
        {
          "id": 1942272,
          "username": "tayloramurphy",
          "public_email": "",
          "name": "Taylor A Murphy",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
          "web_url": "https://gitlab.com/tayloramurphy"
        }
      ],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3310",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3310",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3310/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3310/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3310",
        "relative": "#3310",
        "full": "meltano/meltano#3310"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 140,
      "epic": {
        "id": 455594,
        "iid": 140,
        "title": "Stream Maps Refinement and Enhancement",
        "url": "/groups/meltano/-/epics/140",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1161716,
      "relative_position": -15903
    },
    {
      "id": 104053198,
      "iid": 3309,
      "project_id": 7603319,
      "title": "Ability to invoke mappings directly with `meltano invoke`",
      "description": "This is probably a low priority but wanted to log for visibility.\n\nWe could add support for invoking a mapping via the CLI:\n\nAssuming `remove-gitlab-pii` is defined globally as a mapping of the `meltano-map-transform` mapper.\n\n```console\nmeltano invoke remove-gitlab-pii\nOr:\nmeltano invoke meltano-map-transform:remove-gitlab-pii\n```\n\nPresumably this would only provide valuable input if provided with a piped input:\n\n```console\nmeltano invoke tap-gitlab | meltano invoke remove-gitlab-pii\n```\n\nIf it were defined under the extractor, in theory we could support a syntax like:\n\n```console\nmeltano invoke tap-gitlab | meltano invoke tap-gitlab:remove-gitlab-pii\n```\n\nNoted in #3362 we also want to support:\n\n```console\ncat out | meltano invoke remove-gitlab-pii\n```\n\nAnd also outputting the config data sent to the mapper.",
      "state": "closed",
      "created_at": "2022-03-03T17:20:56.147Z",
      "updated_at": "2022-05-30T10:25:20.472Z",
      "closed_at": "2022-05-30T10:25:20.448Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3309",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3309",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3309/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3309/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3309",
        "relative": "#3309",
        "full": "meltano/meltano#3309"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 140,
      "epic": {
        "id": 455594,
        "iid": 140,
        "title": "Stream Maps Refinement and Enhancement",
        "url": "/groups/meltano/-/epics/140",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1161713,
      "relative_position": -15133
    },
    {
      "id": 102891780,
      "iid": 3277,
      "project_id": 7603319,
      "title": "Allow mappings to be \"locally scoped\" to specific extractors and loaders",
      "description": "Currently all mappings are globally scoped. Meaning, if we want to define a `remove-pii` mapping for both `tap-shopify` and `tap-gitlab`, then we'll need to define them in a way to avoid name collision: probably `remove-shopify-pii` and `remove-gitlab-pii`. \n\n<details><summary>Click to expand example: defining mappers and mappings globally</summary>\n\n```yaml\n  mappers:\n  - name: transform-field\n    namespace: pipelinewise_transform_field\n    pip_url: pipelinewise-transform-field\n    executable: transform-field\n    mappings:\n    - name: hide-gitlab-secrets\n      config:\n        transformations:\n          - field_id: \"author_email\"\n            tap_stream_name: \"commits\"\n            type: \"MASK-HIDDEN\"\n          - field_id: \"committer_email\"\n            tap_stream_name: \"commits\"\n            type: \"MASK-HIDDEN\"\n    - name: fix-names\n      config:\n        transformations:\n          - field_id: \"given_name\"\n            tap_stream_name: \"users\"\n            type: \"lowercase\"\n```\n\n</details>\n\n- If a user creates a mapping called `remove-pii` but accidentally applies it to the wrong tap, then it likely will fail or (worse) not filter or change any records at all, causing incorrect/prohibited data to land in the target.\n- If the system detects two mappings are both called `remove-pii`, then the proper behavior is to fail before executing so that the user can resolve the naming conflict.\n\n## Context-aware application of the correct mapping\n\nOur initial long-term goal was to support locally-scoped mappings to that `remove-pii` could be declared locally as a mapping for `tap-shopify` and `tap-gitlab` (for instance), and each would be defined according to the needs of that extractor. \n\n## 'Optional' vs 'Always On' Mappings\n\nWith locally-scoped mappings, some mappings could be defined as 'always on' for a given extractor and others as 'optional', depending upon settings set within the mapping config.\n\nFor example, `remove-pii` could be 'Always on' and `ten-percent-sample` or `southwest-region-only` could be 'optional', and applied only when explicitly requested.\n\nSide note: As a best practice, it probably makes sense to tie mappings to specific environments, so that each environment _always_ uses the same mappings.\n\n## Avoiding accidental mismatch\n\nIn this case, if a third `tap-github` extractor is invoked with `remove-pii`, but there's no locally-defined definition, Meltano will know to abort and fail, rather than use a mapper scoped/configured for another extractor.\n\n## Sample definitions inline with the tap/target\n\nBecause locally-scoped mappings are specific to a single tap or target, their definition is most intuitively configured alongside the tap or target definition, as child to it. \n\nHence, our original spec from #2299:\n\n<details><summary>Click to expand sample code</summary>\n\n```yaml\nmappers:\n- name: meltano-map-transform\n  pip_url: meltano-map-transform\n- name: pipelinewise-transform-field\n  pip_url: pipelinewise-transform-field\n- name: no-activate-version.      # A fictional mapper that removes ACTIVATE_VERSION messages\n  pip_url: no-activate-version\nextractors:\n- name: tap-gitlab\n  # ...\n  mappings:\n  - name: pii-hasher               # The name of the map transform to apply.\n    mapper: meltano-map-transform  # The mapper plugin to use.\n    config:                        # What will be sent to the transformer in a config.json file.\n      stream_maps:\n        customers:\n          id_hashed: md5(record['id'])\n          id: None\nloaders:\n- name: target-salesforce\n  # ...\n  mappings:\n  - name: add-global-guid          # The name of the map transform to apply.\n    mapper: meltano-map-transform  # The mapper plugin to use.\n    config:                        # What will be sent to the transformer in a config.json file.\n      stream_maps:\n        customers:\n          guid: md5(record['id'])\n- name: target-csv\n  # ...\n  mappings:\n  - name: flatten-records          # The name of the map transform to apply.\n    mapper: meltano-map-transform  # The mapper plugin to use.\n    default: true                  # Transform prepended automatically if default=true.\n    config:                        # What will be sent to the transformer in a config.json file.\n      flatten_records: true\n  - name: compat-fix               # The name of the map transform to apply.\n    mapper: no-activate-version    # The mapper plugin to use.\n                                   # config is omitted if the generic config is sufficient\n```\n\n</details>\n\nIn this example, the `mappings` collection can exist under any tap or target, and each mapping has:\n\n1. `name` (what to call the mapping when invoked)\n2. `default` (true or false whether this is applied by default)\n2. `config` (whatever settings values are needed to configure the specific mapping)\n3. `mapper` (a pointer to the plugin name that drives the transformation)",
      "state": "closed",
      "created_at": "2022-02-22T22:53:13.078Z",
      "updated_at": "2022-05-30T10:21:33.551Z",
      "closed_at": "2022-05-30T10:21:33.532Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 10,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3277",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3277",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3277/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3277/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3277",
        "relative": "#3277",
        "full": "meltano/meltano#3277"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 140,
      "epic": {
        "id": 455594,
        "iid": 140,
        "title": "Stream Maps Refinement and Enhancement",
        "url": "/groups/meltano/-/epics/140",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1140984,
      "relative_position": -15390
    },
    {
      "id": 102891484,
      "iid": 3276,
      "project_id": 7603319,
      "title": "Consider global top-level mappings or mappers without nesting.",
      "description": "Raised as part of #3273, we're discussing if we should declare mappings as singletons, each defined as its own plugin with only one mapping definition. Currently mappings belong to a mapper plugin definition, and each mapper plugin can have any arbitrary number of named mappings.\n\nIf we move to top-level mapper/mappings, then we would use `inherit_from` to reduce redundancies such as pip_url, etc., rather than having all mappings being nested under the mapper, and only the mapper technically has a pip_url and other plugin-level attributes.",
      "state": "closed",
      "created_at": "2022-02-22T22:42:50.959Z",
      "updated_at": "2022-05-30T10:21:26.324Z",
      "closed_at": "2022-05-30T10:21:26.304Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 8,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3276",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3276",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3276/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3276/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3276",
        "relative": "#3276",
        "full": "meltano/meltano#3276"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 140,
      "epic": {
        "id": 455594,
        "iid": 140,
        "title": "Stream Maps Refinement and Enhancement",
        "url": "/groups/meltano/-/epics/140",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1155549,
      "relative_position": -14877
    }
  ]
}
