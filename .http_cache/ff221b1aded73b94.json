{
  "cookies": {
    "_cfuvid": "_Vmh.fPqen8CLRbBpp.a178zIvcn8l6vJxcTAyJY7W0-1747940821403-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:01.306352+00:00",
  "elapsed": 0.5637,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e98130dd2d89f-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:01 GMT",
    "ETag": "W/\"ac1dc000877cfd0f329923f199bba04a\"",
    "Link": "<https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=5&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"prev\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=7&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"next\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=1&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"first\", <https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?id=meltano%2Fsdk&order_by=updated_at&page=10&per_page=20&scope=all&sort=asc&state=all&updated_after=2022-01-01T00%3A00%3A00%2B00%3A00&with_labels_details=false>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=_Vmh.fPqen8CLRbBpp.a178zIvcn8l6vJxcTAyJY7W0-1747940821403-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-29-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-c",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"8c02e78ee594e2da9165eca5a3d14d7f\",\"version\":\"1\"}",
    "x-next-page": "7",
    "x-page": "6",
    "x-per-page": "20",
    "x-prev-page": "5",
    "x-request-id": "8c02e78ee594e2da9165eca5a3d14d7f",
    "x-runtime": "0.353282",
    "x-total": "200",
    "x-total-pages": "10"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?order_by=updated_at&page=6&scope=all&sort=asc&updated_after=2022-01-01T00%3A00%3A00Z"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/projects/meltano%2Fsdk/issues?order_by=updated_at&page=6&scope=all&sort=asc&updated_after=2022-01-01T00%3A00%3A00Z",
  "_decoded_content": [
    {
      "id": 90137925,
      "iid": 169,
      "project_id": 22672923,
      "title": "Improve \"Porting\" guidance for tap developers",
      "description": "The porting guide is not very good. Specifically, it does not describe the exact contract that the SDK expects, which methods or overrides must be overriden, how to migrate State-management code, etc.\n\nFor reference, here is the current doc: https://sdk.meltano.com/en/latest/porting.html\n\nWe should expand the available docs and collect feedback from one or more developers who have been through the process.",
      "state": "closed",
      "created_at": "2021-07-12T16:17:15.430Z",
      "updated_at": "2022-05-29T23:46:10.256Z",
      "closed_at": "2022-05-29T23:46:10.212Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/169",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/169",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/169/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/169/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#169",
        "relative": "#169",
        "full": "meltano/sdk#169"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 90414981,
      "iid": 170,
      "project_id": 22672923,
      "title": "Logging Documentation / Best Practices",
      "description": "Could we get logging documentation and best practices?\n\nI spent a few hours diving into this today. It took me that long because I refused to read the advanced logging section in python for some silly reason. But to the point \n\nI believe https://github.com/transferwise/pipelinewise-singer-python/blob/master/singer/logging.conf is where the majority of the logging configuration is coming from. \n\nMaybe we could tell everyone they could specify a LOGGING_CONF_FILE in their environment variables if they need debug logging. With an example or two? \n\nContext:\n\n1. I want debug logging, and I need to turn on debug logging sometimes in production but there's PII data in the logs so I can't output them all the time. \n1. I have a custom target with some custom classes that are using logger.debug(\"yadayada\") and I was manually adding the logging configuration to see this data. In production I need a better way than this (LOGGING_CONF_FILE is one way)\n\n## Subtopics (curated by AJ)\n\n1. [ ] `logging.conf`: We can document how works, how to set and give examples for users/devs to utilize this.\n2. [ ] Changing log level for particularly noisy operations in the SDK.\n   - [ ] For high-cardinality parent-child relationships, the \"starting\" and \"stopping\" section of each partition context can be 10+ times per second.\n   - [ ] For high-cardinality parent-child relationships, Singer `INFO metrics` also can be noisy if emitted after each stream.\n3. [ ] Within a Meltano `logging.conf`, we might want separate control of the SDK vs Meltano itself.\n4. [ ] Pretty-printed exceptions, ideally togglable.",
      "state": "closed",
      "created_at": "2021-07-16T22:27:20.745Z",
      "updated_at": "2022-05-29T23:46:35.135Z",
      "closed_at": "2022-05-29T23:46:35.115Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 11,
      "merge_requests_count": 0,
      "upvotes": 4,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/170",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 6,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/170",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/170/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/170/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#170",
        "relative": "#170",
        "full": "meltano/sdk#170"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 90519923,
      "iid": 171,
      "project_id": 22672923,
      "title": "Allow Authenticator to mutate outgoing request",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\nSome APIs use a form of [digest authentication](https://en.wikipedia.org/wiki/Digest_access_authentication) where the URL, query parameters, body, API secrets and a [_nonce_](https://en.wikipedia.org/wiki/Cryptographic_nonce) are required to sign a request. An example of this sort of authentication is used by the [Bitso API](https://bitso.com/api_info?python#generating-api-keys).\n\nAt the moment, adding this auth method to a tap implies overriding `RESTStream.prepare_request` with an almost identical implementation, only adding the lines that pertain to the calculation of the right auth headers using the other request arguments.\n\nI propose instead, allowing authenticator class to mutate the outgoing request, giving it access to the raw, unprepared, request object so it can be \"signed\", e.g. headers updated appropriately.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\n1. The base `RESTStream.prepare_request` would then rarely need to be overridden even for idiosyncratic authentication mechanisms.\n2. Authentication is further decoupled from the client/stream implementation.\n3. Support other \"dynamic\" authentication methods that need access to the request.\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nMake the authenticator interface ` APIAuthenticatorBase` have an abstract method `authenticate_request(self, request: requests.Request)` and use this inside of `RESTStream.prepare_request`:\n\n```python\nclass RESTStream(Stream, metaclass=abc.ABCMeta):\n    def prepare_request(\n        self, context: Optional[dict], next_page_token: Optional[Any]\n    ) -> requests.PreparedRequest:\n        \"\"\"Prepare a request object.\n\n        If partitioning is supported, the `context` object will contain the partition\n        definitions. Pagination information can be parsed from `next_page_token` if\n        `next_page_token` is not None.\n        \"\"\"\n        http_method = self.rest_method\n        url: str = self.get_url(context)\n        params: dict = self.get_url_params(context, next_page_token)\n        request_data = self.prepare_request_payload(context, next_page_token)\n        headers = self.http_headers\n\n        request = requests.Request(\n            method=http_method,\n            url=url,\n            headers=headers,\n            params=params,\n            data=request_data,\n        )\n        # Mutate the request to include any auth headers, parameters, etc.\n        self.authenticator.authenticate_request(request)\n\n        prepared_request: requests.PreparedRequest = (\n            self.requests_session.prepare_request(request)\n        )\n        return prepared_request\n```\n\nFor the API that motivated this issue, the authenticator class would look like this:\n\n```python\n\"\"\"Bitso Authentication.\"\"\"\n\nimport hashlib\nimport hmac\nimport json\nimport time\nfrom urllib.parse import urlencode, urlparse\n\nfrom requests import Request\nfrom singer_sdk.authenticators import APIAuthenticatorBase\n\n\nclass BitsoAuthenticator(APIAuthenticatorBase):\n    \"\"\"Authenticator class for Bitso.\"\"\"\n\n    @classmethod\n    def create_for_stream(cls, stream) -> \"BitsoAuthenticator\":\n        \"\"\"Create the authenticator for the stream.\"\"\"\n        return cls(stream=stream)\n\n    def authenticate_request(self, request: Request) -> None:\n        \"\"\"Mutate outgoing request with authentication data.\n\n        See: https://bitso.com/api_info?python#creating-and-signing-requests\n        \"\"\"\n        bitso_key: str = self.config[\"key\"]\n        bitso_secret: str = self.config[\"secret\"]\n        nonce = str(int(round(time.time() * 1000)))\n\n        _, path = request.url.split(self.config[\"base_url\"])\n        message = nonce + request.method + path\n\n        if request.method.lower() == \"post\":\n            message += json.dumps(request.data)\n\n        if request.params:\n            message += \"?\" + urlencode(request.params)\n\n        signature = hmac.new(\n            bitso_secret.encode(\"utf-8\"),\n            message.encode(\"utf-8\"),\n            hashlib.sha256,\n        ).hexdigest()\n        auth_header = \"Bitso %s:%s:%s\" % (bitso_key, nonce, signature)\n\n        # Update request with Bitso auth\n        request.headers.update({\"Authorization\": auth_header})\n```\n\nOther authentication methods would require simpler `authenticate_request` implementations that perhaps only add a header, given a token.\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\n1. Arguably, overriding `prepare_request` is not too much of a burden.",
      "state": "closed",
      "created_at": "2021-07-19T20:05:11.046Z",
      "updated_at": "2022-05-29T23:46:51.058Z",
      "closed_at": "2022-05-29T23:46:51.039Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/171",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/171",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/171/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/171/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#171",
        "relative": "#171",
        "full": "meltano/sdk#171"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 91155861,
      "iid": 174,
      "project_id": 22672923,
      "title": "Provide developer option for auto-detecting schema at runtime or devtime",
      "description": "## Summary\n\nAs demonstrated in the new [tap-rest-api](https://github.com/Widen/tap-rest-api), there's an opportunity to auto-detect a stream's schema. This could be leveraged at runtime or devtime, depending on the needs of the developer and of the tap API itself.\n\n## Proposed benefits\n\n1. at runtime: for fully dynamic schemas\n2. at devtime: to semi-automate the schema declaration process\n\n## Proposal details\n\nFor runtime use cases (dynamic schema):\n\n1. Add an auto-detection method (with an integer record-count arg) which can be used by developers within the discovery methods.\n\nFor devtime use cases (static schema):\n\n2. Add a helper CLI, pytest output artifact, or other means which can auto-generate (a) JSON schema file definitions or (b) Python sample code.\n\nFor both use cases:\n\n3. Update the cookiecutter and `code_samples.md` with means of implementing auto-schema detection.\n\n## Best reasons not to build\n\nThis method only works (a) if a reliable and stable schema can be inferred within `n` number of records per stream, and (b) if the schema detection methods can reliably detect enough metadata to still provide a high-quality experience for the Singer community.\n\nWe probably should plan ahead to build an expectation that review and appending metadata is an important part of the process. We may need to invest in a streamlined path and instructions on how developers can tweak, amend, and append the generated schema with more fine-tuned data types and other metadata - such as property descriptions as noted in #159.\n\n## Refs:\n\n* As inspired by `Widen/tap-rest-api`: https://github.com/Widen/tap-rest-api-msdk\n* and: https://github.com/anelendata/tap-rest-api",
      "state": "closed",
      "created_at": "2021-07-30T13:59:02.784Z",
      "updated_at": "2022-05-29T23:47:15.220Z",
      "closed_at": "2022-05-29T23:47:15.193Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/174",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/174",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/174/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/174/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#174",
        "relative": "#174",
        "full": "meltano/sdk#174"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 91462524,
      "iid": 181,
      "project_id": 22672923,
      "title": "Create Gitlab \"Releases\" in CI pipeline",
      "description": "We currently create Gitlab `tags` for each SDK release but we do not automatically create a `Release` due to #129",
      "state": "closed",
      "created_at": "2021-08-04T23:15:58.938Z",
      "updated_at": "2022-05-29T23:48:25.998Z",
      "closed_at": "2022-05-29T23:48:25.975Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "urgency::low",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/181",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/181",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/181/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/181/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#181",
        "relative": "#181",
        "full": "meltano/sdk#181"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 91705476,
      "iid": 184,
      "project_id": 22672923,
      "title": "Support for async and potentially parallel REST calls",
      "description": "## 1. Async at the Stream level\n\nFor APIs such as Klaviyo with a very low number of records per call (100 records per call in the case of Klaviyo), the throughput of the stream is limited by the need to make serial and synchronous roundtrips to the remote server. One user in slack (missing thread link) proposed using an asyncio approach to retrieving records, and this could significantly speed up the throughput.\n\n### For taps where `next_page_token` is deterministic:\n\nIf the next page token is predictable, such as an integer `page` number, multiple calls could be made simultaneously - for instance requesting pages 1 through 5 immediately and asynchronously, and then processing each returned result as it is received.\n\n### For taps where `next_page_token` is _not_ deterministic:\n\nIf the next page token is not predictable (such as an alphanumeric token), the REST calls still need to be made serially, but we can at least send the next call in asyncio as soon as the first result set is received, rather than waiting until the records are fully processed. In this way, the tap can be waiting for the response from the remote service while also simultaneously processing the records from the prior request.\n\n### Best reason not to build\n\nIntroducing an async implementation could make it harder to manage or debug new taps. We could mitigate this by trying to keep the development experience as simple as possible, and if the developer experience would need to change, we could make parts of this an opt-in experience for taps which require it. (Ideally the async methods would all be internal, and the dev experience would not need to change at all.)\n\n### Other considerations\n\nIdeally we would still process each call in original pagination order, even if results were returned from the API with alternative sequence. This would keep \"sorted stream\" behavior as-is today. If not, meaning if results could be emitted out of order, then we want to make sure we have `is_sorted=False`, which triggers Signpost behavior and other treatments for unsorted streams.\n\n## 2. Async at the tap level\n\nThe above (stream-level async) assumes we want to run REST calls in parallel. We could also/alternatively run multiple stream sync operations in parallel, for instance, invoking up to a max number of stream sync operations side-by-side with each other.\n\nThis approach does not solve for a single stream being slow due to small batch sized.\n\nThis approach also runs a higher risk of overloading a target and/or overloading the memory buffers and/or the maximum PIPE limits between STDOUT and STDIN, but this should be manageable.",
      "state": "closed",
      "created_at": "2021-08-09T18:55:48.498Z",
      "updated_at": "2022-05-29T23:48:47.215Z",
      "closed_at": "2022-05-29T23:48:47.198Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 3,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/184",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/184",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/184/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/184/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#184",
        "relative": "#184",
        "full": "meltano/sdk#184"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 91892620,
      "iid": 187,
      "project_id": 22672923,
      "title": "Add unit tests for STATE handling",
      "description": "Follow-on from #180. \n\nBy improving unit tests, we should be able to better detect and resolve similar regressions.",
      "state": "closed",
      "created_at": "2021-08-12T19:33:48.664Z",
      "updated_at": "2022-05-29T23:49:13.695Z",
      "closed_at": "2022-05-29T23:49:13.679Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Testing",
        "kind::Tech Debt",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2252673,
        "iid": 193,
        "group_id": 2524164,
        "title": "Internal WIP",
        "description": "",
        "state": "active",
        "created_at": "2021-09-27T19:02:31.281Z",
        "updated_at": "2021-09-28T18:29:26.781Z",
        "due_date": null,
        "start_date": null,
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/193"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/187",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/187",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/187/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/187/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#187",
        "relative": "#187",
        "full": "meltano/sdk#187"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 92051023,
      "iid": 192,
      "project_id": 22672923,
      "title": "Support variant `object` types in tap SCHEMA",
      "description": "As described in https://gitlab.com/meltano/sdk/-/merge_requests/120\n\nPer discussions in this thread:\n\n1. We _do_ allow `variant` objects and we will merge MRs that allow this to \"just work\" in a tap.\n2. We _do not_ recommend that tap developers use this practice until it has broader compatibility with targets.\n3. We _do not_ have robust testing yet on the behavior of variant objects in regards to node selection.\n4. We expect #186 will introduce a `DATATYPE_FAILSAFE` capability (or similar) which will let targets advertise that they can accept these or similarly complex/ambiguous types.\n5. We expect #174  will allow inline schema detection, which will reduce the need for variant schemas in SDK-based taps.\n\n@edgarrmondragon summarizes it well:\n\n> If the target doesn't support that, I would consider it **a bug in the target** (or missing a `DATATYPE_FAILSAFE` feature) since most databases are able to either manipulate JSON stored in text columns, or even have special column types. Even for targets like CSVs, the loader should be able to stringify the JSON with the right escaping.\n\nRemaining todos:\n\n- [ ] Document the above best practices, recommendations, and considerations somewhere in sdk.meltano.com (low pri?)\n- [ ] Continue to expand test coverage, esp. node selection, for variant object types (low pri?)",
      "state": "closed",
      "created_at": "2021-08-16T16:37:48.198Z",
      "updated_at": "2022-05-29T23:49:51.291Z",
      "closed_at": "2022-05-29T23:49:51.272Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Community-Contributed MR",
        "flow::To Do",
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 17,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/192",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/192",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/192/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/192/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#192",
        "relative": "#192",
        "full": "meltano/sdk#192"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 92514322,
      "iid": 199,
      "project_id": 22672923,
      "title": "Create custom markers for external tests, add contributor docs",
      "description": "The following discussion from !136 should be addressed:\n\n> Another potential improvement would probably be [marking these tests with an ](https://docs.pytest.org/en/latest/example/markers.html#mark-examples)`integration` flag or similar so they are not executed every time during local development.\n\nWe should also make this the default behavior (if possible) and fully document in CONTRIBUTING.md.",
      "state": "closed",
      "created_at": "2021-08-24T15:42:40.455Z",
      "updated_at": "2022-05-29T23:50:52.985Z",
      "closed_at": "2022-05-29T23:50:52.965Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Testing",
        "kind::Tech Debt",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2252673,
        "iid": 193,
        "group_id": 2524164,
        "title": "Internal WIP",
        "description": "",
        "state": "active",
        "created_at": "2021-09-27T19:02:31.281Z",
        "updated_at": "2021-09-28T18:29:26.781Z",
        "due_date": null,
        "start_date": null,
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/193"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/199",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/199",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/199/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/199/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#199",
        "relative": "#199",
        "full": "meltano/sdk#199"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 92522432,
      "iid": 200,
      "project_id": 22672923,
      "title": "Use an `--env-config` flag instead of `--config=ENV` to tell the tap to parse environment variables",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\n\nCurrently, the way to tell a tap-based SDK to parse environment variables for settings is to pass a `--config=ENV` option to the tap invocation\n\n```bash\nmy-tap --config=firstConfig.json --config=ENV -config=secondConfig.json\n```\n\nI suggest supporting a boolean `--env-config` instead.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nBe more explicit about environment parsing option for settings and don't rely on the hardcoded `ENV` string.\n\nAlso, the position of `--config=ENV` in the multi-value sequence is not important, so in practice it acts only as a flag. It'd be good to make that understanding more explicit.\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nAdd a new `--env-config` option to the tap CLI decorators:\n\n```python\nclick.option(\n    \"--env-config\",\n    is_flag=True,\n    help=\"Use environment variables for configuration.\",\n)\n```\n\nThe corresponding `env_config` boolean variable in the function would then be passed directly to the `Tap` constructor's `parse_env_config` argument.\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\n`--env-config` is not standard for Singer taps, so this would act as an extension to the common CLI options.\n\ncc @aaronsteers",
      "state": "closed",
      "created_at": "2021-08-24T19:04:04.263Z",
      "updated_at": "2022-05-29T23:51:00.126Z",
      "closed_at": "2022-05-29T23:51:00.097Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "CLI",
        "Configuration",
        "flow::Triage",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 6,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/200",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 1,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/200",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/200/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/200/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#200",
        "relative": "#200",
        "full": "meltano/sdk#200"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 93088625,
      "iid": 209,
      "project_id": 22672923,
      "title": "Consider promoting the Singer classes added in !146 to a public module",
      "description": "We should consider moving the Singer helpers for catalog and metadata in `singer_sdk/helpers/_singer.py`, added in !146, to a public module (stable and officially supported), and gather feedback from the broader Singer community.",
      "state": "closed",
      "created_at": "2021-09-03T16:32:21.481Z",
      "updated_at": "2022-05-29T23:53:09.491Z",
      "closed_at": "2022-05-29T23:53:09.470Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/209",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/209",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/209/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/209/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#209",
        "relative": "#209",
        "full": "meltano/sdk#209"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 93099956,
      "iid": 211,
      "project_id": 22672923,
      "title": "Support for other discoverable metadata",
      "description": "Give tap developers the ability to declare fields unsupported and fields selected by default, according to [the singer spec around metadata](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#metadata).\n\nRelates to #91\n\nThe documentation should also be updated:\n\n- [ ] `docs/implementation/catalog_metatadata.md`: https://sdk.meltano.com/en/latest/implementation/catalog_metadata.html\n\nLimited to:\n\n- `\"selected-by-default\": ...`\n- `\"inclusion\": \"unsupported\"`",
      "state": "closed",
      "created_at": "2021-09-03T20:03:45.884Z",
      "updated_at": "2022-05-29T23:53:24.830Z",
      "closed_at": "2022-05-29T23:53:24.815Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Office Hours::To Discuss",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 13,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/211",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/211",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/211/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/211/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#211",
        "relative": "#211",
        "full": "meltano/sdk#211"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 93276692,
      "iid": 214,
      "project_id": 22672923,
      "title": "Include expected environment variables in `--about`",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\n\nInclude expected environment variables as part of the output of the `--about` CLI option.\n\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nPlugin developers developers and users can see the names of the environment variables their tap/target will look for when using `--config=ENV`.\n\nThis could later be used to by Meltano to set alternative names (aliases) for the plugin environment variables.\n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nInclude the environment variable names of settings in the JSON Schema printed out by `--about`. Something like\n\n```console\n{\n  \"name\": \"my-tap\",\n  \"version\": \"0.0.1\",\n  \"sdk_version\": \"0.3.6\",\n  \"capabilities\": [\n    \"sync\",\n    \"catalog\",\n    \"state\",\n    \"discover\"\n  ],\n  \"settings\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"password\": {\n        \"type\": [\n          \"string\"\n        ],\n        \"environmentVariables\": [\n          \"MY_TAP_PASSWORD\"\n        ]\n      },\n      \"base_url\": {\n        \"type\": [\n          \"string\",\n          \"null\"\n        ],\n        \"default\": \"https://someapi.com\",\n        \"environmentVariables\": [\n          \"MY_TAP_BASE_URL\"\n        ]\n      }\n    }\n    \"required\": [\n      \"password\"\n    ]\n  }\n}\n```\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nSuch a field is not part of the JSON Schema spec.",
      "state": "closed",
      "created_at": "2021-09-07T16:47:46.644Z",
      "updated_at": "2022-05-29T23:53:47.430Z",
      "closed_at": "2022-05-29T23:53:47.410Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/214",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/214",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/214/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/214/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#214",
        "relative": "#214",
        "full": "meltano/sdk#214"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 93297575,
      "iid": 215,
      "project_id": 22672923,
      "title": "Selection treatment for undefined child nodes in the record",
      "description": "As discussed in this comment: https://gitlab.com/meltano/sdk/-/merge_requests/146#note_668003625\n\n> I'm thinking of scenarios where a new subproperty is added in source but not declared in the catalog. If the parent has `selected-by-default=True`, I think that can apply to the child, but if the parent is `selected=True`, it might still one or more subnodes with `selected=False`, and a newly appearing subnode should probably also default to false.\n> \n> The extreme PII scenario is something like an `employees` stream which has a `properties.user_record` subnode (selected=True), which has `properties.user_record.properties.last_name` and `properties.user_record.properties.phone_number` (selected=False). If a new subnode appears that was not previously declared, like `properties.user_record.properties.ssn`, I think we need to default to `False` in that case\n> \n> To complicate matters further, there's another related case where `properties` is completely missing and undefined as described in #192. In that case, I do think we would take the parent's `selected` property as sufficient to select its nodes. The distinction, I think, is when `properties` are pre-defined, we either should ignore new ones or perhaps refer to `selected-by-default` as a tie breaker. If properties are not defined at all (variant objects), then I think the parent being selected is explicit to the full object.\n\nLogging this issue to figure out what the correct behavior should be, whether using the existing spec (perhaps a combo of `selected` and `selected-by-default`) or via a spec clarification or extension.",
      "state": "closed",
      "created_at": "2021-09-08T04:47:30.185Z",
      "updated_at": "2022-05-29T23:53:55.144Z",
      "closed_at": "2022-05-29T23:53:55.125Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/215",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/215",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/215/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/215/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#215",
        "relative": "#215",
        "full": "meltano/sdk#215"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 93502665,
      "iid": 217,
      "project_id": 22672923,
      "title": "Allow syncing a stream without its parent stream",
      "description": "## Summary\nCould the sdk add a method for allowing to sync a stream without automatically syncing its parent stream?\n\n\n## Proposed benefits\nIn our use case with `MeltanoLabs/tap-github`, we sync different streams at different rates (eg: `issues` are synced hourly, while the parent stream is only synced daily). With the current sdk logic, I cannot sync `issues` without also syncing the parent `repositories` stream.\n\nThe reason being \"cost\" of accessing the resource, in the form of rate limits.\n\nI think the use case probably applies to other taps where access to the resource is constrained somehow, either by money or technical limits, which is why I'm opening this ticket here rather than in the tap's repo.\n\n## Proposal details\n\nThe SDK [decides](https://gitlab.com/meltano/sdk/-/blob/main/singer_sdk/tap_base.py#L253) whether to sync a stream with:\n\n```python\n        for stream in self.streams.values():\n            if not stream.selected and not stream.has_selected_descendents:\n                self.logger.info(f\"Skipping deselected stream '{stream.name}'.\")\n                continue\n```\n\nwith `has_selected_descendents` a `@final` property. In theory, the tap could simply overload this method and return `False` depending on some config option, but I suspect that a clearly defined method for doing this that all sdk-based taps can share would be nice.\n\n## Best reasons not to build\nI can't think of any definitive reasons not to implement this, but it could also be argued that leaving this to each tap is an acceptable viewpoint :sweat_smile:",
      "state": "closed",
      "created_at": "2021-09-11T21:44:16.390Z",
      "updated_at": "2022-05-29T23:54:10.714Z",
      "closed_at": "2022-05-29T23:54:10.699Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 75577,
        "username": "LaurentS",
        "public_email": "",
        "name": "Laurent Sava\u00ebte",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/ac898ad4d1975ac4678873c142f8ed88161383546137af50ad4f58fdc678c798?s=80&d=identicon",
        "web_url": "https://gitlab.com/LaurentS"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/217",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/217",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/217/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/217/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#217",
        "relative": "#217",
        "full": "meltano/sdk#217"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 94059877,
      "iid": 221,
      "project_id": 22672923,
      "title": "Template and support for SOAP/XML API",
      "description": "## Summary\nFrom [this slack thread](https://meltano.slack.com/archives/C01PKLU5D1R/p1631888955171800). We would like to see the ability to develop SDK based taps for SOAP/XML APIs.\n\n## Proposed benefits\nThis would greatly speed up what is an onerous development process.\n\n## Proposal details\nIt would be great if during the cookiecutter command line setup if a \"SOAP API\" was an available option next to selecting a \"REST API\".\n\n## Best reasons not to build\nThis is not a very commonly used API type.  \n\nThe current work around involves overwriting some of the less commonly altered base functionality provided in the REST API SDK functionality (see comments for example).",
      "state": "closed",
      "created_at": "2021-09-21T18:11:55.366Z",
      "updated_at": "2022-05-29T23:54:41.309Z",
      "closed_at": "2022-05-29T23:54:41.293Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 8784356,
        "username": "jlloyd3",
        "public_email": "",
        "name": "Josh Lloyd",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8784356/avatar.png",
        "web_url": "https://gitlab.com/jlloyd3"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/221",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/221",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/221/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/221/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#221",
        "relative": "#221",
        "full": "meltano/sdk#221"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 95,
      "epic": {
        "id": 240356,
        "iid": 95,
        "title": "Expanded Tap Functionality in the SDK",
        "url": "/groups/meltano/-/epics/95",
        "group_id": 2524164,
        "human_readable_end_date": "Feb 28, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 94469394,
      "iid": 226,
      "project_id": 22672923,
      "title": "cookiecutter skeleton generation lack's context and validation",
      "description": "## Summary\n\nWhen using cookiecutter to generate the project skeleton, if \"source_name\" provided includes a hyphen we end up generating invalid python because we end up having class names and imports that contain hyphens. \n\n\n## Steps to reproduce\n\n```\n\u279c  projects cookiecutter https://gitlab.com/meltano/sdk --directory=\"cookiecutter/tap-template\"\nYou've downloaded /Users/fhines/.cookiecutters/sdk before. Is it okay to delete and re-download it? [yes]: yes\nsource_name [MySourceName]: foo-bar\nadmin_name [FirstName LastName]:\ntap_id [tap-foo-bar]:\nlibrary_name [tap_foo_bar]:\nSelect stream_type:\n1 - REST\n2 - GraphQL\n3 - Other\nChoose from 1, 2, 3 [1]: 3\nSelect auth_method:\n1 - API Key\n2 - Bearer Token\n3 - Basic Auth\n4 - OAuth2\n5 - JWT\n6 - Custom or N/A\nChoose from 1, 2, 3, 4, 5, 6 [1]: 6\n```\n\n## What is the current bug behavior?\n\n\nWe generate invalid python due to the inclusion of the hyphen, eg:\n\n```\nfrom tap_foo_bar.client import foo-barStream\nclass UsersStream(foo-barStream):\nclass GroupsStream(foo-barStream):\n```\n\n## What is the expected correct behavior?\n\nThat we either warn users and fail to create the project skeleton or proactively work around the provided input to still generate valid/working python.\n\n\n## Relevant logs and/or screenshots\n\n[//]: # (Paste any relevant logs.)\n[//]: # (Please use code blocks ``` to format console output, logs, and code, as it's very hard to read otherwise.)\n\n\n## Possible fixes\n\nProbably have two main options:\n\n1. We kind of hint at the fact that we want you to provide camel case for the source_name, but since we don't describe what the fields are used for it's easy to overlook. So one option is to be more descriptive on these fields (explicitly warning folks), and we may want to validate the input.\n2. We could try and work around this behind the scenes, by sanitizing input and just proactively replace `-` with `_` for use when generating code (or otherwise camel casing source_name without trampling another intentional naming convention).\n\nMy personal recommendation would probably be option 1 - being more descriptive and warning users/validating the input. Option 2 feels like a slippery slope and a little bit too magic.",
      "state": "closed",
      "created_at": "2021-09-28T17:50:55.771Z",
      "updated_at": "2022-05-29T23:55:20.693Z",
      "closed_at": "2022-05-29T23:55:20.678Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "flow::Triage",
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 6,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/226",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 12,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/226",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/226/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/226/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#226",
        "relative": "#226",
        "full": "meltano/sdk#226"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 96,
      "epic": {
        "id": 240357,
        "iid": 96,
        "title": "SDK Development (Parent Epic)",
        "url": "/groups/meltano/-/epics/96",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 94549208,
      "iid": 227,
      "project_id": 22672923,
      "title": "Incremental Syncs for APIs Without Filtering",
      "description": "I previously had some APIs that didnt support incremental replication using filtering but the tap was able to \"fake\" it by just choosing not to emit the records that are older than the bookmark value (assuming the API has a bookmark field it can use). I think this is also sometimes the case for parent child streams where all parents need to be iterated every time in order to retrieve and call the child stream within for updates. @edgarrmondragon suggested potentially having this feature supported in the SDK.\n\nI'm curious how common this is and if we want to encourage it. What do you all think about that? Have you seen it before also?",
      "state": "closed",
      "created_at": "2021-09-29T13:51:19.976Z",
      "updated_at": "2022-05-29T23:55:28.113Z",
      "closed_at": "2022-05-29T23:55:28.095Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 8,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/227",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/227",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/227/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/227/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#227",
        "relative": "#227",
        "full": "meltano/sdk#227"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    },
    {
      "id": 94554388,
      "iid": 228,
      "project_id": 22672923,
      "title": "Tap Validate Option",
      "description": "## Summary\nValidate tap data schema, particularly useful during development as right now you have to add a target that does this validation ie `meltano elt tap-abc target-jsonl` jsonl will validate for you. Maybe it should stay like this? \n\n\n## Proposed benefits\n1. One less step while doing development, the issue I'm seeing is running production data through a tap I'm writing leads to a bunch of Data in a format that wasn't expected (String is sometimes an Int, or something it's an array of Strings, etc etc).\n1. Theoretically you could suggest a new schema for the stream that's causing issues. \n\n## Proposal details\n~~A --validate option~~\n\nStandard validate_json config \n\n\n## Best reasons not to build\n- You could offload this to a target\n- People may forget to turn this off in production which would have performance implications\n\n## Use Cases\n- https://meltano.slack.com/archives/C01TCRBBJD7/p1635203695035500\n- https://github.com/AutoIDM/tap-clickup/pull/46\n- https://meltano.slack.com/archives/C01PKLU5D1R/p1632880108194400",
      "state": "closed",
      "created_at": "2021-09-29T15:04:43.357Z",
      "updated_at": "2022-05-29T23:55:35.995Z",
      "closed_at": "2022-05-29T23:55:35.947Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 7,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/228",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/228",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/228/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/228/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#228",
        "relative": "#228",
        "full": "meltano/sdk#228"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null
    },
    {
      "id": 94573299,
      "iid": 229,
      "project_id": 22672923,
      "title": "Debug message when you cannot find property in stream - Include Data",
      "description": "## Summary\nWhen the SDK cannot find the property in a stream it lets off an error message. See https://github.com/AutoIDM/tap-clickup/issues/36 \nIdeally the SDK would be a bit more helpful to point to what the problem is. Because of the sensitivity of data a log.debug here with the data from the stream would be useful\n\n\n## Proposed benefits\nFix the schema faster\n\n## Proposal details\nhttps://gitlab.com/meltano/sdk/-/blob/main/singer_sdk/helpers/_typing.py#L198 \n\nHave some obscure data coming over that's hard to track down. I go add print line's right now to find the data I\"m after. \n\nEven better would be if the SDK suggested a schema that would work\n\n## Best reasons not to build\n* Security concerns with pushing data to debug logging",
      "state": "closed",
      "created_at": "2021-09-29T21:02:33.869Z",
      "updated_at": "2022-05-29T23:55:43.566Z",
      "closed_at": "2022-05-29T23:55:43.551Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/229",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/229",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/229/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/229/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#229",
        "relative": "#229",
        "full": "meltano/sdk#229"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": null,
      "epic": null,
      "iteration": null,
      "health_status": null
    }
  ]
}
