{
  "cookies": {
    "_cfuvid": "gw4QsMitfzCo3QrklYSt8Gu9S47jTghQ1iVvQIFRt6g-1747940903721-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:08:23.666906+00:00",
  "elapsed": 0.678989,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e9a14dbafe3b6-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:08:23 GMT",
    "ETag": "W/\"c3f8a1ad7c04a7d8021847f102bad962\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/133/issues?epic_iid=133&id=2524164&page=2&per_page=20>; rel=\"next\", <https://gitlab.com/api/v4/groups/2524164/epics/133/issues?epic_iid=133&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/133/issues?epic_iid=133&id=2524164&page=2&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=gw4QsMitfzCo3QrklYSt8Gu9S47jTghQ1iVvQIFRt6g-1747940903721-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-55-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-b",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"f367290aee5398e684ceafd07927165c\",\"version\":\"1\"}",
    "x-next-page": "2",
    "x-page": "1",
    "x-per-page": "20",
    "x-prev-page": "",
    "x-request-id": "f367290aee5398e684ceafd07927165c",
    "x-runtime": "0.376026",
    "x-total": "22",
    "x-total-pages": "2"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/133/issues"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/133/issues",
  "_decoded_content": [
    {
      "id": 109238762,
      "iid": 3542,
      "project_id": 7603319,
      "title": "Consider an \"eager warning\" when configuration is wrong prior to execution",
      "description": "As discussed in https://gitlab.com/meltano/meltano/-/issues/3209#note_962955570 we deprioritized \"warning eagerly\" when there is conflicting configuration.",
      "state": "closed",
      "created_at": "2022-05-28T01:32:44.898Z",
      "updated_at": "2022-05-30T13:43:13.607Z",
      "closed_at": "2022-05-30T13:43:13.588Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3542",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3542",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3542/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3542/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3542",
        "relative": "#3542",
        "full": "meltano/meltano#3542"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1395273,
      "relative_position": -10773
    },
    {
      "id": 109174051,
      "iid": 3535,
      "project_id": 7603319,
      "title": "Document `env_specific` on settings",
      "description": "Looking in https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/bundle/settings.yml#L10 it seems like `env_specific: BOOLEAN` is an option on settings. Per @DouweM \n\n>>>\nTells meltano config set to prefer storing in .env or the system DB instead of meltano.yml. Now with environments support, we may not need that behavior anymore\n>>>\n\nIt does not seem to be documented in https://docs.meltano.com/contribute/plugins#setting-definitions",
      "state": "closed",
      "created_at": "2022-05-26T17:10:54.141Z",
      "updated_at": "2022-05-30T13:42:28.308Z",
      "closed_at": "2022-05-30T13:42:28.291Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Documentation",
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 6,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3535",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3535",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3535/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3535/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3535",
        "relative": "#3535",
        "full": "meltano/meltano#3535"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1392735,
      "relative_position": -10260
    },
    {
      "id": 109131173,
      "iid": 3533,
      "project_id": 7603319,
      "title": "Support specifying a custom dotenv file name/path",
      "description": "### Problem to solve\n\nUsers might want to use the same environment variables names for different stages. So, for example, instead of relying on `PROD_SF_DBNAME` and `DEV_SF_DBNAME`, they could use the single `SF_DBNAME`, read from different `prod.env` and `dev.env` files respectively.\n\n### Target audience\n\nUsers with more than one environment/stage: prod, dev, etc.\n\n### Further details\n\nDocker and Compose have a similar feature.\n\n### Proposal\n\n- The path of the custom env file is always relative to the project root\n\n- A project level `env_file` setting that defaults to `.env`. The path is always relative to the project root.\n\n- It can be set:\n\n\n  globally in `meltano.yml`\n\n  ```yaml\n  project_id: b7854e29-07a4-2200-0ea7-1bda759ccd3d\n  env_file: .env\n  ```\n\n  or in the CLI (this is similar to Docker's `--env-file`)\n\n  ```shell\n  meltano --env-file prod.env run ...\n  ```\n\n  or _(optionally?)_ at the `environments.*` level\n\n  ```yaml\n  environments:\n  - name: prod\n    env_file: prod.env\n  - name: dev\n    env_file: dev.env\n  ```\n\n### What does success look like, and how can we measure that?\n\nUsers can reuse environment variable names and switch environments more easily.\n\n### Regression test\n\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references",
      "state": "closed",
      "created_at": "2022-05-25T22:56:27.566Z",
      "updated_at": "2022-05-30T13:42:15.855Z",
      "closed_at": "2022-05-30T13:42:15.808Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2136620,
        "iid": 176,
        "group_id": 2524164,
        "title": "Staging",
        "description": "",
        "state": "active",
        "created_at": "2021-07-07T19:00:49.676Z",
        "updated_at": "2021-07-07T19:00:49.676Z",
        "due_date": null,
        "start_date": null,
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/176"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3533",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3533",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3533/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3533/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3533",
        "relative": "#3533",
        "full": "meltano/meltano#3533"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1390756,
      "relative_position": -9747
    },
    {
      "id": 108975164,
      "iid": 3520,
      "project_id": 7603319,
      "title": "environment variable within object values",
      "description": "Using the `tap-rest-api-msdk` I'm want to pass the value for Authorization in the header as an env variable, I just found out that is not possible yet, I think is important to be able to pass env variables to this level of settings.\n\nmy current configuration,\n\n```\nconfig:\n  api_url: $URL_API\n  name: $REPORT_NAME\n  streams:\n    - name: simple_extraction\n  headers:\n    Authorization: $TOKEN\n```\n\nNext is how is interpreted\n```\nmessage=dict_items([('Authorization', '$TOKEN')])\n```",
      "state": "closed",
      "created_at": "2022-05-23T12:41:17.388Z",
      "updated_at": "2022-05-30T13:40:52.863Z",
      "closed_at": "2022-05-30T13:40:52.842Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2136620,
        "iid": 176,
        "group_id": 2524164,
        "title": "Staging",
        "description": "",
        "state": "active",
        "created_at": "2021-07-07T19:00:49.676Z",
        "updated_at": "2021-07-07T19:00:49.676Z",
        "due_date": null,
        "start_date": null,
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/176"
      },
      "assignees": [],
      "author": {
        "id": 11471435,
        "username": "jennleonfonseca10.d",
        "public_email": null,
        "name": "Jenn Fonseca",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/bd539915736b47ca82de5e91fd5bb704d2d90f972127f2b0bff63c86c62a16e4?s=80&d=identicon",
        "web_url": "https://gitlab.com/jennleonfonseca10.d"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3520",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3520",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3520/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3520/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3520",
        "relative": "#3520",
        "full": "meltano/meltano#3520"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1383143,
      "relative_position": -9234
    },
    {
      "id": 108716091,
      "iid": 3503,
      "project_id": 7603319,
      "title": "Consider changing default `meltano config` behavior to `--no-environment` (to set 'global' top-level setting)",
      "description": "I keep running into this and I think it's worth reconsidering the defaults here.\n\nIn CI - my CLI commands looked fine and only after 'cat'ing my `meltano.yml` file was I able to diagnose the issue here.\n\n```console\n$ meltano config tap-gitlab set _pip_url git+https://github.com/MeltanoLabs/tap-gitlab.git@main\n2022-05-18T00:23:28.361467Z [info     ] Environment 'dev' is active\nExtractor 'tap-gitlab' setting '_pip_url' was set in `meltano_environment`: 'git+https://github.com/MeltanoLabs/tap-gitlab.git@main'\n$ cat meltano.yml\nversion: 1\ndefault_environment: dev\nsend_anonymous_usage_stats: false\nplugins:\n  extractors:\n  - name: tap-gitlab\n    variant: meltanolabs\n    pip_url: git+https://github.com/MeltanoLabs/tap-gitlab.git\nenvironments:\n- name: dev\n  config:\n    plugins:\n      extractors:\n      - name: tap-gitlab\n        pip_url: git+https://github.com/MeltanoLabs/tap-gitlab.git@main\n```\n\nThis one is particularly sticky because 'pip_url' at the environment level seems to be a noop.",
      "state": "closed",
      "created_at": "2022-05-18T03:06:00.155Z",
      "updated_at": "2022-05-30T13:39:10.836Z",
      "closed_at": "2022-05-30T13:39:10.816Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "OKR: Improve New User Experience",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3503",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3503",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3503/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3503/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3503",
        "relative": "#3503",
        "full": "meltano/meltano#3503"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1373715,
      "relative_position": -8721
    },
    {
      "id": 108480543,
      "iid": 3485,
      "project_id": 7603319,
      "title": "Don't send everything from `os.environ` into plugin context's environment variables",
      "description": "Follows from #3469+ but carries the behavior further to all plugins, not just those run via `container_spec`.\n\n> (Per this comment: https://gitlab.com/meltano/meltano/-/issues/3469#note_940146914)\n> \n> 1. Plugins pass to `container_spec` anything mapped via layers 2-6 in the #3173 model. In other words, they exclude the terminal's context and `.dotenv` but they *include* any `env:` declarations that are applicable to the Meltano project as a whole, or to the named environment.\n>    - In Python terms, they don't inherit from `os.environ`, but they do inherit the meltano-defined env vars.\n> 1. Any env vars that are intended to be passed from terminal context must be declared in the project file in order to be passed down. For example, if for some reason you wanted to pass the `$HOME` env var from terminal context to plugin context, then you'd need to add it like this:\n> \n>    ```\n>    env:\n>      HOME: $HOME\n>    ```\n\n> It's actually very important for security that we don't pass *all* confidential variables to each plugin. Especially when running untrusted/unknown plugins.",
      "state": "closed",
      "created_at": "2022-05-13T00:05:21.817Z",
      "updated_at": "2022-05-30T13:37:40.783Z",
      "closed_at": "2022-05-30T13:37:40.765Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "urgency::low",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3485",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3485",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3485/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3485/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3485",
        "relative": "#3485",
        "full": "meltano/meltano#3485"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1364018,
      "relative_position": -7182
    },
    {
      "id": 108407865,
      "iid": 3482,
      "project_id": 7603319,
      "title": "Should project-set environment variables used inside Environment-level `env:` values be expanded?",
      "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n\n```yaml\nenvironments:\n- name: dev\n  env:\n    GOOGLE_APPLICATION_CREDENTIALS: $MELTANO_PROJECT_ROOT/.secrets/credentials.json\n```\n\nResults in the following error message when invoking dbt:\n\n```\nNo such file or directory: '$MELTANO_PROJECT_ROOT/.secrets/credentials.json\n```\n\n### What is the expected *correct* behavior?\n\n`$MELTANO_PROJECT_ROOT/.secrets/credentials.json` should get expanded into `/path/to/project/.secrets/credentials.json`\n\n### Steps to reproduce\n\nAdd a pair to the `environments.[].env` mapping whose value references `$MELTANO_PROJECT_ROOT`.\n\n### Relevant logs and/or screenshots\n\nNA\n\n\n### Possible fixes\n\nI think this can be fixed by expanding the environment variables in https://gitlab.com/meltano/meltano/-/blob/5e862f2941c1d83d92cc14f62ecd707183a987c7/src/meltano/core/settings_service.py#L47-48.\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team",
      "state": "closed",
      "created_at": "2022-05-12T03:33:03.450Z",
      "updated_at": "2022-05-17T17:34:42.813Z",
      "closed_at": "2022-05-17T17:34:42.790Z",
      "closed_by": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "labels": [
        "flow::Triage",
        "kind::Bug",
        "v2.0",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351599,
        "iid": 209,
        "group_id": 2524164,
        "title": "May 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:38:23.665Z",
        "updated_at": "2021-11-29T21:38:23.665Z",
        "due_date": "2022-05-31",
        "start_date": "2022-05-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/209"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 6,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3482",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3482",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3482/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3482/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3482",
        "relative": "#3482",
        "full": "meltano/meltano#3482"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": {
        "id": 56415,
        "iid": 55,
        "sequence": 2,
        "group_id": 2524164,
        "title": null,
        "description": null,
        "state": 3,
        "created_at": "2022-05-13T20:04:48.838Z",
        "updated_at": "2022-05-23T00:05:02.513Z",
        "start_date": "2022-05-16",
        "due_date": "2022-05-22",
        "web_url": "https://gitlab.com/groups/meltano/-/iterations/56415"
      },
      "health_status": null,
      "epic_issue_id": 1359985,
      "relative_position": -6669
    },
    {
      "id": 108256769,
      "iid": 3469,
      "project_id": 7603319,
      "title": "Don't send everything from `os.environ` into `container_spec` environment variables",
      "description": "I was experimenting with getting Superset running in a single container using the container spec https://github.com/pnadolny13/meltano_example_implementations/blob/0c0bbb8f62a6a592f0188fb0c887ce1f591844e9/meltano_projects/jaffle_superset/meltano.yml#L55.\n\nIt didnt work as expected at first and I noticed that we're passing the users full environment variables list to the container which ends up setting some things that dont work inside the container. For example the PATH/HOME of my laptop get passed into the container so it fails becuase it cant find the `/User/pnadolny/...` path. I got it working by figuring out the expected values of the container and setting them in the meltano.yml. So theyre set when the image was built, they get overridden by my laptop settings, then I override them explicitly using the `env` key.\n\nI'm not sure the implications because it is valuable to inject the meltano environment variables into the container but it causes unexpected behavior thats hard to track down because the list of env vars is so big.\n\n@edgarrmondragon @pandemicsyn does that make sense? Is there anything we can do to make this better UX?\n\n## Proposal\n\n(Per this comment: https://gitlab.com/meltano/meltano/-/issues/3469#note_940146914)\n\n1. Plugins pass to `container_spec` anything mapped via layers 2-6 in the #3173 model. In other words, they exclude the terminal's context and `.dotenv` but they *include* any `env:` declarations that are applicable to the Meltano project as a whole, or to the named environment.\n   - In Python terms, they don't inherit from `os.environ`, but they do inherit the meltano-defined env vars.\n1. Any env vars that are intended to be passed from terminal context must be declared in the project file in order to be passed down. For example, if for some reason you wanted to pass the `$HOME` env var from terminal context to plugin context, then you'd need to add it like this:\n\n   ```\n   env:\n     HOME: $HOME\n   ```\n\n### Container execution vs \"regular\" plugin execution\n\nWe would make this behavior change first on `container_spec` and (optionally) later to general plugin invocation as well.\n\nIt's actually very important for security that we don't pass *all* confidential variables to each container and plugin. Especially in a managed environment, we'll want this locked down to limit the impact of a malicious or hacked plugin.\n\ncc @tayloramurphy, @edgarrmondragon, @kgpayne \n\nBTW, I don't think this is big enough to need to be in ~\"v2.0\" but I do think we'll want it ahead of deploying the managed service.",
      "state": "closed",
      "created_at": "2022-05-09T16:06:49.335Z",
      "updated_at": "2022-05-30T13:35:58.156Z",
      "closed_at": "2022-05-30T13:35:58.134Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "flow::Triage",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 6,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3469",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3469",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3469/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3469/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3469",
        "relative": "#3469",
        "full": "meltano/meltano#3469"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1364020,
      "relative_position": -7695
    },
    {
      "id": 106927655,
      "iid": 3426,
      "project_id": 7603319,
      "title": "Allow defining required environment variables",
      "description": "Its common for projects to have a .env file with user or development secrets which is git ignored, along with a sample of that .env that is checked into git for users to know what environment variables to set when they clone the project.\n\nMeltano could allow you to set these as env vars as required so it can fail if they arent set instead of relying on users to read the sample file and export them properly. They can be set at the environment level to allow for variation based on environment.\n\nSquared Project Use Case:\n\nFor ELT development the Squared project has isolated environments inside Snowflake that are configured based on some local settings: \n- the [USER_PREFIX](https://gitlab.com/meltano/squared/-/blob/master/data/environments.meltano.yml#L116) set in the meltano.yml which is propagated throughout to create the isolation\n- the snowflake password thats stored once in the [.env](https://gitlab.com/meltano/squared/-/blob/master/data/.env.template#L18) so it can be shared by dbt/target-snowflake/great expectations.\n\nThe setup instructions tell the user to edit the meltano.yml and set the USER_PREFIX to their name (i.e. pnadolny) but thats not ideal because theres always a diff when trying to commit something. The other option is to remove it from the meltano.yml and set it in the .env file, which works but it not ideal because someone can easily forget to add it and without any validation the dbt configuration ends up writing to `USERDEV._PROD.TABLE_NAME` instead of `USERDEV.PNADOLNY_PROD.TABLE_NAME` because USERDEV is null and is not validated.\n\n\n\n```yaml\nenvironments:\n- name: userdev\n  config:\n    plugins:\n      extractors:\n        ...\n  required_env_vars:\n    - USER_PREFIX\n  env:\n    OTHER_HARD_CODED_ENVS: foo\n```\n\n```bash\n# .env file\nUSER_PREFIX=pnadolny\n```",
      "state": "closed",
      "created_at": "2022-04-20T18:09:54.653Z",
      "updated_at": "2022-05-30T13:31:09.213Z",
      "closed_at": "2022-05-30T13:31:09.189Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3426",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3426",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3426/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3426/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3426",
        "relative": "#3426",
        "full": "meltano/meltano#3426"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1309677,
      "relative_position": -5130
    },
    {
      "id": 106901427,
      "iid": 3425,
      "project_id": 7603319,
      "title": "Consider adding datetime environment variables to Project env",
      "description": "### Problem to solve\n(Summarize the problem we are trying to solve in the form of we need to do [A], so that [B] can [C])\n\nAs per example step 4. in #3397 running an initial EL during development is likely to be costly for many extractors. This can be mitigated by setting the `start_date` option supported by many Singer taps to limit the amount of data extracted. Today these can be hard-coded per environment, e.g.:\n\n```yaml\nenvironments:\n  - name: dev\n    config:\n      plugins:\n        extractors:\n          - name: tap-facebook\n            config:\n              start_date: 020-10-01T00:00:00Z\n```\n\nHowever this value must be manually managed and reviewed, to minimise the amount of data retrieved during development.\nTo help users manage this, Meltano could support a selection of common relative datetime environment variables. e.g.:\n\n```yaml\nenvironments:\n  - name: dev\n    config:\n      plugins:\n        extractors:\n          - name: tap-facebook\n            config:\n              start_date: ${MELTANO_DT_YESTERDAY}\n```\n\nSome common choices would likely include:\n\n- `MELTANO_DT_YESTERDAY`\n- `MELTANO_DT_LAST_WEEK`\n- `MELTANO_DT_LAST_MONTH`\n- `MELTANO_DT_LAST_YEAR`\n\n### Target audience\n(For whom are we doing this? Include a persona)\n\nDevelopers working on EL pipelines using Meltano.\n\n### Further details\n(Include use cases, benefits, and/or goals)\n\nThis may also be useful in conjunction with templates in dbt for limiting queries to the same timeframes as the EL step, as per the example in dbts Best Practices [docs](https://docs.getdbt.com/docs/guides/best-practices#limit-the-data-processed-when-in-development), modified to use the same env var:\n\n```sql\nselect\n  *\nfrom event_tracking.events\n{% if target.name == 'dev' %}\nwhere\n  created_at >= {{ env_var('MELTANO_DT_YESTERDAY') | \"dateadd('day', -1, current_date)\" }} \n{% endif %}\n```\n\n### Proposal\n(How are we going to solve the problem? Try to include the user journey)\n\nThis could be solved in a number of ways:\n\n- Add a number of common relative datetimes as Project-wide environment variables to Meltano. This is possible in Meltano as it is today.\n- Add a datetime macro for use in templated `meltano.yml` project files. Templating is not yet supported, but if/when it is the same outcome could be achieved with macros. e.g. \n    \n    `start_date: {{ (datetime.now() - relativedelta(days=1)).strftime('%Y-%m-%dT%H:%M:%S.%f') }}`\n\n### What does success look like, and how can we measure that?\n(Define both the success metrics and acceptance criteria. Note that success metrics indicate the desired business outcomes, while acceptance criteria indicate when the solution is working correctly. If there is no way to measure success, link to an issue that will implement a way to measure this)\n\n- Users have easy relative time constants to use across plugin types in Meltano.\n\n### Reasons not to Build\n\n- [Time is hard](https://levelup.gitconnected.com/why-is-programming-with-dates-so-hard-7477b4aeff4c)\n- Datetime formatting (UTC) is not guaranteed to be consistent across taps (somewhat mitigated by the SDK) and other plugins\n\n### Regression test\n(Ensure the feature doesn't cause any regressions)\n- [ ] Write adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team\n\n### Links / references\n\n_Please note that this was taken from GitLab, to be changed accordingly_",
      "state": "closed",
      "created_at": "2022-04-20T11:22:29.971Z",
      "updated_at": "2022-05-30T13:31:02.850Z",
      "closed_at": "2022-05-30T13:31:02.825Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3425",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3425",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3425/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3425/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3425",
        "relative": "#3425",
        "full": "meltano/meltano#3425"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1371438,
      "relative_position": -8208
    },
    {
      "id": 106061008,
      "iid": 3374,
      "project_id": 7603319,
      "title": "Make `namespace` optional in plugin definitions, auto-generate if missing",
      "description": "As of now, it feels like we could confidently calculate `namespace` as `plugin_name.replace(\"-\", \"_\").lower()` or similar.\n\nFor reference: https://gitlab.com/meltano/meltano/blob/master/src%2Fmeltano%2Fcore%2Fbundle%2Fdiscovery.yml\n\nDo we still need this as a required field in every plugin definition? When missing it seems to result in difficult to diagnose failure messages such as https://gitlab.com/meltano/meltano/-/issues/3357#note_900121643.\n\ncc @tayloramurphy and @DouweM, since I think each of you may have more history on this functionality and when/if we'd still want namespace as a distinct field.\n\ncc @pandemicsyn - Logged here as discussed in our 1:1.\n\ncc @pnadolny13 since you've been working on discovery.yml plugin definition aspects in meltano and the hub.",
      "state": "closed",
      "created_at": "2022-04-04T21:28:56.279Z",
      "updated_at": "2022-05-30T13:25:24.045Z",
      "closed_at": "2022-05-30T13:25:24.018Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2590665,
        "iid": 218,
        "group_id": 2524164,
        "title": "July 2022",
        "description": "",
        "state": "active",
        "created_at": "2022-05-02T14:52:41.200Z",
        "updated_at": "2022-05-02T14:52:41.200Z",
        "due_date": "2022-07-31",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/218"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 12,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3374",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3374",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3374/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3374/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3374",
        "relative": "#3374",
        "full": "meltano/meltano#3374"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1289159,
      "relative_position": -4617
    },
    {
      "id": 103920352,
      "iid": 3299,
      "project_id": 7603319,
      "title": "Utilities config not supported in environments",
      "description": "<!---\nPlease read this!\n\nBefore opening a new issue, make sure to search for keywords in the issues\nfiltered by the \"regression\" or \"bug\" label and verify the issue you're about to submit isn't a duplicate.\n\nIf you are submitting an issue with a tap, please include:\n\n- account details\n- target details\n- entities selected  with meltano select (if you have selected any entities), as the bug may be related to a specific entity\n- the full elt command you are running\n- full output of the meltano elt command. Logs can get pretty long, so you can add the full log as a snippet in the Meltano project and add a link in the issue.\n--->\n\n### What is the current *bug* behavior?\n_What is happening now?_\n\nI can use the `config` key to set values for a utility in my main meltano.yml which get loaded to my environment variables but when I try to do this in a meltano environment the keys are not loaded to environment variables.\n\nAre only certain plugin types supported within environments? extractors/loaders/transformers all work fine for me but not utilities.\n\n### What is the expected *correct* behavior?\n_What should be happening?_\n\nI should be able to override configs for utilities in my environments configurations.\n\n\n### Steps to reproduce\n_How one can reproduce the issue?_\n\nAdd utility, add utility to environment, set any config in the top level utility and another in the environment level config. Run invoke with --log-level=debug and see that only the top level config is being set as an environment variable.\n\n### Relevant logs and/or screenshots\n_Please use code blocks (\\`\\`\\`) to format console output_\n\n\n\n### Possible fixes\n_If you can, link to the line of code that might be responsible for the problem or suggest a fix_\n\n\n\n### Further regression test\n_Ensure we automatically catch similar issues in the future_\n\n- [ ] Write additional adequate test cases and submit test results\n- [ ] Test results should be reviewed by a person from the team",
      "state": "closed",
      "created_at": "2022-03-01T21:59:19.734Z",
      "updated_at": "2022-03-08T23:25:12.576Z",
      "closed_at": "2022-03-02T23:11:24.283Z",
      "closed_by": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "labels": [
        "Awaiting Action::Author",
        "flow::Triage",
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286179,
        "iid": 205,
        "group_id": 2524164,
        "title": "March 2022",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:21:51.307Z",
        "updated_at": "2022-04-01T16:51:00.402Z",
        "due_date": "2022-03-31",
        "start_date": "2022-03-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/205"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 10,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3299",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 2,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3299",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3299/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3299/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3299",
        "relative": "#3299",
        "full": "meltano/meltano#3299"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1155755,
      "relative_position": -4104
    },
    {
      "id": 102291895,
      "iid": 3241,
      "project_id": 7603319,
      "title": "Provide more control over which plugins are installed by default (faster Prod installs without local/dev plugins)",
      "description": "As part of https://gitlab.com/meltano/meltano/-/issues/3231#note_840290255 we discussed having a way to flag plugins as non-prod plugins so our docker images dont get unnecessarily big filled with dev dependencies. Right now you'd have to explicitly run each install to exclude certain plugins, its not the worst experience but a flag like this would make it cleaner.\n\n> Additionally it might be helpful to flag plugins somehow as prod installable, like I dont need SqlFluff, permifrost, superset, Airflow, when packaging so I need to [install each explicitly](https://gitlab.com/meltano/squared/-/merge_requests/55/diffs).\n\n<details><summary>Click to expand background</summary>\n\n@edgarrmondragon had suggested:\n\n>[Poetry's dependency groups](https://python-poetry.org/docs/master/managing-dependencies#dependency-groups) and [pip extras](https://www.python.org/dev/peps/pep-0508/#extras) come to mind as inspiration. Wdyt?\n\nLike poetry `poetry install --no-dev`. Maybe we can use the environments feature for this. Like `exclude_install` could be set in an environment config so in the dev environment all are installed but in prod certain are excluded, defaulting to install all if not defined. Then `meltano --environment=prod install` would exclude the appropriate plugins.\n\n```yaml\nenvironments:\n- name: prod\n  exclude_install:\n    - - sqlfluff\n      - permifrost\n      - airflow\n      - superset\n  config:\n    plugins:\n      extractors:\n      - name: tap-google-analytics\n        config:\n          start_date: '2021-11-08'\n```\n\n</details>\n\n-----\n\n## Updated proposal: 2022-04-25 from AJ\n\n* maintain the current behavior with `meltano install` installing everything\n* Enable `meltano install` to accept a flag specifying the environment\n\n<details><summary>Click to expand</summary>\n\n```\nmeltano install --environment=prod\n```\n\nThis would only install plugins that are explicitly included in the environment with the minimum configuration required being the name:\n\n```yml\nenvironments:\n- name: prod\n  config:\n    plugins:\n      extractors:\n      # This is being customized so it definitely should be installed\n      - name: tap-google-analytics\n        config:\n          start_date: '2021-11-08'\n      # These are not customized but their reference here triggers them\n      # to be installed when `prod` environment is requested:\n      - name: tap-spotify\n      - name: tap-gitlab\n      loaders:\n      # No changes to the loader but we list it anyway:\n      - name: target-snowflake\n      # ...\n```\n\n</details>\n\n## Update (2022-04-27)\n\nAn alternate proposal we came up with here: https://gitlab.com/meltano/meltano/-/issues/3241#note_925253179\n\n1. Add support for `--exclude <plugin-name>` (or `-E <plugin-name>`) which could be added any number of times, either after `meltano install` (which otherwise installs *everything*) and/or `meltano install <plugin-type>` (which otherwise installs everything under a specific category)\n1. Allow multiple plugins of different types to be specified inline (just like `pip install` does): `meltano install tap-github tap-slack target-snowflake dbt`\n    * If a name collision occurs between plugins, we'd install all plugins with the give name.",
      "state": "closed",
      "created_at": "2022-02-11T19:24:04.445Z",
      "updated_at": "2022-05-30T10:17:07.176Z",
      "closed_at": "2022-05-30T10:17:07.154Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Needs Refinement",
        "Office Hours::Discussed",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 24,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3241",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3241",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3241/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3241/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3241",
        "relative": "#3241",
        "full": "meltano/meltano#3241"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1115971,
      "relative_position": -3591
    },
    {
      "id": 102165182,
      "iid": 3226,
      "project_id": 7603319,
      "title": "Support `--store=keyring` in `meltano config`",
      "description": "As proposed by Derek [in Slack](https://meltano.slack.com/archives/CFG3C3D1Q/p1644431033442989), we could use the [keyring](https://pypi.org/project/keyring/) Python library to store secrets in native OS-level keyrings.\n\nWould add this option alongside others listed in https://docs.meltano.com/reference/command-line-interface#config:\n\n```console\nmeltano config <plugin> set --store=keyring <name> <value>\n```\n\n![image](/uploads/5b404fa0765f20fe78b80c2a5c6daf79/image.png)",
      "state": "closed",
      "created_at": "2022-02-09T18:41:53.274Z",
      "updated_at": "2022-05-30T10:15:18.788Z",
      "closed_at": "2022-05-30T10:15:18.767Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3226",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3226",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3226/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3226/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3226",
        "relative": "#3226",
        "full": "meltano/meltano#3226"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1110173,
      "relative_position": -3078
    },
    {
      "id": 102009329,
      "iid": 3220,
      "project_id": 7603319,
      "title": "Allow plugin names to be aliased",
      "description": "As per [this discussion](https://gitlab.com/meltano/meltano/-/merge_requests/2517#note_834526396), not all plugin executables follow the Singer convention of using dash separators. e.g. `great_expectations` defined in the following way:\n\n```yaml\n  - name: great-expectations\n    namespace: great_expectations\n    pip_url: great_expectations\n    executable: great_expectations\n    settings:\n      - name: ge_home\n        value: $MELTANO_PROJECT_ROOT/utilities/great_expectations\n        env: GE_HOME\n```\n\nproduces this user experience:\n\n![Screenshot_2022-02-07_at_12.43.13](/uploads/9f5a433c0b3aafb2e07450ef74e15c59/Screenshot_2022-02-07_at_12.43.13.png)\n\nAllowing aliasing of the plugin name `great-expectations` to `great_expectations` (i.e. accepting either form) would improve the experience for users familiar with either convention.\n\n```yaml\n  - name: great-expectations\n    # define alternate name by which the plugin can be invoked\n    alias: great_expectations\n    namespace: great_expectations\n    pip_url: great_expectations\n    executable: great_expectations\n    settings:\n      - name: ge_home\n        value: $MELTANO_PROJECT_ROOT/utilities/great_expectations\n        env: GE_HOME\n```",
      "state": "closed",
      "created_at": "2022-02-07T16:17:58.024Z",
      "updated_at": "2022-05-30T10:14:34.654Z",
      "closed_at": "2022-05-30T10:14:34.639Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "Hack Day",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3220",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3220",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3220/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3220/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3220",
        "relative": "#3220",
        "full": "meltano/meltano#3220"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1102677,
      "relative_position": -5643
    },
    {
      "id": 101849819,
      "iid": 3213,
      "project_id": 7603319,
      "title": "Transform (DBT) settings of kind:password not setting in .env",
      "description": "**Setup**\n```\n  transformers:\n  - name: dbt\n    pip_url: dbt-postgres==1.0.0\n    settings:\n    - name: password\n      kind: password\n    config:\n      target: postgres\n      host: localhost\n      port: 5432\n      user: postgres\n      dbname: postgres\n```\n\n**Run**\n1. meltano config dbt set password abcde\n\nMeltano will place the password in `meltano.yml` .\n\n**Fix**\n```\n  transformers:\n  - name: dbt\n    namespace: dbt_postgres\n    pip_url: dbt-postgres==1.0.0\n    settings:\n    - name: password\n      kind: password\n    config:\n      target: postgres\n      host: localhost\n      port: 5432\n      user: postgres\n      dbname: postgres\n```\n\n**Notes**\n- Haven't tried this before with transforms. Thought came up after the chat at office hours that I want to run dbt standalone so why not just pass in the configs I need (even if I\"m duplicating them for another target and tap. ) \n- Use case is I run dbt standalone, and I'd rather keep profiles.yml in my meltano project in order to define configuration values in one place.  \n\n\n\nSlack thread: https://meltano.slack.com/archives/C01TCRBBJD7/p1643923463011509",
      "state": "closed",
      "created_at": "2022-02-03T21:40:37.546Z",
      "updated_at": "2022-05-30T10:13:40.427Z",
      "closed_at": "2022-05-30T10:13:40.402Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 6,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3213",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3213",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3213/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3213/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3213",
        "relative": "#3213",
        "full": "meltano/meltano#3213"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1099101,
      "relative_position": -2565
    },
    {
      "id": 101808386,
      "iid": 3211,
      "project_id": 7603319,
      "title": "Resolve ambiguity in current supported ways to set environment variables inside the plugin env via meltano.yml",
      "description": "# Meltano Configuration\n\nConfiguration management is a central part of the value provided to users of Meltano. Intention:\n\n> Meltano is responsible for managing the configuration of all of a project's plugins. It knows what settings are supported by each plugin, and how and when different types of plugins expect to be fed that configuration.\n\n## Use Cases\n\n### Discovery\n\nDiscovery is how Meltano \"knows what settings are supported by each plugin, and how and when different types of plugins expect to be fed that configuration\". This is done by:\n\n- Defining the settings available/expected to be configured for a given plugin.\n- Defining the environment variables available/expected to be configured for a given plugin via the `env` settings [key](https://gitlab.com/meltano/meltano/-/blob/master/schema/discovery.schema.json#L653).\n- Defining default values for settings via the `value` [key](https://gitlab.com/meltano/meltano/-/blob/master/schema/discovery.schema.json#L598). Note, default values can contain templated string references to environment variables (e.g. `$MELTANO_PROJECT_ROOT/utilities/great_expectations`).\n\t- Which environment is `MELTANO_PROJECT_ROOT` expected to be in? The Meltano runtime or the plugin runtime? \ud83e\udd2f \n- Defining env var maps to predictable names via the `env_aliases` [key](https://gitlab.com/meltano/meltano/-/blob/master/schema/discovery.schema.json#L661) for reuse across types of plugins (now marked as deprecated \ud83e\udd26\u200d\u2642\ufe0f). (e.g. `TAP_POSTGRESS_HOST` > `PG_ADDRESS`).\n- Defining settings aliases via the `aliases` [key](https://gitlab.com/meltano/meltano/-/blob/master/schema/discovery.schema.json#L581) as alternative names by which the setting can be configured in `meltano.yml` and the CLI. This is often done to 'prettify' or make uniform with other plugin variants (e.g. `postgres_host` > `host`). **Note:* Meltano does not currently look for env vars of the form `<plugin name>_<alias name>` by default (though sunch env vars can be specified as `env_aliases` manually), nor does it appear to check or warn of clashes as the result of settings referenced in multiple ways (by its `name`, `aliases` or `env_aliases`).\n\nIn addition to the behaviours implemented as part of discovery, Meltano has 2 other builtin mechanisms for handling/discovering settings:\n\n- [Pipeline environment variables](https://docs.meltano.com/guide/integration#pipeline-environment-variables) define settings that are passed from the environment of one plugin to the next in a pipeline (e.g. `extractor>loader>transformer`).\n- [Plugin extras](https://docs.meltano.com/guide/configuration#plugin-extras) define settings used to configure the behaviour of specific plugin types _before_ and _after_ 3rd party code is invoked. This works by passing `plugin_extra` settings for use by all subclasses of [`BasePlugin`](https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/plugin/base.py#L246) (e.g. extras available to the [`SingerTap`](https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/plugin/singer/tap.py#L104) allow users to [override](https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/plugin/singer/tap.py#L302) the `catalog.json` path used during Tap invocation).\n\n### Configuration\n\nConfiguration is how end-users populate discovered settings with their own values. Config is done by:\n\n- Using the `meltano config ...` CLI and `meltano.yml` to configure the above settings by name.\n- Using environment variables in the Meltano runtime to configure the above settings via a `<PLUGIN NAME>_<SETTING_NAME>` env var naming convention. Environment variables can either be `export`'d into the Meltano runtime or coded in a `.env` file automatically discovered by Meltano.\n-  Using values stored in the Meltano [system database](https://docs.meltano.com/concepts/project#system-database) to configure settings by name (also available through the UI).\n-  Using the `env:` key of the [environments](https://docs.meltano.com/concepts/environments) feature to inject arbitrary environment variables into a plugins environment. These env vars will also be passed to subsequent stages in a pipeline according to the [pipeline environment variables](https://docs.meltano.com/guide/integration#pipeline-environment-variables) feature.\n\t- How are duplicates/clashes handled?\n-  Setting env vars in the Meltano runtime environment matching names specified in setting `env:` and `env_aliases:` discovery keys (that do not have to conform to the `<PLUGIN NAME>_<SETTING_NAME>` conventions) to inject values into the plugins environment. **Note:** this is now an undesired behaviour, as per [#2984](https://gitlab.com/meltano/meltano/-/issues/2984).\n-  Referencing provided [pipeline environment variables](https://docs.meltano.com/guide/integration#pipeline-environment-variables) in plugin tools code (e.g. the [provided profiles.yml](https://gitlab.com/meltano/files-dbt/-/blob/master/bundle/transform/profile/profiles.yml))\n-  Using `plugin_extras` to configure the pre and post invocation behaviours of plugins.\n-  Mapping a setting to an environment variable by adding a `my_setting: ${MY_ENV_VAR}` mapping under the `config:` block in `meltano.yml` or via the CLI using `meltano config <plugin> set my_setting \"${MY_ENV_VAR}\"`.\n\t- Which environment is `MY_ENV_VAR` expected to be in? The Meltano runtime or the plugin runtime? \ud83e\udd2f \n\n## FAQ's\n\n- What is the difference between `config` and `settings`?\n\n\tSettings are specified as part of plugin definitions for the purposes of discovery. Config is the mechanism by which the fields described as settings are populated with values.\n\n\tWhilst `settings` usually only appear in `discovery.yml`, custom plugins added in `meltano.yml` places `settings` and `config` in the same view, which is completely baffling.\n\n- How does `config` specified in `meltano.yml` arrive in files inside a plugins runtime? e.g. Singers' `config.json` or dbts' `profiles.yml`?\n\n\tFor Singer the `SingerPlugin` class `src/meltano/core/plugin/singer/base.py` has a method (decorated as a `before_configure` Hook) for [writing a valid config.json file]() and another for [removing the file after](). Config arrives via an instance of the `PluginSettingsService` instantiated with both project and plugin.\n\t\n\tFor dbt (specifically `profiles.yml` the approach is slightly different. dbt supports the retrieval of env vars within its config files (using jinja templating syntax). Therefore we need only match the env vars specified in the [provided profiles.yml](https://gitlab.com/meltano/files-dbt/-/blob/master/bundle/transform/profile/profiles.yml) to those available inside the Transformers environment. To smooth over this injection of env vars, Meltano makes available all the env vars provided to the Loader available to the Transformer as well, as part of the [pipeline environment feature](https://docs.meltano.com/guide/integration#pipeline-environment-variables). Currently we prescribe env vars of the form `PG_*` in the file bundle, but any matching env var name could be used (e.g. `TARGET_POSTGRES_*` to match the Loader env var convention).\n\n- How do we determine what `settings`, specified in discovery, should be environment variables vs. which should be injected into files?\n\n\tThis is implemented using the `env:` and `env_aliases:` keys in `discovery.yml`. Details as per Douwes comment [here]:\n\t\n\t> The behaviour around `env` and `env_aliases` is implemented in [`SettingsService.setting_env_vars`](https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/plugin/settings_service.py#L63), which takes a `for_writing` boolean (which is `False` by default). Writing here means writing into the plugin's execution env, not-writing means reading from Meltano's execution env to populate a setting (that may then be written into the plugin execution env later). That `for_writing` flag is passed to [`SettingDefinition.env_vars`](https://gitlab.com/meltano/meltano/-/blob/master/src/meltano/core/setting_definition.py#L174) as `include_custom`. Following the logic there shows that when reading from the env, only the auto generated `<prefix>_<name>` is checked, and when writing into the env, env and env_aliases are used as well. I think the logic is that we want Meltano users to always use `<prefix>_<name>` consistently, but the plugin itself may expect a different env var.\n\t\n\tThis description does not appear to explain the case described by [#2984](https://gitlab.com/meltano/meltano/-/issues/2984), which sparked our efforts to deprecate `env:` and `env_aliases:` in the first place \ud83e\udd37\u200d\u2642\ufe0f\n\n## Proposed Next Steps\n\n- To resolve  [#2984](https://gitlab.com/meltano/meltano/-/issues/2984) I believe we should remove the ability of the `SettingsService` to retrieve for injection any env vars _other than_ those matching the `<plugin name>_<setting name>` convention from the Meltano runtime environment. This meets Douwes intent that:\n\n\t> we want Meltano users to always use `<prefix>_<name>` consistently, but the plugin itself may expect a different env var.\"\n\n- Implement a check to determine if any arbitrary env vars configured in `environments.[].env` do not clash with `env:` and `env_aliases:` defined in discovery. Warn or error if clashes are found.\n\n- Provide guidance/docs on the usage on `env:` and `env_aliases:` keys in discovery. AJ suggests:\n\t\n\t> General plugins vs Singer plugins: General plugins must get some of there config from env vars; Singer plugins should not need env vars - but some do. Following from this:\n\n\t> - It's a healthy pattern for General plugins to declare `env:` entries to pass along settings to the plugin context (but probably not `env_aliases:`).\n\t> - It's a discouraged pattern for Singer plugins to declare `env:` entries. (We'll support if needed, but we should keep an eye on them and this should be the exception rather than the rule.)\n\t> - To avoid confusion around which env entries are needed for Singer plugins to function - versus which are convenient aliases, I think we should remove `env_alias:` entries from Singer plugins, replacing them with env: entries and an explanatory comment with issue link perhaps.\n\n### Description V1\n\nQuick summary of recent findings:\n\n1. `env_aliases` / `env` - These are the same functionally. (New info to everyone!) - these fit the description as recently added in the JSON Schema for `env:`:\n    - > `An environment variable that will be initialized with the setting's value whenever the plugin is invoked. This is used to inject environment variables into the plugin's execution context. If the named environment variable is already defined at runtime, Meltano will use the passed value from context instead of the configured value.`\n    - Essentially a two-way read and write to/from the env variable.\n2. The `env_alias` and `env` entries also have a special role in seeding `dbt_profiles.yml`. Specifically `PG_ADDRESS`, etc. I think (to confirm?) this is part of the reason dbt cannot be run on its own: because if the target wasn't invoked, those settings don't exist.\n3. Settings aliases - newly discovered! Similar to `env_aliases` but at the setting level.\n    - To be confirmed: if these are compatible with env injection in the form `<PLUGIN_NAME>_<SETTING_ALIAS>`. More in #3209.\n4. `config` vs `settings`: `settings` are the plugin definition (optionally with default values) and `config` is one project's settings values.\n5. When a user wants to map a setting to an environment variable, the recommended way of doing so is probably to add a `my_setting: ${MY_ENV_VAR}` mapping under the `config:` block.\n6. General plugins vs Singer plugins: General plugins _must_ get some of there config from env vars; Singer plugins should not need env vars - but some do. Following from this:\n    - It's a healthy pattern for General plugins to declare `env:` entries to pass along settings to the plugin context (but probably not `env_aliases:`).\n    - It's a discouraged pattern for Singer plugins to declare `env:` entries. (We'll support if needed, but we should keep an eye on them and this should be the exception rather than the rule.)\n    - To avoid confusion around which env entries are needed for Singer plugins to function - versus which are convenient aliases, I think we should remove `env_alias:` entries from Singer plugins, replacing them with `env:` entries and an explanatory comment with issue link perhaps.\n\n------------------------\n\nAs per office hours 2022/02/02, the current mechanism of declaring an environment variable to be populated within plugin `settings` using `env:` and `env_alias:` causes confusion to even experienced Meltano users.\n\nFrom the jsonschema:\n\n```json\n\"env\": {\n    \"type\": \"string\",\n    \"description\": \"An environment variable that will be initialized with the setting's value whenever the plugin is invoked. This is used to inject environment variables into the plugin's execution context. If the named environment variable is already defined at runtime, Meltano will use the passed value from context instead of the configured value.\",\n    \"examples\": [\n        \"DBT_PROFILES_DIR\",\n        \"GE_HOME\"\n    ]\n}\n\n\"env_aliases\": {\n    \"type\": \"array\",\n    \"description\": \"Deprecated. Use to delegate alternative environment variables for overriding this setting's value\",\n    \"examples\": [\n        \"TAP_ACCOUNT_ID\",\n        \"TAP_ACCOUNT_IDENTIFIER\"\n    ],\n    \"items\": {\n        \"type\": \"string\"\n    }\n}\n```\n\nSpecifically, from `env`,:\n\n> If the named environment variable is already defined at runtime, Meltano will use the passed value from context instead of the configured value.\n\nThis causes unexpected behaviours for users not aware of this dual behaviour. We propose that, in stead of relying on `env:` for both purposes (sourcing values to inject _and_ determining the target env var name to inject into), we simply remove the sourcing behaviour. This would mean Meltano would no longer search its runtime environment for matching env var names to retrieve values, effectively making any settings with `env:` specified an \"environment variable type setting\" (as suggested by @tayloramurphy [here](https://gitlab.com/meltano/meltano/-/merge_requests/2505#note_829519083)). Sourcing of values would only be possible via the standard mechanisms; explicit `config:` or env vars in the Meltano runtime of the form `<plugin name>_<setting name>`.\n\n`env_aliases` might be kept to allow one setting to be mapped to multiple env vars. E.g.\n\n```yaml\nsettings:\n- name: aws_profile\n  env: AWS_PROFILE\n  env_aliases: [AWS_DEFUALT_PROFILE]\n```\n\nor both could be replaced with an array-type `env_vars:` e.g.:\n\n```yaml\nsettings:\n- name: aws_profile\n  env_vars: [AWS_PROFILE, AWS_DEFUALT_PROFILE]\n```\n\nIt is also worth considering if these settings should be injected as keys in config files either. Not doing so would further increase the specificity of the settings function as \"an environment variable created from a Meltano setting\".\n\n### Possible Challenges\n\n- Users can also set environment variables directly using the `env:` key in the `--environment` feature. This produces two ways to achieve the same outcome, and may cause conflicts and confusion to users. This can be handled with a resolution order (preferring settings above environment variables) and/or by warning/erroring if the same env var is specified by the two methods.",
      "state": "closed",
      "created_at": "2022-02-03T12:04:44.695Z",
      "updated_at": "2022-04-29T21:13:11.414Z",
      "closed_at": "2022-04-29T21:13:11.395Z",
      "closed_by": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "labels": [
        "Documentation",
        "Needs Refinement",
        "flow::Triage",
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351598,
        "iid": 208,
        "group_id": 2524164,
        "title": "April 2022",
        "description": "",
        "state": "closed",
        "created_at": "2021-11-29T21:38:06.797Z",
        "updated_at": "2022-05-02T14:53:27.097Z",
        "due_date": "2022-04-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/208"
      },
      "assignees": [
        {
          "id": 1942272,
          "username": "tayloramurphy",
          "public_email": "",
          "name": "Taylor A Murphy",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
          "web_url": "https://gitlab.com/tayloramurphy"
        }
      ],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "user_notes_count": 2,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3211",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3211",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3211/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3211/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3211",
        "relative": "#3211",
        "full": "meltano/meltano#3211"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1095336,
      "relative_position": -2052
    },
    {
      "id": 101047911,
      "iid": 3177,
      "project_id": 7603319,
      "title": "Problem with `env` key names at the plugin level",
      "description": "Based on a thread from https://gitlab.com/meltano/meltano/-/issues/3173#note_817409586 and from https://gitlab.com/meltano/meltano/-/merge_requests/2489#note_808785679, it would be ideal to be able to set `env` keys at the plugin level vs the current state where it can only be done at the environment level.\n\nThe `env` key does seem to work at the plugin level but it prefixes the key in a way that makes it not useful (i.e. `TAP_SLACK__ENV_*`).\n\nIdeally in combination with https://gitlab.com/meltano/meltano/-/issues/3173#note_817409586 we will be able to override environment variables in descending order, where the plugin `env` key is the lowest level and takes precedence. An environment plugin `env` takes precedence over a top level plugin `env`.\n\n@aaronsteers wdyt?",
      "state": "closed",
      "created_at": "2022-01-21T14:37:59.216Z",
      "updated_at": "2022-05-30T10:09:18.141Z",
      "closed_at": "2022-05-30T10:09:18.124Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351599,
        "iid": 209,
        "group_id": 2524164,
        "title": "May 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:38:23.665Z",
        "updated_at": "2021-11-29T21:38:23.665Z",
        "due_date": "2022-05-31",
        "start_date": "2022-05-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/209"
      },
      "assignees": [],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3177",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 4,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3177",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3177/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3177/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3177",
        "relative": "#3177",
        "full": "meltano/meltano#3177"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": {
        "id": 56416,
        "iid": 56,
        "sequence": 3,
        "group_id": 2524164,
        "title": null,
        "description": null,
        "state": 3,
        "created_at": "2022-05-13T20:04:48.839Z",
        "updated_at": "2022-05-30T00:05:02.370Z",
        "start_date": "2022-05-23",
        "due_date": "2022-05-29",
        "web_url": "https://gitlab.com/groups/meltano/-/iterations/56416"
      },
      "health_status": null,
      "epic_issue_id": 1069282,
      "relative_position": -1539
    },
    {
      "id": 100379362,
      "iid": 3149,
      "project_id": 7603319,
      "title": "Alternative yaml config convention",
      "description": "As the Meltano feature-set and average project size grows, managing configuration as either a single large yaml document or with explicit `include_paths` imports may impose an upper-limit on readability/maintainability. This might be overcome by taking a similar approach to Helm or dbt, whereby all files of a certain type below a specified directory are assumed to contain Meltano config objects and are parsed (and therefore referencable). Following the Helm/Kubernetes resource-centric model (and resurrecting and repurposing the `.m5o` file type?), a Loader Plugin might look like:\n\n```yaml\n# loaders/athena.m5o\n---\nversion: 1\nkind: Loader\nmetadata:\n  name: target-athena\n  namespace: target_athena\nspec:\n  pip_url: git+https://github.com/pnadolny13/target-athena.git@bump_sdk_version\n  settings:\n  - name: aws_access_key_id\n    kind: password\n  - name: aws_secret_access_key\n    kind: password\n  - name: s3_bucket\n    kind: string\n  - name: athena_database\n    kind: string\n  - name: s3_staging_dir\n    kind: string\n  - name: work_group\n    kind: string\n  - name: add_record_metadata\n    kind: boolean\n  - name: flatten_records\n    kind: boolean\n  - name: object_format\n    kind: string\n  config:\n    aws_region: us-east-2\n    aws_access_key_id:\n      secretKeyRef:\n        name: athena-secrets\n        key: AWS_ACCESS_KEY_ID\n    aws_secret_access_key:\n      secretKeyRef:\n        name: athena-secrets\n        key: AWS_SECRET_ACCESS_KEY\n    object_format: jsonl\n    temp_dir: .output\n    add_record_metadata: true\n    flatten_records: true\n```\n\nAdding new plugins off the same kind might result in either a new file (sharing the name of the plugin) or a new document in an existing `loaders.m5o` file (using the `---` yaml document syntax). Each resource type would have its own schema definition and be validatable. Plugins registering new resource types will be expected to supply this schema.\n\nThis approach lends itself well to [Inventory](https://gitlab.com/meltano/meltano/-/issues/3108) too:\n\n```yaml\n# inventory/snowflake.m5o\n---\nversion: 1\nkind: Warehouse\nmetadata:\n  name: snowflake\n  label: snowflake-prod\nspec:\n  account: \"<snowflake account name>\"\n  default_database: \"<snowflake database name>\"\n  region: \"<warehouse region>\"\n  warehouse: \"<snowflake warehouse name>\"\n\n---\nversion: 1\nkind: WarehouseConnection\nmetadata:\n  name: snowflake-connection-dbt\n  label: snowflake-prod\nspec:\n  warehouse: snowflake # references the warehouse above\n  database: \"analytics\"\n  username: \"dbt\"\n  password:\n    secretKeyRef:\n      name: snowflake-secrets\n      key: password\n  role: \"dbt\"\n  session_parameters: \"<session level parameters>\"\n```",
      "state": "closed",
      "created_at": "2022-01-10T17:32:04.516Z",
      "updated_at": "2022-05-30T10:05:26.139Z",
      "closed_at": "2022-05-30T10:05:26.119Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Hack Day",
        "Office Hours::To Discuss",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2351602,
        "iid": 211,
        "group_id": 2524164,
        "title": "Q3-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:41.523Z",
        "updated_at": "2021-11-29T21:39:41.523Z",
        "due_date": "2022-09-30",
        "start_date": "2022-07-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/211"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 6,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3149",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3149",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3149/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3149/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3149",
        "relative": "#3149",
        "full": "meltano/meltano#3149"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1049650,
      "relative_position": -1026
    },
    {
      "id": 98742531,
      "iid": 3112,
      "project_id": 7603319,
      "title": "Support referencing across YAML config (e.g. jinja suppport)",
      "description": "In order to support `resource` references (#3108), it would be advantageous to support some kind of referencing or templating capability within the Meltano config. YAML reference support is available, but not as full featured enough to allow attribute selection or string formatting (e.g. to compile a resource URI from component user, password, host etc.).\n\nAs Meltano is built in python, Jinja comes to mind as an obvious choice. Meltano could provide a set of built-in macros for referencing config elements, akin to the `ref` and `source` macros provided in `dbt`.\n\n```yaml\n# Example use\ninventory:\n  prod-snowflake-load:\n    type: snowflake_warehouse\n    properties:\n      account: \"<snowflake account name>\"\n      database: \"<snowflake database name>\"\n      region: \"<warehouse region>\"\n      warehouse: \"<snowflake warehouse name>\"\n      username: \"<user name>\"\n      password: \"<password>\" # ideally this would be a ref to a secret value added separately, or reference an env var\n      role: \"<snowflake role>\"\n      session_parameters: \"<session level parameters>\"\n\n# Example usage\nenvironments:\n- name: prod\n  config:\n    plugins:\n      loaders:\n      - name: target-snowflake\n        config:\n          # Macro usage: `ref('<config object key path>', '<config object attribute>')`\n          db_name: \"{{ ref('inventory.prod-snowflake-load', 'database') }}\" # References resources defined above\n          account: \"{{ ref('inventory.prod-snowflake-load', 'account') }}\"\n          user: \"{{ ref('inventory.prod-snowflake-load', 'username') }}\"\n          password: \"{{ ref('inventory.prod-snowflake-load', 'password') }}\"\n          role: \"{{ ref('inventory.prod-snowflake-load', 'role') }}\"\n          load_schema: \"${TAP_NAMESPACE}_raw\"  # Templated string, value pulled from env var at tap execution\n```\n\n### CLI Implications\n\nThis will have implications for `meltano config <plugin> set <name> <value>`. Whilst it is verbose, we _could_ rely on straight string passthrough:\n\n```bash\nmeltano config target-snowflake set db_name \"{{ ref('inventory.prod-snowflake-load', 'database') }}\"\n```\n\nor explicit `--ref-key` and `--ref-value` optional arguments that compose the `ref` ninja string:\n\n```bash\nmeltano config target-snowflake set db_name --ref-key 'inventory.prod-snowflake-load' --ref-value 'database'\n```",
      "state": "closed",
      "created_at": "2021-12-09T10:31:49.833Z",
      "updated_at": "2022-05-30T10:00:52.330Z",
      "closed_at": "2022-05-30T10:00:52.299Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "Needs Research Spike",
        "kind::Feature",
        "valuestream::Meltano"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [],
      "author": {
        "id": 7646034,
        "username": "kgpayne",
        "public_email": "",
        "name": "Ken Payne",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/7646034/avatar.png",
        "web_url": "https://gitlab.com/kgpayne"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/meltano/-/issues/3112",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/7603319/issues/3112",
        "notes": "https://gitlab.com/api/v4/projects/7603319/issues/3112/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/7603319/issues/3112/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/7603319",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#3112",
        "relative": "#3112",
        "full": "meltano/meltano#3112"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 133,
      "epic": {
        "id": 403473,
        "iid": 133,
        "title": "Meltano Config Management Improvement",
        "url": "/groups/meltano/-/epics/133",
        "group_id": 2524164,
        "human_readable_end_date": "Sep 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 996217,
      "relative_position": -513
    }
  ]
}
