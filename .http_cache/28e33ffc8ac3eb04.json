{
  "cookies": {
    "_cfuvid": "arpGXM9UJSHRu_U9BEoVRMPMYzJoFy_t69VfVKAIZjc-1747940874186-0.0.1.1-604800000"
  },
  "created_at": "2025-05-22T19:07:54.117826+00:00",
  "elapsed": 0.621943,
  "encoding": "utf-8",
  "headers": {
    "CF-Cache-Status": "MISS",
    "CF-Ray": "943e995c8c03d980-QRO",
    "Cache-Control": "max-age=0, private, must-revalidate",
    "Connection": "keep-alive",
    "Content-Encoding": "gzip",
    "Content-Type": "application/json",
    "Date": "Thu, 22 May 2025 19:07:54 GMT",
    "ETag": "W/\"14383c6ab3a3064dd9e951dcf51e156b\"",
    "Link": "<https://gitlab.com/api/v4/groups/2524164/epics/121/issues?epic_iid=121&id=2524164&page=2&per_page=20>; rel=\"next\", <https://gitlab.com/api/v4/groups/2524164/epics/121/issues?epic_iid=121&id=2524164&page=1&per_page=20>; rel=\"first\", <https://gitlab.com/api/v4/groups/2524164/epics/121/issues?epic_iid=121&id=2524164&page=2&per_page=20>; rel=\"last\"",
    "Server": "cloudflare",
    "Set-Cookie": "_cfuvid=arpGXM9UJSHRu_U9BEoVRMPMYzJoFy_t69VfVKAIZjc-1747940874186-0.0.1.1-604800000; path=/; domain=.gitlab.com; HttpOnly; Secure; SameSite=None",
    "Strict-Transport-Security": "max-age=31536000",
    "Transfer-Encoding": "chunked",
    "Vary": "Origin, Accept-Encoding",
    "content-security-policy": "default-src 'none'",
    "gitlab-lb": "haproxy-main-43-lb-gprd",
    "gitlab-sv": "api-gke-us-east1-b",
    "nel": "{\"max_age\": 0}",
    "referrer-policy": "strict-origin-when-cross-origin",
    "x-content-type-options": "nosniff",
    "x-frame-options": "SAMEORIGIN",
    "x-gitlab-meta": "{\"correlation_id\":\"24a18d1ce531f3568daa7a77cad0fec0\",\"version\":\"1\"}",
    "x-next-page": "2",
    "x-page": "1",
    "x-per-page": "20",
    "x-prev-page": "",
    "x-request-id": "24a18d1ce531f3568daa7a77cad0fec0",
    "x-runtime": "0.406790",
    "x-total": "36",
    "x-total-pages": "2"
  },
  "reason": "OK",
  "request": {
    "body": "",
    "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Connection": "keep-alive",
      "Private-Token": "REDACTED",
      "User-Agent": "sample-tap-gitlab/[could not be detected]"
    },
    "method": "GET",
    "url": "https://gitlab.com/api/v4/groups/2524164/epics/121/issues"
  },
  "status_code": 200,
  "url": "https://gitlab.com/api/v4/groups/2524164/epics/121/issues",
  "_decoded_content": [
    {
      "id": 108278379,
      "iid": 380,
      "project_id": 22672923,
      "title": "Update `--about --format=json` to match Meltano lockfile spec",
      "description": "When we originally launched the `--about` option, we didn't yet have a clear direction on what the long term support format would be and so the format of the json output was not well thought out or based on any existing spec. Now we have, I think, a clear standard based on the new Hub REST API.\n\nOnce https://gitlab.com/meltano/meltano/-/issues/3031 ships, I think we should update the json format so that this \"just works\" and gives an interoperable experience.\n\nAlternatively, we could keep the existing `--format=json` option as-is, and instead add support for `--format=meltano/json/v2` or similar.\n\nThe developer experience would then be:\n\n1. Build the tap or target, including specification of settings and capabilities.\n3. The cookiecutter will automatically install a default/minimal `meltano.yml` file from the cookiecutter, including the tap name and variant name.\n   - The developer's `meltano.yml` can optionally be modified to include a minimal `config:` for integration tests to pass, excluding those config values sent via env vars or `.env`.\n   - Unlike today, the `meltano.yml` file that lives in the tap repo does not need to define settings, capabilities, or other tap properties which are defined in the lock file (below).\n2. Run `tap-mytap --about --format=\"meltano/json/v2\" > tap-mytap--myvariantname.plugin.lock` (or similar) to create a lock file definition for the plugin.\n4. Run integration tests with `meltano run tap-mytap target-jsonl` or `meltano run tap-mytap target-sqlite`.\n5. Whenever there are significant changes to the tap which affect settings or capabilities, rerun steps `3` and `4`.\n\ncc @edgarrmondragon, @pnadolny13, @tayloramurphy  - What do you think?\n\nThis probably would be a major version bump on the SDK, and would streamline the process of getting robust Hub definitions, including settings and capabilities, for all SDK-based taps.",
      "state": "closed",
      "created_at": "2022-05-10T02:17:00.124Z",
      "updated_at": "2022-05-30T00:14:52.051Z",
      "closed_at": "2022-05-30T00:14:52.035Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2351601,
        "iid": 210,
        "group_id": 2524164,
        "title": "June 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:39:02.417Z",
        "updated_at": "2021-11-29T21:39:02.417Z",
        "due_date": "2022-06-30",
        "start_date": "2022-06-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/210"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/380",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/380",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/380/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/380/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#380",
        "relative": "#380",
        "full": "meltano/sdk#380"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1352663,
      "relative_position": -17955
    },
    {
      "id": 101608693,
      "iid": 321,
      "project_id": 22672923,
      "title": "Discuss: naming and dev practices for combined tap/target hybrids (\"ambidextrous connectors\")",
      "description": "With the release of SQL support in the SDK, it's now much easier to make a target connector which also ships with a tap connector.\n\nI've created a sample with `target-sqlite` refactor. With very little extra code, the target can also ship with a `tap` version of itself which is installable at the same time.\n\nI wanted to suggest a naming convention of `singer-<dbname>` when the tap and target are both packaged together.\n\n## All SQL targets could be taps (but not all SQL taps would be targets).\n\nNote: To be clear, my observation at this point is that creating a target is more work to create than the tap because of things like file uploads to temp storage such as S3, batch updates, type conversion, column type upgrades, etc. It probably would not be reasonable for every tap to also contain a target definition.\n\nIn contrast, it map be _fully_ reasonable - and perhaps even a best practice - that **every SQL target should also be a tap**. This means reverse ETL use cases are enabled by default, that users can more easily and programmatically interrogate the data they are landing, and testing the target would then already have built in confirmation capabilities, since the landed data can be extracted out and then compared with its original source data.\n\n\n<!-- Labels to add for triaging -->",
      "state": "closed",
      "created_at": "2022-01-31T17:25:12.454Z",
      "updated_at": "2022-05-30T00:07:27.593Z",
      "closed_at": "2022-05-30T00:07:27.573Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "Office Hours::Discussed",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 5,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/321",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/321",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/321/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/321/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#321",
        "relative": "#321",
        "full": "meltano/sdk#321"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1095421,
      "relative_position": -16929
    },
    {
      "id": 100848815,
      "iid": 305,
      "project_id": 22672923,
      "title": "Duplicate call to `discover_catalog_entries()`",
      "description": "The following discussion from !44 should be addressed:\n\n- [ ] @edgarrmondragon started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/44#note_755501269):  (+2 comments)\n\n    > @aaronsteers One thing I noticed during another round of checks is that `discover_catalog_entries` is called twice when running the tap in discovery mode. I am to [(git) blame](https://gitlab.com/meltano/sdk/-/commit/167e6c580f34a34acf4bc52d844bca47cb54e4b0#fd3598421f9ddf9445b3b51c92df2c7a7c089f49) for the path leading from `_singer_catalog` here:\n    > \n    > ```mermaid\n    > flowchart BT\n    >   SQLTap.catalog_dict --> SQLConnector.discover_catalog_entries\n    >   SQLTap.discover_streams --> SQLTap.catalog_dict\n    >   Tap.load_streams --> SQLTap.discover_streams\n    >   Tap.streams --> Tap.load_streams\n    >   Tap._singer_catalog --> Tap.streams\n    >   Tap.__init__ --> Tap._singer_catalog\n    >   Tap.cli --> Tap.__init__\n    > \n    >   Tap.catalog_json_text --> SQLTap.catalog_dict\n    >   Tap.run_discovery --> Tap.catalog_json_text\n    >   Tap.cli --> Tap.run_discovery\n    > ```\n    > \n    > This is something to keep in our radar for optimization",
      "state": "closed",
      "created_at": "2022-01-18T15:06:41.325Z",
      "updated_at": "2022-05-30T00:05:22.340Z",
      "closed_at": "2022-05-30T00:05:22.312Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Tech Debt",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/305",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/305",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/305/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/305/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#305",
        "relative": "#305",
        "full": "meltano/sdk#305"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1055514,
      "relative_position": -16416
    },
    {
      "id": 100155064,
      "iid": 302,
      "project_id": 22672923,
      "title": "Stream Maps - Streams level __else__: null filter throws KeyError",
      "description": "## Summary\n[//]: # (Summarize the bug encountered concisely)\n\nRelates to: https://gitlab.com/meltano/sdk/-/issues/301\n\nAs part of finding a workaround for https://gitlab.com/meltano/sdk/-/issues/301 I tried to use the `__else__: null` stream map at the stream level to exclude all streams not explicitly defined in my stream map config. I get a KeyError when I include this.\n\n## Steps to reproduce\n[//]: # (How one can reproduce the issue - this is very important)\n\nmeltano, version 1.90.1\n\n```yaml\n  - name: target-athena-gitlab\n    inherit_from: target-athena\n    config:\n      stream_maps:\n        projects:\n          __alias__: \"gitlab_projects\"\n        users:\n          __alias__: \"gitlab_users\"\n        merge_requests:\n          __alias__: \"gitlab_merge_requests\"\n        issues:\n          __alias__: \"gitlab_issues\"\n        branches:\n          __alias__: \"gitlab_branches\"\n        commits:\n          __alias__: \"gitlab_commits\"\n        groups:\n          __alias__: \"gitlab_groups\"\n        project_labels:\n          __alias__: \"gitlab_project_labels\"\n        __else__: null\n```\n\n## What is the current bug behavior?\n[//]: # (What actually happens)\n\nI get a KeyError when I try to exclude all undefined streams like [the docs](https://sdk.meltano.com/en/latest/stream_maps.html#remove-all-undeclared-streams-or-properties) describe.\n\n## What is the expected correct behavior?\n[//]: # (What you should see instead)\n\nAll undefined streams are excluded with no errors.\n\n## Relevant logs and/or screenshots\n\n[//]: # (Paste any relevant logs.)\n[//]: # (Please use code blocks ``` to format console output, logs, and code, as it's very hard to read otherwise.)\n\n```\n2022-01-05T15:22:57.261721Z [error    ] 'stream_maps.__else__'         \nTraceback (most recent call last):\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/logging/output_logger.py\", line 127, in redirect_logging\n    yield\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/cli/elt.py\", line 228, in _redirect_output\n    yield\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/cli/elt.py\", line 237, in _run_elt\n    elt_context = context_builder.context()\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/elt_context.py\", line 255, in context\n    env.update(loader.env)\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/elt_context.py\", line 28, in env\n    return {**self.plugin.info_env, **self.config_env()}\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/elt_context.py\", line 24, in config_env\n    return self.settings_service.as_env(session=self.session, **kwargs)\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/settings_service.py\", line 180, in as_env\n    full_config = self.config_with_metadata(*args, **kwargs)\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/settings_service.py\", line 147, in config_with_metadata\n    value, metadata = self.get_with_metadata(\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/settings_service.py\", line 233, in get_with_metadata\n    value, get_metadata = manager.get(name, setting_def=setting_def)\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/settings_store.py\", line 646, in get\n    value, metadata = manager.get(name, setting_def=setting_def, **kwargs)\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/settings_store.py\", line 501, in get\n    value, metadata = self.get_with_metadata(setting_def.name)\n  File \"/Users/pnadolny/.virtualenvs/squred/lib/python3.8/site-packages/meltano/core/settings_store.py\", line 528, in get_with_metadata\n    metadata = self.config_with_metadata[name]\nKeyError: 'stream_maps.__else__'\n'stream_maps.__else__'\n```\n## Possible fixes\n[//]: # (If you can, link to the line of code that might be responsible for the problem)",
      "state": "closed",
      "created_at": "2022-01-05T15:28:48.149Z",
      "updated_at": "2022-02-01T18:54:25.977Z",
      "closed_at": "2022-02-01T18:54:25.929Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2286177,
        "iid": 204,
        "group_id": 2524164,
        "title": "February 2022",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:21:35.408Z",
        "updated_at": "2022-03-01T20:28:25.106Z",
        "due_date": "2022-02-28",
        "start_date": "2022-02-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/204"
      },
      "assignees": [],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 0,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/302",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/302",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/302/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/302/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#302",
        "relative": "#302",
        "full": "meltano/sdk#302"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1031178,
      "relative_position": -15903
    },
    {
      "id": 100154670,
      "iid": 301,
      "project_id": 22672923,
      "title": "Stream Maps - Aliasing stream still persists original name also",
      "description": "## Summary\n[//]: # (Summarize the bug encountered concisely)\n\nI need to alias my streams to include a prefix on each so that I dont overwrite an existing table with the same name as the stream. I have an existing `issues` table from tap-github and want to add the tap-gitlab `issues` table as well (see [squared repo](https://gitlab.com/meltano/squared/-/blob/master/data/meltano.yml#L110) for use case).\n\nI added inline stream maps to alias each stream with a prefix `gitlab_issues`, this works to create the newly named table but it also continues to persist the original stream as well `issues`. This seemed like a bug to me but might be expected behavior, I'm not sure.\n\nI also tried to include the `\"__else__\": null` at the stream level as described in [the docs](https://sdk.meltano.com/en/latest/stream_maps.html#remove-all-undeclared-streams-or-properties) to hopefully have it exclude those original stream names but ran into a `KeyError: 'stream_maps.__else__'` - this might be a separate issue so [I created one](https://gitlab.com/meltano/sdk/-/issues/302) for that too.\n\n```yaml\n  - name: tap-gitlab\n    variant: meltanolabs\n    pip_url: git+https://github.com/MeltanoLabs/tap-gitlab.git\n    select:\n    - projects.*\n    - users.*\n    - merge_requests.*\n    - issues.*\n    - branches.*\n    - commits.*\n    - groups.*\n    - project_labels.*\n  loaders:\n  - name: target-athena-gitlab\n    inherit_from: target-athena\n    config:\n      stream_maps:\n        projects:\n          __alias__: \"gitlab_projects\"\n        users:\n          __alias__: \"gitlab_users\"\n        merge_requests:\n          __alias__: \"gitlab_merge_requests\"\n        issues:\n          __alias__: \"gitlab_issues\"\n        branches:\n          __alias__: \"gitlab_branches\"\n        commits:\n          __alias__: \"gitlab_commits\"\n        groups:\n          __alias__: \"gitlab_groups\"\n        project_labels:\n          __alias__: \"gitlab_project_labels\"\n        \"__else__\": null\n```\n## Steps to reproduce\n[//]: # (How one can reproduce the issue - this is very important)\n\nmeltano, version 1.90.1\n\n## What is the current bug behavior?\n[//]: # (What actually happens)\n\nThe original stream is still persisted even after I alias it.\n\n## What is the expected correct behavior?\n[//]: # (What you should see instead)\n\nAliasing a stream would produce only the alias stream and the original would be excluded.\n\n## Relevant logs and/or screenshots\n\n[//]: # (Paste any relevant logs.)\n[//]: # (Please use code blocks ``` to format console output, logs, and code, as it's very hard to read otherwise.)\n\n\n## Possible fixes\n[//]: # (If you can, link to the line of code that might be responsible for the problem)",
      "state": "closed",
      "created_at": "2022-01-05T15:21:57.588Z",
      "updated_at": "2022-02-01T18:54:26.162Z",
      "closed_at": "2022-02-01T18:54:26.143Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2286177,
        "iid": 204,
        "group_id": 2524164,
        "title": "February 2022",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:21:35.408Z",
        "updated_at": "2022-03-01T20:28:25.106Z",
        "due_date": "2022-02-28",
        "start_date": "2022-02-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/204"
      },
      "assignees": [],
      "author": {
        "id": 8668050,
        "username": "pnadolny13",
        "public_email": "",
        "name": "Pat Nadolny",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/8668050/avatar.png",
        "web_url": "https://gitlab.com/pnadolny13"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 2,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/301",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/301",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/301/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/301/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#301",
        "relative": "#301",
        "full": "meltano/sdk#301"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1031177,
      "relative_position": -15390
    },
    {
      "id": 100147775,
      "iid": 300,
      "project_id": 22672923,
      "title": "Tap fails to read its own state file with partitions",
      "description": "I'm running https://github.com/MeltanoLabs/tap-github but have noticed the same behavior for tap-clickup (see https://github.com/AutoIDM/tap-clickup/issues/101). \n\n\nI'm getting an exception `AttributeError: 'str' object has no attribute 'pop'`\n\nThe dumped state files look like\n```json\n{\n  \"bookmarks\": {\n    \"commits\": {\n      \"partitions\": {\n        \"0\": {\n          \"context\": {\n            \"org\": \"meshcloud\",\n            \"repo\": \"meshcloud-docs\"\n          },\n          \"progress_markers\": {\n            \"Note\": \"Progress is not resumable if interrupted.\",\n            \"replication_key\": \"commit_timestamp\",\n            \"replication_key_value\": \"2021-12-20T14:37:28Z\"\n          },\n          \"replication_key_signpost\": \"2022-01-05T10:07:47.847343+00:00\",\n          \"starting_replication_value\": \"2016-01-01\",\n          \"replication_key\": \"commit_timestamp\",\n          \"replication_key_value\": \"2021-12-20T14:37:28Z\"\n        },\n        \"1\": {\n          \"context\": {\n            \"org\": \"meshcloud\",\n            \"repo\": \"meshfed-release\"\n          },\n          \"progress_markers\": {\n            \"Note\": \"Progress is not resumable if interrupted.\",\n            \"replication_key\": \"commit_timestamp\",\n            \"replication_key_value\": \"2022-01-05T09:49:56Z\"\n          },\n          \"replication_key_signpost\": \"2022-01-05T10:08:40.186143+00:00\",\n          \"starting_replication_value\": \"2016-01-01\",\n          \"replication_key\": \"commit_timestamp\",\n          \"replication_key_value\": \"2022-01-05T09:49:56Z\"\n        }\n      }\n    },\n```\n\nFrom the code in the sdk `tap_base.py` ~L300 it seems that it expects that partitions is an array, not an pseudo-array object\n\n```python\ndef _reset_state_progress_markers(self) -> None:\n        \"\"\"Clear prior jobs' progress markers at beginning of sync.\"\"\"\n        for stream_name, state in self.state.get(\"bookmarks\", {}).items():\n            _state.reset_state_progress_markers(state)\n            for partition_state in state.get(\"partitions\", []):\n                _state.reset_state_progress_markers(partition_state)\n```\n\nThis leads me to believe that there's actually a bug in the sdk, either in writing or reading the state file.\n\nHere's a full stacktrace for reference\n\n```text\n2022-01-05T13:15:11.756895Z [info     ] Traceback (most recent call last): cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.757165Z [info     ]   File \"/Users/jrudolph/dev/mc/meshbarn/tractor/.meltano/extractors/tap-github/venv/bin/tap-github\", line 8, in <module> cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.762690Z [info     ]     sys.exit(cli())            cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.763016Z [info     ]   File \"/Users/jrudolph/dev/mc/meshbarn/tractor/.meltano/extractors/tap-github/venv/lib/python3.9/site-packages/click/core.py\", line 1128, in __call__ cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.763282Z [info     ]     return self.main(*args, **kwargs) cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.765100Z [info     ]   File \"/Users/jrudolph/dev/mc/meshbarn/tractor/.meltano/extractors/tap-github/venv/lib/python3.9/site-packages/click/core.py\", line 1053, in main cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.765377Z [info     ]     rv = self.invoke(ctx)      cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.765521Z [info     ]   File \"/Users/jrudolph/dev/mc/meshbarn/tractor/.meltano/extractors/tap-github/venv/lib/python3.9/site-packages/click/core.py\", line 1395, in invoke cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.767631Z [info     ]     return ctx.invoke(self.callback, **ctx.params) cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.767899Z [info     ]   File \"/Users/jrudolph/dev/mc/meshbarn/tractor/.meltano/extractors/tap-github/venv/lib/python3.9/site-packages/click/core.py\", line 754, in invoke cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.768127Z [info     ]     return __callback(*args, **kwargs) cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.768752Z [info     ]   File \"/Users/jrudolph/dev/mc/meshbarn/tractor/.meltano/extractors/tap-github/venv/lib/python3.9/site-packages/singer_sdk/tap_base.py\", line 477, in cli cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.768983Z [info     ]     tap.sync_all()             cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.769189Z [info     ]   File \"/Users/jrudolph/dev/mc/meshbarn/tractor/.meltano/extractors/tap-github/venv/lib/python3.9/site-packages/singer_sdk/tap_base.py\", line 330, in sync_all cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.769413Z [info     ]     self._reset_state_progress_markers() cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.769645Z [info     ]   File \"/Users/jrudolph/dev/mc/meshbarn/tractor/.meltano/extractors/tap-github/venv/lib/python3.9/site-packages/singer_sdk/tap_base.py\", line 307, in _reset_state_progress_markers cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.772134Z [info     ]     _state.reset_state_progress_markers(partition_state) cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.772292Z [info     ]   File \"/Users/jrudolph/dev/mc/meshbarn/tractor/.meltano/extractors/tap-github/venv/lib/python3.9/site-packages/singer_sdk/helpers/_state.py\", line 170, in reset_state_progress_markers cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.772430Z [info     ]     progress_markers = stream_or_partition_state.pop(PROGRESS_MARKERS, {}) cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n2022-01-05T13:15:11.776907Z [info     ] AttributeError: 'str' object has no attribute 'pop' cmd_type=extractor job_id=tap-github-to-bigquery name=tap-github run_id=8629511d-ebf7-4004-adbf-68a09415d312 stdio=stderr\n```",
      "state": "closed",
      "created_at": "2022-01-05T13:26:26.700Z",
      "updated_at": "2022-03-01T13:51:48.052Z",
      "closed_at": "2022-02-28T15:06:14.245Z",
      "closed_by": {
        "id": 1942272,
        "username": "tayloramurphy",
        "public_email": "",
        "name": "Taylor A Murphy",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1942272/avatar.png",
        "web_url": "https://gitlab.com/tayloramurphy"
      },
      "labels": [
        "kind::Bug",
        "urgency::high",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2286177,
        "iid": 204,
        "group_id": 2524164,
        "title": "February 2022",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:21:35.408Z",
        "updated_at": "2022-03-01T20:28:25.106Z",
        "due_date": "2022-02-28",
        "start_date": "2022-02-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/204"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 687584,
        "username": "jrudolph1",
        "public_email": "",
        "name": "Johannes Rudolph",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/586a078036f6bf61d1c11463fac1f40c74fd194b6bee3ed314b95502409f7115?s=80&d=identicon",
        "web_url": "https://gitlab.com/jrudolph1"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 17,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/300",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/300",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/300/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/300/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#300",
        "relative": "#300",
        "full": "meltano/sdk#300"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1031176,
      "relative_position": -14877
    },
    {
      "id": 100112449,
      "iid": 299,
      "project_id": 22672923,
      "title": "Support for JSON Schema refs in Schemas",
      "description": "Ref isn't currently supported in schemas, and it fails in a very peculiar way (empty object is returned)\n\nI assumed they were supported as schemas follow the json schema spec, but I guess it's not included. I believe Schemas are parsed from the `pipelinewise-singer-python = \"1.2.0\"` dependency which I believe gets parsed here https://github.com/transferwise/pipelinewise-singer-python/blob/master/singer/schema.py . It's odd to me that we're not using the `jsonschema` library here to parse the schemas but :shrug: \n\nUse case:\n1. https://github.com/AutoIDM/tap-clickup/blob/c99bb82c3b7eec7b25732ecdb1c091d5795c8420/tap_clickup/schemas/space.json?#L158 , lots of nested values that all need the same definitions. \n2. This also makes for nicer json schema if you don't have to copy paste all of the time, the tap-clickup repo uses it all of the time\n\nCurrent outcome for refs:\n1. Schema for the ref object returns an empty object. This is bad, and unexpected. This led to https://github.com/AutoIDM/tap-clickup/issues/104 . I think https://gitlab.com/meltano/sdk/-/issues/228#note_801273924 should be able to catch this kind of stuff by validating the schema is correct (in this case an empty object imo isn't correct, or at a minimum should be a warning in a validation process)",
      "state": "closed",
      "created_at": "2022-01-04T21:24:55.543Z",
      "updated_at": "2022-05-30T00:04:35.858Z",
      "closed_at": "2022-05-30T00:04:35.841Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 17,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/299",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/299",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/299/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/299/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#299",
        "relative": "#299",
        "full": "meltano/sdk#299"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 1029141,
      "relative_position": -14364
    },
    {
      "id": 97834827,
      "iid": 280,
      "project_id": 22672923,
      "title": "Should tests and samples be distributed to end users?",
      "description": "At the moment, both the SDK and cookiecutters include tests (and samples in the case of the SDK) in the main package directory. This has the effect of distributing those to end users. In the case of tap developers, they'll get all the SDK tests and samples, which they may not want or need, and in the case of end users (e.g. in Meltano) they also get the tap tests.\n\nFor example:\n\n```console\n$ ls -1 .meltano/extractors/tap-github/venv/lib/python3.8/site-packages/singer_sdk/tests\n__init__.py\n__pycache__\nconftest.py\ncookiecutters\ncore\nexternal\nexternal_snowflake\n\n$ ls -1 .meltano/extractors/tap-github/venv/lib/python3.8/site-packages/singer_sdk/samples\nsample_tap_countries\nsample_tap_gitlab\nsample_tap_google_analytics\nsample_target_csv\nsample_target_parquet\n\n$ ls -1 .meltano/extractors/tap-github/venv/lib/python3.8/site-packages/tap_github/tests/\n__init__.py\n__pycache__\nfixtures.py\ntest_core.py\ntest_tap.py\n```\n\nI don't think we document or recommend a use case for those files so it might make sense to move them out of the main package and into the root of the repository. That'd make the packages a bit lighter.",
      "state": "closed",
      "created_at": "2021-11-23T20:11:40.476Z",
      "updated_at": "2021-11-30T16:54:33.154Z",
      "closed_at": "2021-11-30T16:54:33.110Z",
      "closed_by": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "labels": [
        "flow::Review",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2286170,
        "iid": 198,
        "group_id": 2524164,
        "title": "Fri: Dec 3, 2021",
        "description": "",
        "state": "closed",
        "created_at": "2021-10-18T15:19:37.617Z",
        "updated_at": "2021-12-06T16:35:32.636Z",
        "due_date": "2021-12-03",
        "start_date": "2021-11-27",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/198"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 1,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/280",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 1,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/280",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/280/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/280/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#280",
        "relative": "#280",
        "full": "meltano/sdk#280"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 956799,
      "relative_position": -8721
    },
    {
      "id": 97829770,
      "iid": 279,
      "project_id": 22672923,
      "title": "SDK version in cookiecutters should be pinned",
      "description": "In relation to https://gitlab.com/meltano/sdk/-/issues/278 and the [Slack conversation][cjk-convo], the cookiecutter starters should have a pinned version of the SDK. That would mean a few things:\n\n- Taps and targets explicitly declare the latest SDK version they support.\n- To get features from a newer SDK release, package developers need to update the SDK version in `pyproject.toml`.\n- End-users will always get the package bundled with an SDK version the developer knows to work.\n\n[cjk-convo]: https://meltano.slack.com/archives/C01PKLU5D1R/p1637687521258300",
      "state": "closed",
      "created_at": "2021-11-23T18:09:13.005Z",
      "updated_at": "2021-11-26T03:01:30.631Z",
      "closed_at": "2021-11-26T03:01:30.612Z",
      "closed_by": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2136620,
        "iid": 176,
        "group_id": 2524164,
        "title": "Staging",
        "description": "",
        "state": "active",
        "created_at": "2021-07-07T19:00:49.676Z",
        "updated_at": "2021-07-07T19:00:49.676Z",
        "due_date": null,
        "start_date": null,
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/176"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 1,
      "merge_requests_count": 1,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/279",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/279",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/279/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/279/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#279",
        "relative": "#279",
        "full": "meltano/sdk#279"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 956639,
      "relative_position": -7695
    },
    {
      "id": 97829554,
      "iid": 278,
      "project_id": 22672923,
      "title": "Application vs Library for SDK-based packages",
      "description": "I want to start the conversation around our (recommended) packaging strategy for SDK-based taps and targets.\n\nA [recent conversation in Slack][cjk-convo] revealed that installing SDK-based taps (e.g. `pipx install git+https://github.com/MeltanoLabs/tap-github.git`) references the specified dependency versions in `pyproject.toml` and completely ignores the pinned versions in `poetry.lock`.\n\nThe most relevant discussions around using Poetry to distribute end-user Python applications (like Singer Taps) is happening [here][locked-suggestion] and in [this PR][pinned-experimental].\n\n[cjk-convo]: https://meltano.slack.com/archives/C01PKLU5D1R/p1637687521258300\n[locked-suggestion]: https://github.com/python-poetry/poetry/issues/1307#issuecomment-674336917\n[pinned-experimental]: https://github.com/python-poetry/poetry-core/pull/71",
      "state": "closed",
      "created_at": "2021-11-23T18:03:35.588Z",
      "updated_at": "2022-05-30T00:01:50.919Z",
      "closed_at": "2022-05-30T00:01:50.860Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Discussion",
        "flow::Triage",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/278",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/278",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/278/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/278/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#278",
        "relative": "#278",
        "full": "meltano/sdk#278"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 956641,
      "relative_position": -8208
    },
    {
      "id": 97582744,
      "iid": 274,
      "project_id": 22672923,
      "title": "Follow-up from \"Add sample GitHub CI file to tap Cookiecutter template\"",
      "description": "IMPORTANT: Gitlab creates this issue by using the text of the _first_ comment in the thread. In many cases the _last_ comment is actually indicative of the next action. So, for proper context, you may need to click through to the individual threads.\n\nThe following discussions from !202 should be addressed:\n\n- [x] @pnadolny13 started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_729675107):  (+1 comment)\n\n    > @aaronsteers this is awesome! I know we have a [tox file](https://gitlab.com/meltano/sdk/-/blob/main/cookiecutter/tap-template/%7B%7Bcookiecutter.tap_id%7D%7D/tox.ini) as part of the cookiecutter, what about just executing that directly vs calling each test individually? I like the idea that if I can run tox locally then those tests should pass in CI but if theyre split out theres a risk of the CI file and tox file getting out of sync. I know theres some value in breaking each test up so its more DAG-like but it seems harder to maintain that way. Is there more value that we get from splitting then out that I missing?\n\n- [ ] @edgarrmondragon started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_729808872):  (+2 comments)\n\n    > @aaronsteers Just occurred to me: if we're gonna add GitHub-specific files, wdyt about opt-in shipping a `dependabot.yml` like in [`tap-stackexchange`](https://github.com/MeltanoLabs/tap-stackexchange/blob/main/.github/dependabot.yml). That would help with keeping the SDK and other dependencies up-to-date.\n\n- [ ] @pnadolny13 started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_735072785): \n\n    > I think isort might be missing from the toml file of the cookiecutter templates.\n\n- [ ] @pnadolny13 started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_735072786): \n\n    > I'm pretty new to mypy still but I had to include ` --ignore-missing-imports` here in order to get it to pass. That might not be recommended but wanted to call it out.\n\n- [x] @pnadolny13 started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/202#note_735072791):  (+2 comments)\n\n    > Did we want to call `poetry run tox -e pytest` here instead of pytest directly?",
      "state": "closed",
      "created_at": "2021-11-18T21:13:37.175Z",
      "updated_at": "2022-05-30T00:01:16.245Z",
      "closed_at": "2022-05-30T00:01:16.226Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Needs Refinement",
        "flow::Triage",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/274",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 5,
        "completed_count": 2
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/274",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/274/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/274/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#274",
        "relative": "#274",
        "full": "meltano/sdk#274"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 971530,
      "relative_position": -12825
    },
    {
      "id": 97582619,
      "iid": 273,
      "project_id": 22672923,
      "title": "Merging parent context with partitions",
      "description": "I have a use case with tap-clickup where a stream has a parameter that we need to call for `archived` where we need to call (and paginate) `archived=true` and `archived=false`. This stream is also a Child stream that needs the parents ID.\n\nThis line of code shows where using both contexts and partitions together doesn't work https://gitlab.com/meltano/sdk/-/blob/v0.4.6/singer_sdk/streams/core.py#L934\n\n\nWe could merge these two together like I did here https://github.com/AutoIDM/tap-clickup/blob/main/tap_clickup/client.py#L126 and https://github.com/AutoIDM/tap-clickup/blob/main/tap_clickup/client.py#L114 . The problem with this implementation is my state gets messed up when it comes to incremental streams.",
      "state": "closed",
      "created_at": "2021-11-18T21:08:22.972Z",
      "updated_at": "2022-05-30T00:01:08.440Z",
      "closed_at": "2022-05-30T00:01:08.423Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 5562019,
        "username": "vischous",
        "public_email": "",
        "name": "Derek Visch",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/5562019/avatar.png",
        "web_url": "https://gitlab.com/vischous"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 4,
      "merge_requests_count": 0,
      "upvotes": 5,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/273",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 2,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/273",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/273/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/273/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#273",
        "relative": "#273",
        "full": "meltano/sdk#273"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 951359,
      "relative_position": -7182
    },
    {
      "id": 97432401,
      "iid": 270,
      "project_id": 22672923,
      "title": "[Community-Contributed]: Add an Authenticator to handle Proxy OAuth token endpoints that expect specific request headers/body",
      "description": "## Summary\n\nI recently made a change to an SDK tap to allow us to use our Proxy OAuth server to refresh user\u2019s Google OAuth credentials, and this required specific headers and body to make the request.\n\nI'm not sure if this is just a Proxy OAuth use case, but token end points requiring specific (different to the general api requests) headers and bodies would be able to utilize this new authenticator.\n\n\n## Proposed benefits\n\nChances are anyone who uses Proxy OAuth will run into the issues of the Proxy endpoint requiring different than normal headers and body to make the request.\n\n\n\n\n## Proposal details\n\nAdd an Authenticator that handles auth_token_headers and auth_token_body, alongside the usual auth_headers and auth_bodies.\n\n\n## Best reasons not to build\n\nMore authenticator choices could cause confusion about which you should use when. (More or less solved by adding docs/examples I think?)\n\n---\n\nWould be great to hear if anyone else has run into something like this, or other ways to go about solving it?\n\nLike I mentioned, I\u2019m not sure if Proxy OAuth Authenticator is the correct name, or if there is something more general for other use cases as well?",
      "state": "closed",
      "created_at": "2021-11-16T15:47:24.343Z",
      "updated_at": "2022-04-04T20:55:57.304Z",
      "closed_at": "2022-04-04T20:55:57.243Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "Accepting Merge Requests",
        "Awaiting Action::Author",
        "Community-Contributed MR",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2286180,
        "iid": 206,
        "group_id": 2524164,
        "title": "Q2-2022",
        "description": "",
        "state": "active",
        "created_at": "2021-10-18T15:22:10.509Z",
        "updated_at": "2022-01-24T17:51:23.679Z",
        "due_date": "2022-06-30",
        "start_date": "2022-04-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/206"
      },
      "assignees": [
        {
          "id": 1134865,
          "username": "edgarrmondragon",
          "public_email": "edgar@meltano.com",
          "name": "Edgar R. Mondrag\u00f3n",
          "state": "active",
          "locked": false,
          "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
          "web_url": "https://gitlab.com/edgarrmondragon"
        }
      ],
      "author": {
        "id": 8411379,
        "username": "DanielPDWalker",
        "public_email": "",
        "name": "Daniel Walker",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/c232815480c791c4f0718a1dc3eda341ddfbea94a010f83a013042b82da7f186?s=80&d=identicon",
        "web_url": "https://gitlab.com/DanielPDWalker"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 1134865,
        "username": "edgarrmondragon",
        "public_email": "edgar@meltano.com",
        "name": "Edgar R. Mondrag\u00f3n",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/1134865/avatar.png",
        "web_url": "https://gitlab.com/edgarrmondragon"
      },
      "user_notes_count": 3,
      "merge_requests_count": 1,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/270",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 2,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/270",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/270/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/270/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#270",
        "relative": "#270",
        "full": "meltano/sdk#270"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 971534,
      "relative_position": -13338
    },
    {
      "id": 96544289,
      "iid": 262,
      "project_id": 22672923,
      "title": "Epoch values should be considered valid timestamps",
      "description": "## Summary\n[//]: # (Concisely summarize the feature you are proposing.)\n\nFrom what I can tell, the SDK cannot currently parse epoch-encoded timestamps and instead pushes them through the `handle_invalid_timestamp` logic. This is because the timestamp parsing is done using the `dateutil.parser.parse` functionality. Example below:\n\n```\nfrom dateutil import parser\n\nts = 1634606164.000200\nparser.parse(ts)\n\n>>> ERROR: dateutil.parser._parser.ParserError: year 1634606164 is out of range: 1634606164.000200\n```\n\nHowever, if we use `datetime.datetime.fromtimestamp`, the value is parsed successfully.\n\n```\nfrom datetime import datetime\ndatetime.fromtimestamp(ts)\n\n>>> datetime.datetime(2021, 10, 18, 21, 16, 4, 200)\n```\n\nIn this scenario, I would like to be able to use `ts` as a date-time formatted replication key column, but the strategy for doing so is not entirely clear to me.\n\n## Proposed benefits\n[//]: # (Concisely summarize the benefits this feature would bring to yourself and other users.)\n\nEnabling epoch parsing would allow more timestamp data to be treated in a \"standard\" way. \n\n## Proposal details\n[//]: # (In as much detail as you are able, describe the feature you'd like to build or would like to see built.)\n\nI would like to see the SDK handle this case easily, to reduce friction when developing against this type of data.\n\n## Best reasons not to build\n[//]: # (Will this negatively affect any existing functionality? Do you anticipate any breaking changes versus what may already be working today? Make the counter-argument to your proposal here.)\n\nIt is not entirely clear to me whether handling the data as a timestamp is the best way to approach this problem. Should we add a new \"format\" -- `date_epoch`? The major issue I could see is that, if an epoch timestamp is used as the replication key (e.g.), it would need to remain unconverted when being pushed to the external system. (The SDK shouldn't convert epoch -> date_iso8601, and then send that timestamp in the request.)",
      "state": "closed",
      "created_at": "2021-11-02T00:33:39.911Z",
      "updated_at": "2022-05-29T23:59:44.344Z",
      "closed_at": "2022-05-29T23:59:44.330Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 2726950,
        "username": "stkbailey",
        "public_email": "",
        "name": "Stephen Bailey",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/3004f9b58409049fc7c8a289867d9ce0fd37b6781e7a9933a38c86a83a75e3ba?s=80&d=identicon",
        "web_url": "https://gitlab.com/stkbailey"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/262",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/262",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/262/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/262/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#262",
        "relative": "#262",
        "full": "meltano/sdk#262"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 917415,
      "relative_position": -6669
    },
    {
      "id": 95977860,
      "iid": 252,
      "project_id": 22672923,
      "title": "Include tap-smoke-test as a dev dep in targets",
      "description": "In https://gitlab.com/meltano/tap-smoke-test/-/merge_requests/4 we added support for fetching remote payloads as test content. With that in place it might be nice to include tap-smoke-test as a dev dependency in the target cookiecutter, along with an included sample config using one of the two remote sample dataset hosted on gitlab (i.e. `https://gitlab.com/meltano/tap-smoke-test/-/raw/main/demo-data/animals-data.jsonl`).\n\nWould give folks an easy way to throw some test data at targets they're developing.\n\n/cc @aaronsteers",
      "state": "closed",
      "created_at": "2021-10-22T16:14:22.122Z",
      "updated_at": "2022-05-29T23:58:34.689Z",
      "closed_at": "2022-05-29T23:58:34.664Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 22132,
        "username": "pandemicsyn",
        "public_email": "",
        "name": "Florian",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/4233db8f5d3b6e2b9871c627d6fdc49a3714d39122a09a8e71d08405b191b4b2?s=80&d=identicon",
        "web_url": "https://gitlab.com/pandemicsyn"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/252",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/252",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/252/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/252/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#252",
        "relative": "#252",
        "full": "meltano/sdk#252"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 971497,
      "relative_position": -12312
    },
    {
      "id": 95918987,
      "iid": 250,
      "project_id": 22672923,
      "title": "Update _get_about_info method to return a dataclass or named tuple",
      "description": "The following discussion from !188 should be addressed:\n\n- [ ] @aaronsteers started a [discussion](https://gitlab.com/meltano/sdk/-/merge_requests/188#note_708495364):  (+1 comment)\n\n    > Perhaps this should be a dataclass or named tuple instead of dict?\n\n> @aaronsteers Indeed! I had this in mind when I created https://gitlab.com/meltano/sdk/-/issues/216. An object with `render_json` and `render_markdown` methods would make for good separation of concerns. Probably worth its own issue.",
      "state": "closed",
      "created_at": "2021-10-21T20:57:59.640Z",
      "updated_at": "2022-05-29T23:58:19.194Z",
      "closed_at": "2022-05-29T23:58:19.178Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 3,
      "merge_requests_count": 0,
      "upvotes": 1,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/250",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 1,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": false,
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/250",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/250/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/250/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#250",
        "relative": "#250",
        "full": "meltano/sdk#250"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 971495,
      "relative_position": -11799
    },
    {
      "id": 95825099,
      "iid": 249,
      "project_id": 22672923,
      "title": "CLI flag for targets to read messages from a file instead of stdin",
      "description": "When developing taps, `import pdb; pdb.set_trace()` works as expected, but for targets when executing the target executable it doesn't, as `cat sample_messages.json | target-foo` breaks `pdb` from accessing shell inputs.\n\nA solution I've seen some `singer-python` targets do is have a cli flag (e.g. `--read-from=/path/to/file` or `--input` or similar) which overrides the source of messages from `sys.stdin` to that file.\n\nI opened this issue for that debugging reason but a neat side-effect of this is solution is it also allows for running targets in different ways other than pipes. I imagine that file could actually be a socket to a tap running on another host, etc.",
      "state": "closed",
      "created_at": "2021-10-20T21:51:01.106Z",
      "updated_at": "2021-10-23T19:11:14.702Z",
      "closed_at": "2021-10-23T19:11:14.657Z",
      "closed_by": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2241595,
        "iid": 191,
        "group_id": 2524164,
        "title": "Fri: Oct 22, 2021 (Tap-Toberfest)",
        "description": "",
        "state": "closed",
        "created_at": "2021-09-20T18:58:27.170Z",
        "updated_at": "2021-10-25T14:54:00.700Z",
        "due_date": "2021-10-22",
        "start_date": "2021-10-16",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/191"
      },
      "assignees": [
        {
          "id": 689351,
          "username": "rabidaudio",
          "public_email": "",
          "name": "Charles Julian Knight",
          "state": "active",
          "locked": false,
          "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
          "web_url": "https://gitlab.com/rabidaudio"
        }
      ],
      "author": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "user_notes_count": 0,
      "merge_requests_count": 1,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/249",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/249",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/249/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/249/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#249",
        "relative": "#249",
        "full": "meltano/sdk#249"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 894028,
      "relative_position": -6156
    },
    {
      "id": 95809505,
      "iid": 247,
      "project_id": 22672923,
      "title": "Setup callback hook for base classes",
      "description": "`Stream`s and `Sink`s often need to do some setup before the EL process. For example, a `Sink` may need to update table schemas in the target database, a `Stream` may need to open a connection, etc. \n\nUsers can put this stuff in constructors but I see a few problems with this:\n\n- the constructors have some complex arguments, and we probably want to discourage users from overriding the base constructor so that we can change the arguments in the future\n- it makes testing a bit complicated, as you can't have an instance of the class without it doing setup\n\nMy proposal is a simple method (`prepare`? `setup`? something to that effect) with a default `pass` implementation that is called before any messages come in/out. Perhaps also a corresponding teardown method for resources that need to be cleaned up like database connections.",
      "state": "closed",
      "created_at": "2021-10-20T16:06:02.371Z",
      "updated_at": "2022-05-29T23:57:57.718Z",
      "closed_at": "2022-05-29T23:57:57.701Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Community-Contributed MR",
        "flow::Doing",
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 2351599,
        "iid": 209,
        "group_id": 2524164,
        "title": "May 2022",
        "description": "",
        "state": "active",
        "created_at": "2021-11-29T21:38:23.665Z",
        "updated_at": "2021-11-29T21:38:23.665Z",
        "due_date": "2022-05-31",
        "start_date": "2022-05-01",
        "expired": true,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/209"
      },
      "assignees": [
        {
          "id": 689351,
          "username": "rabidaudio",
          "public_email": "",
          "name": "Charles Julian Knight",
          "state": "active",
          "locked": false,
          "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
          "web_url": "https://gitlab.com/rabidaudio"
        }
      ],
      "author": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "type": "ISSUE",
      "assignee": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "user_notes_count": 4,
      "merge_requests_count": 1,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/247",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/247",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/247/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/247/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#247",
        "relative": "#247",
        "full": "meltano/sdk#247"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": {
        "id": 56416,
        "iid": 56,
        "sequence": 3,
        "group_id": 2524164,
        "title": null,
        "description": null,
        "state": 3,
        "created_at": "2022-05-13T20:04:48.839Z",
        "updated_at": "2022-05-30T00:05:02.370Z",
        "start_date": "2022-05-23",
        "due_date": "2022-05-29",
        "web_url": "https://gitlab.com/groups/meltano/-/iterations/56416"
      },
      "health_status": null,
      "epic_issue_id": 893569,
      "relative_position": -5643
    },
    {
      "id": 95640317,
      "iid": 243,
      "project_id": 22672923,
      "title": "Replace the term `rows` with `records`",
      "description": "In a few places in the SDK, the term `rows` are used instead of the more standard `records` term. We should change this before - as as part of - the 1.0 release.\n\nExample case uncovered in the diff of !187.",
      "state": "closed",
      "created_at": "2021-10-18T20:41:30.842Z",
      "updated_at": "2022-05-29T23:57:29.327Z",
      "closed_at": "2022-05-29T23:57:29.311Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "Accepting Merge Requests",
        "kind::Bug",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 4809760,
        "username": "aaronsteers",
        "public_email": "aaronsteers@gmail.com",
        "name": "AJ Steers",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/a2595480c83e2879745276d7beca618e489d7df97677ed44888fd6f0f50efb29?s=80&d=identicon",
        "web_url": "https://gitlab.com/aaronsteers"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 1,
      "merge_requests_count": 0,
      "upvotes": 0,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/243",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": 2,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/243",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/243/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/243/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#243",
        "relative": "#243",
        "full": "meltano/sdk#243"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 971492,
      "relative_position": -11286
    },
    {
      "id": 95453315,
      "iid": 239,
      "project_id": 22672923,
      "title": "Syncing schemas for database targets",
      "description": "One of several common tasks for database-type targets that's currently missing from the SDK is the ability to create tables based on schema messages, and handle schema changes. Targets seem to handle this a number of different ways, and having some convention in the SDK is valuable on top of the obvious value of accelerating development of database targets.",
      "state": "closed",
      "created_at": "2021-10-14T21:17:53.104Z",
      "updated_at": "2022-05-29T23:56:58.923Z",
      "closed_at": "2022-05-29T23:56:58.879Z",
      "closed_by": {
        "id": 11629953,
        "username": "MeltyBot",
        "public_email": "",
        "name": "Melty Bot",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.com/uploads/-/system/user/avatar/11629953/avatar.png",
        "web_url": "https://gitlab.com/MeltyBot"
      },
      "labels": [
        "kind::Feature",
        "valuestream::SDK"
      ],
      "milestone": {
        "id": 797629,
        "iid": 42,
        "group_id": 2524164,
        "title": "Backlog",
        "description": "As a start, I think it would be good to prioritize based on:\r\n- urgency of getting feedback\r\n- relative implementation difficulty\r\n- symbiotic relationships between issues",
        "state": "active",
        "created_at": "2019-02-21T14:50:28.741Z",
        "updated_at": "2019-02-21T14:50:28.741Z",
        "due_date": null,
        "start_date": "2019-02-25",
        "expired": false,
        "web_url": "https://gitlab.com/groups/meltano/-/milestones/42"
      },
      "assignees": [],
      "author": {
        "id": 689351,
        "username": "rabidaudio",
        "public_email": "",
        "name": "Charles Julian Knight",
        "state": "active",
        "locked": false,
        "avatar_url": "https://secure.gravatar.com/avatar/b9e26c5bb906d08fc0aec54e121e9a5983534420c3f4568e3971008db3bbea70?s=80&d=identicon",
        "web_url": "https://gitlab.com/rabidaudio"
      },
      "type": "ISSUE",
      "assignee": null,
      "user_notes_count": 10,
      "merge_requests_count": 0,
      "upvotes": 2,
      "downvotes": 0,
      "due_date": null,
      "confidential": false,
      "discussion_locked": null,
      "issue_type": "issue",
      "web_url": "https://gitlab.com/meltano/sdk/-/issues/239",
      "time_stats": {
        "time_estimate": 0,
        "total_time_spent": 0,
        "human_time_estimate": null,
        "human_total_time_spent": null
      },
      "task_completion_status": {
        "count": 0,
        "completed_count": 0
      },
      "weight": null,
      "blocking_issues_count": 0,
      "has_tasks": true,
      "task_status": "0 of 0 checklist items completed",
      "_links": {
        "self": "https://gitlab.com/api/v4/projects/22672923/issues/239",
        "notes": "https://gitlab.com/api/v4/projects/22672923/issues/239/notes",
        "award_emoji": "https://gitlab.com/api/v4/projects/22672923/issues/239/award_emoji",
        "project": "https://gitlab.com/api/v4/projects/22672923",
        "closed_as_duplicate_of": null
      },
      "references": {
        "short": "#239",
        "relative": "#239",
        "full": "meltano/sdk#239"
      },
      "severity": "UNKNOWN",
      "moved_to_id": null,
      "imported": false,
      "imported_from": "none",
      "service_desk_reply_to": null,
      "epic_iid": 121,
      "epic": {
        "id": 337714,
        "iid": 121,
        "title": "Planning for our \"1.0\" SDK release (version 1.0)",
        "url": "/groups/meltano/-/epics/121",
        "group_id": 2524164,
        "human_readable_end_date": "Jun 30, 2022",
        "human_readable_timestamp": "<strong>Past due</strong>"
      },
      "iteration": null,
      "health_status": null,
      "epic_issue_id": 884014,
      "relative_position": -4617
    }
  ]
}
