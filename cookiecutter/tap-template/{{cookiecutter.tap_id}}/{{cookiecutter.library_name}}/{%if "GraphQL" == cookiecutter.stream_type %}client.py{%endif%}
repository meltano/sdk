"""GraphQL client handling, including {{ cookiecutter.source_name }}Stream base class."""

from pathlib import Path
from typing import Any, Dict, Optional, Union, List, Iterable

from singer_sdk.streams import {{ cookiecutter.stream_type }}Stream
{% if cookiecutter.auth_method in ("Simple", "OAuth2", "JWT") %}
from {{ cookiecutter.library_name }}.auth import {{ cookiecutter.source_name }}Authenticator
{% endif %}


SCHEMAS_DIR = Path(__file__).parent / Path("./schemas")

class {{ cookiecutter.source_name }}Stream({{ cookiecutter.stream_type }}Stream):
    """{{ cookiecutter.source_name }} stream class."""

    @property
    def url_base(self) -> str:
        """Return the API URL root, configurable via tap settings."""
        return self.config["api_url"]

    # Alternatively, use a static string for url_base:
    # url_base = "https://api.mysample.com"

{% if cookiecutter.stream_type == "REST" %}
    def get_url_params(
        self,
        partition: Optional[dict],
        next_page_token: Optional[Any] = None
    ) -> Dict[str, Any]:
        """Return a dictionary of values to be used in URL parameterization.

        If paging is supported, developers may override this method with specific paging
        logic.
        """
        params = {}
        starting_datetime = self.get_starting_timestamp(partition)
        if starting_datetime:
            params["updated"] = starting_datetime
        return params

{% endif %}


{% if cookiecutter.auth_method in ("Simple", "OAuth2", "JWT") %}
    @property
    def authenticator(self) -> {{ cookiecutter.source_name }}Authenticator:
        """Return a new authenticator object."""
        return {{ cookiecutter.source_name }}Authenticator.create_for_stream(self)

{% endif %}

    @property
    def http_headers(self) -> dict:
        """Return the http headers needed."""
        headers = {}
        if "user_agent" in self.config:
            headers["User-Agent"] = self.config.get("user_agent")
{% if cookiecutter.auth_method not in ("OAuth2", "JWT") %}
        # If not using an authenticator, you may also provide inline auth headers:
        # headers["Private-Token"] = self.config.get("auth_token")
{% endif %}
        return headers
