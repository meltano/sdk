[project]
{%- if cookiecutter.variant != "None (Skip)" %}
name = "{{cookiecutter.variant}}-{{cookiecutter.target_id}}"
{%- else %}
name = "{{cookiecutter.target_id}}"
{%- endif %}
version = "0.0.1"
description = "Singer target for {{cookiecutter.destination_name}}, built with the Meltano Singer SDK."
readme = "README.md"
authors = [{ name = "{{ cookiecutter.admin_name }}", email = "{{ cookiecutter.admin_email }}" }]
keywords = [
    "ELT",
    "{{cookiecutter.destination_name}}",
]
classifiers = [
    "Intended Audience :: Developers",
{%- if cookiecutter.license == "Apache-2.0" %}
    "License :: OSI Approved :: Apache Software License",
{%- endif %}
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
{%- if cookiecutter.license != "None" %}
license = "{{cookiecutter.license}}"
{%- endif %}
license-files = [ "LICENSE" ]
requires-python = ">=3.9"
dependencies = [
    {%- if cookiecutter.faker_extra %}
    "singer-sdk[faker]~=0.47.0",
    {%- else %}
    "singer-sdk~=0.47.0",
    {%- endif %}
    {%- if cookiecutter.serialization_method != "SQL" %}
    "requests~=2.32.3",
    {%- endif %}
]

[project.optional-dependencies]
s3 = [
    "s3fs~=2025.5.0",
]

[project.scripts]
# CLI declaration
{{cookiecutter.target_id}} = '{{cookiecutter.library_name}}.target:Target{{ cookiecutter.destination_name }}.cli'

[dependency-groups]
dev = [
    { include-group = "test" },
]
test = [
    "pytest>=8",
    {%- if cookiecutter.include_ci_files == "GitHub" %}
    "pytest-github-actions-annotate-failures>=0.3",
    {%- endif %}
    "singer-sdk[testing]",
]

{%- if cookiecutter.variant != "None (Skip)" %}
[tool.hatch.build.targets.wheel]
packages = [
    "{{cookiecutter.library_name}}",
]
{%- endif %}

[tool.mypy]
warn_unused_configs = true

[tool.ruff.lint]
ignore = [
    "COM812",  # missing-trailing-comma
]
select = ["ALL"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[build-system]
requires = [
    "hatchling>=1,<2",
]
build-backend = "hatchling.build"

# This configuration can be used to customize tox tests as well as other test frameworks like flake8 and mypy
[tool.tox]
min_version = "4.22"
requires = [
    "tox>=4.22",
    "tox-uv",
]
env_list = [
    "py313",
    "py312",
    "py311",
    "py310",
    "py39",
]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
pass_env = [
    {%- if cookiecutter.include_ci_files == "GitHub" %}
    "GITHUB_*",
    {%- endif %}
    "{{cookiecutter.target_id.replace('-', '_').upper()}}_*",
]
dependency_groups = [ "test" ]
commands = [ [ "pytest", { replace = "posargs", default = [ "tests" ], extend = true } ] ]
